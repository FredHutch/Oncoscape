{"version":3,"names":[],"mappings":"","sources":["scripts/app-b6c603ad5a.js"],"sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape', [\n            'ngAnimate',\n            'ngCookies',\n            'ngTouch',\n            'ngSanitize',\n            'ngMessages',\n            'ngAria',\n            'ngResource',\n            'ui.router',\n            'ui.bootstrap',\n            'ui.grid',\n            'ui.grid.selection',\n            'ui.grid.cellNav',\n            'ui.grid.resizeColumns',\n            'ui.grid.moveColumns',\n            'ui.grid.pinning',\n            'ui.grid.grouping',\n            'ui.grid.autoResize',\n            'ui-rangeSlider',\n            'toastr'\n        ]);\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osUserdatasource', userdatasource);\n\n    /** @ngInject */\n    function userdatasource() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/userdatasource/userdatasource.html',\n            controller: UserdatasourceController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function UserdatasourceController(osApi, $state, osAuth, $scope) {\n            var vm = this;\n            vm.user = osAuth.getUser()\n            vm.projects = osAuth.getDatasets()\n\n            vm.login = function(){\n                var networks = osAuth.getAuthSources();\n\n                //login with google\n                osAuth.login(networks[1]);\n            }\n            vm.explore = function(tool, datasource) {\n                $state.go(tool, { datasource: datasource.disease });\n            };\n            \n            vm.showDatasourceOption = function(source){\n                if(source == \"TCGA\")\n                    $state.go(\"datasource\");\n            }\n\n            var loadUserData = function(user) {\n\n                if(angular.isUndefined(user)) return;\n\n                vm.user = user\n             \n                osApi.query(\"Accounts_Users\", {\n                    Gmail: user.email,\n                }).then(function(response) {\n                    var acct = response.data[0]\n                    \n                    if(angular.isUndefined(acct) ) return\n                    \n                    osApi.query(\"Accounts_Permissions\", {\n                        User: acct._id,\n                    }).then(function(resp) {\n                        var permissions = resp.data\n                        osApi.query(\"Accounts_Projects\", {\n                            _id: {$in: _.pluck(permissions,\"Project\")}\n                        }).then(function(r) {\n                            vm.projects = r.data\n                            osAuth.setDatasets(vm.projects)\n                        })\n                    })\n                })\n                  \n             \n             vm.datasets = osApi.getDataSources();\n             \n             \n            };\n    \n            osAuth.onLogin.add(loadUserData); \n\n            osApi.setBusy(false);\n            \n           \n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osTrayPiechart', trayPiechart);\n\n    /** @ngInject */\n    function trayPiechart(d3) {\n\n        var directive = {\n            restrict: 'E',\n            scope: {\n                data1: '=chartData1',\n                data2: '=chartData2',\n                height: '=chartHeight'\n            },\n            link: TrayChartLink,\n            replace: false\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function TrayChartLink(scope, element) {\n            var chart = d3.select(element[0]).append(\"svg\").attr(\"class\", \"tray-chart\").style(\"height\", scope.height + \"px\");\n            var chart1 = chart.append(\"g\").classed(\"chartLayer\", true);\n            var chart2 = chart.append(\"g\").classed(\"chartLayer\", true);\n\n            // var elTip = d3.tip().attr(\"class\", \"tip\").offset([-8, 0]).html(function(d) {\n            //     return d.tip;\n            // });\n            // chart.call(elTip);\n            scope.$watch('data1', function(data) { draw(chart1, data, 0); });\n            scope.$watch('data2', function(data) { draw(chart2, data, scope.height - 10); });\n\n\n            var draw = function(el, data, offset) {\n\n                var arcs = d3.pie()\n                    .sort(null)\n                    .value(function(d) {\n                        return d.value;\n                    })\n                    (data);\n\n                var arc = d3.arc()\n                    .outerRadius((scope.height / 3) + 3)\n                    .innerRadius((scope.height / 3) - 13)\n                    .padAngle(0.03)\n                    .cornerRadius(0);\n\n\n                el.attr(\"transform\", \"translate(\" + [(scope.height / 2) + offset, scope.height / 2] + \")\");\n                var colors = [\"#039BE5\", \"#EAEAEA\"];\n                var block = el.selectAll(\".arc\")\n                    .data(arcs)\n                    .attr(\"d\", arc)\n                    .attr(\"id\", function(d, i) { return \"arc-\" + i })\n                    .attr(\"fill\", function(d, i) { return colors[i]; });\n\n                var newBlock = block.enter().append(\"g\").classed(\"arc\", true);\n\n                newBlock.append(\"path\")\n                    .attr(\"d\", arc)\n                    .attr(\"id\", function(d, i) { return \"arc-\" + i })\n                    //.attr(\"stroke\", \"gray\")\n                    .attr(\"fill\", function(d, i) { return colors[i]; });\n\n\n\n            }\n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osTray', tray);\n\n    /** @ngInject */\n    function tray() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/tray/tray.html',\n            scope: {\n                caption: '@',\n                content: '@',\n                change: '&'\n            },\n            controller: TrayController,\n            controllerAs: 'vm',\n            bindToController: true,\n            replace: true,\n            transclude: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function TrayController(osApi, $timeout) {\n\n            var vm = this;\n            vm.trayClass = Math.random().toString(36).substring(3);\n            vm.iconClass = Math.random().toString(36).substring(3);\n\n            var isLocked = true;\n            vm.toggle = function() {\n                var elTray = angular.element(\".\" + vm.trayClass);\n                var elIcon = angular.element(\".\" + vm.iconClass);\n\n                isLocked = !isLocked;\n                elIcon\n                    .addClass(isLocked ? 'fa-lock' : 'fa-unlock-alt')\n                    .removeClass(isLocked ? 'fa-unlock-alt' : 'fa-lock')\n                    .attr(\"locked\", isLocked ? \"true\" : \"false\");\n\n                elTray.attr(\"locked\", isLocked ? \"true\" : \"false\");\n\n                if (isLocked) {\n                    elTray\n                        .unbind(\"mouseover\", mouseOver)\n                        .unbind(\"mouseout\", mouseOut)\n                        .removeClass(\"tray-collapsed\");\n                    $timeout(function() {\n                        vm.change();\n                    });\n\n                } else {\n                    elTray\n                        .addClass(\"tray-collapsed\")\n                        .bind(\"mouseover\", mouseOver)\n                        .bind(\"mouseout\", mouseOut);\n                    $timeout(function() {\n                        vm.change();\n                    });\n                }\n\n                osApi.onResize.dispatch();\n            };\n\n            var mouseOver = function() {\n                angular.element(\".\" + vm.trayClass)\n                    .removeClass(\"tray-collapsed\");\n            }\n            var mouseOut = function() {\n                angular.element(\".\" + vm.trayClass)\n                    .addClass(\"tray-collapsed\");\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osTrayBarchart', trayBarchart);\n\n    /** @ngInject */\n    function trayBarchart(d3) {\n\n        var directive = {\n            restrict: 'E',\n            scope: {\n                data: '=chartData',\n                height: '=chartHeight'\n            },\n            link: TrayChartLink,\n            replace: false\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function TrayChartLink(scope, element) {\n            var chart = d3.select(element[0]).append(\"svg\").attr(\"class\", \"tray-chart\").style(\"height\", scope.height + \"px\");\n            var elTip = d3.tip().attr(\"class\", \"tip\").offset([-8, 0]).html(function(d) {\n                return d.tip;\n            });\n            chart.call(elTip);\n            scope.$watch('data', function(newValue) {\n                var barHeight = scope.height - 10;\n                var barWidth = (250 / newValue.length) - 1;\n                var binding = chart\n                    .selectAll(\"rect\")\n                    .data(scope.data);\n                binding.enter()\n                    .append(\"rect\")\n                    .on(\"mouseover\", elTip.show)\n                    .on(\"mouseout\", elTip.hide)\n                    .transition()\n                    .attr(\"class\", \"tray-bar\")\n                    .style(\"width\", barWidth + \"px\")\n                    .style(\"x\", function(d, i) { return (((barWidth + 1) * i) + 5) + \"px\"; })\n                    .style(\"height\", function(d) { return (d.value * barHeight) + \"px\"; })\n                    .style(\"y\", function(d) { return (barHeight - (d.value * barHeight) + 5) + \"px\"; })\n                    .text(function(d) { return d.label; });\n                binding.exit().remove();\n                binding\n                    .transition()\n                    .style(\"width\", barWidth + \"px\")\n                    .style(\"x\", function(d, i) { return (((barWidth + 1) * i) + 5) + \"px\"; })\n                    .style(\"height\", function(d) { return (d.value * barHeight) + \"px\"; })\n                    .style(\"y\", function(d) { return (barHeight - (d.value * barHeight) + 5) + \"px\"; });\n\n\n\n            });\n\n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osTools', tools);\n\n    /** @ngInject */\n    function tools() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/tools/tools.html',\n            controller: ToolsController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function ToolsController(osApi, $state) {\n            var vm = this;\n            vm.tools = osApi.getTools();\n            vm.explore = function(tool) {\n                $state.go(tool, {\n                    datasource: osApi.getDataSource().dataset\n                });\n            };\n            osApi.setBusy(false);\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osTimelines', timelines);\n\n    /** @ngInject */\n    function timelines() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/timelines/timelines.html',\n            controller: TimelinesController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function TimelinesController(osApi, $state, $scope, $stateParams, $window, $document, moment, d3, _) {\n\n\n            // Loading . . . \n            osApi.setBusy(true);\n\n            // View Model\n            var patientsAll = []; // All Patient Data\n            var patientsVisible = []; // Visible Patient Data\n            var patientsDomain = []; // Min + Max Times\n            var rowHeight = 20;\n            var baseZoomX = 1;\n            var baseZoomY = 1;\n            var xZoom, yZoom, xTran, yTran;\n            var scaleX;\n\n            var vm = this;\n            vm.datasource = osApi.getDataSource();\n            vm.cohort = osApi.getCohort();\n            vm.timescales = [{\n                    name: 'Log',\n                    valFn: function(val) {\n\n                        return (val < 0 ? -1 : 1) * Math.log(Math.abs((val * 1000) / 86400000) + 1) / Math.log(2);\n                    }\n                },\n                { name: 'Linear', valFn: function(val) { return moment.duration(val * 1000).asDays(); } }\n            ];\n            vm.filters = [\n                { name: 'Alive + Dead' },\n                { name: 'Only Alive' },\n                { name: 'Only Dead' }\n            ];\n            vm.modes = [\n                { name: \"Highlight\" },\n                { name: \"Filter\" }\n            ];\n            vm.displayModes = [\n                { name: 'All Patients' },\n                { name: 'Selected Patients' }\n            ];\n            vm.timescale = vm.timescales[0];\n            vm.filter = vm.filters[0];\n            vm.mode = vm.modes[0];\n            vm.displayMode = vm.displayModes[0];\n            vm.events = null;\n            vm.align = null;\n            vm.sort = null;\n            vm.resetZoom = function() {\n                osApi.setCohort([], osApi.ALL, osApi.PATIENT);\n                elScrollY.call(brushY.move, null);\n                elScrollX.call(brushX.move, null);\n            };\n\n            // Elements\n            var brushY = d3.brushY().handleSize(3);\n            var brushX = d3.brushX().handleSize(3);\n            var brushSelect = d3.brushY().handleSize(1);\n            var elContainer = d3.select(\".timelines-content\");\n            var elAxis = elContainer.append(\"svg\").attr(\"class\", \"timeline-axis\");\n            var elScrollY = elContainer.append(\"svg\").attr(\"class\", \"timeline-scroll-y\");\n            var elScrollX = elContainer.append(\"svg\").attr(\"class\", \"timeline-scroll-x\");\n            var elChart = elContainer.append(\"svg\").attr(\"class\", \"timeline-chart\");\n            var elSelected = elChart.append(\"g\");\n            var elHitarea = elChart.append(\"g\");\n            var elPatients = elChart.append(\"g\");\n\n            var elTip = d3.tip().attr(\"class\", \"tip\").offset([-8, 0]).html(function(d) { return d.tip; });\n            elChart.call(elTip);\n\n            elContainer = angular.element(\".timelines-content\");\n\n            var drawScrollbars = function() {\n                var layout = osApi.getLayout();\n                var width = $window.innerWidth - layout.left - layout.right - 80;\n                var height = $window.innerHeight - 200;\n                elScrollY.call(\n                    brushY\n                    .on(\"end\", function() {\n                        if (d3.event.selection !== null) {\n                            var lower = d3.event.selection[0];\n                            var upper = d3.event.selection[1];\n                            var domain = height;\n                            var lowerPercent = lower / domain;\n                            var upperPercent = upper / domain;\n                            var deltaPercent = upperPercent - lowerPercent;\n                            yZoom = (baseZoomY / deltaPercent);\n                            yTran = (rowHeight * patientsVisible.length * yZoom) * -lowerPercent;\n                        } else {\n                            if (yZoom == baseZoomY && yTran === 0) return;\n                            yZoom = baseZoomY;\n                            yTran = 0;\n                            elScrollY.call(brushY.move, null);\n                        }\n                        elPatients\n                            .transition()\n                            .duration(750)\n                            .attr(\"transform\", \"translate(\" + xTran + \",\" + yTran + \") scale(\" + xZoom + \",\" + yZoom + \")\");\n\n                        elSelected\n                            .transition()\n                            .duration(750)\n                            .attr(\"transform\", \"translate(\" + xTran + \",\" + yTran + \") scale(\" + xZoom + \",\" + yZoom + \")\");\n\n                    })\n                );\n                elScrollX.call(\n                    brushX\n                    .on(\"end\", function() {\n\n\n\n                        if (d3.event.selection !== null) {\n                            var lower = d3.event.selection[0];\n                            var upper = d3.event.selection[1];\n                            var domain = width - 20;\n                            var lowerPercent = lower / domain;\n                            var upperPercent = upper / domain;\n                            var deltaPercent = upperPercent - lowerPercent;\n                            xZoom = (baseZoomX / deltaPercent);\n                            xTran = (width * xZoom) * -lowerPercent;\n                        } else {\n                            if (xZoom == baseZoomX && xTran === 0) return;\n                            xZoom = baseZoomX;\n                            xTran = 0;\n                            elScrollX.call(brushX.move, null);\n\n                        }\n                        elPatients\n                            .transition()\n                            .duration(750)\n                            .attr(\"transform\", \"translate(\" + xTran + \",\" + yTran + \") scale(\" + xZoom + \",\" + yZoom + \")\");\n                        drawAxis();\n                    })\n                );\n            };\n\n\n            var daysToUnit = function(d) {\n                if (Math.abs(d) === 0) return d;\n                if (Math.abs(d) < 30) return d + \" Days\";\n                if (Math.abs(d) < 360) return Math.round((d / 30.4) * 10) / 10 + \" Months\";\n                return Math.round((d / 365) * 10) / 10 + \" Years\";\n            };\n\n            var drawAxis = function() {\n\n                var zi = d3.zoomIdentity.translate(xTran).scale(xZoom);\n                var ns = zi.rescaleX(scaleX);\n                var axis = d3.axisBottom(ns).ticks(5);\n\n                if (vm.timescale.name == 'Linear') {\n                    axis.tickFormat(function(d) {\n                        return daysToUnit(d);\n                    });\n                } else {\n                    axis.tickFormat(function(d) {\n                        return daysToUnit(Math.round((d < 0 ? -1 : 1) * (Math.pow(2, (Math.abs(d))) - 1) * 100) / 100);\n                    });\n                }\n                elAxis.transition().duration(900).call(axis);\n            };\n\n\n            function onCohortChange() {\n                updatePatientsVisible();\n                drawSelected();\n            }\n\n            function calculateSelection() {\n                if (d3.event.selection === null) return;\n                var lowerIndex = Math.round(Math.round(d3.event.selection[0] - yTran) / yZoom / 20);\n                var upperIndex = Math.round(Math.round(d3.event.selection[1] - yTran) / yZoom / 20);\n                if (lowerIndex < 0) lowerIndex = 0;\n                if (upperIndex >= patientsVisible.length) upperIndex = patientsVisible.length - 1;\n                if (lowerIndex == upperIndex) upperIndex = lowerIndex + 1;\n                var ids = [];\n                for (var i = lowerIndex; i <= upperIndex; i++) {\n                    ids.push(patientsVisible[i].id);\n                }\n                ids.pop();\n                osApi.setCohort(ids, \"Timelines\", osApi.PATIENT);\n                elHitarea.call(d3.event.target.move, null);\n            }\n\n            function drawSelected() {\n\n                // Transform Selections Into Index Positions - Don't need to render unselected\n                var selectedIndexes = patientsVisible.map(function(v, i) {\n                    return (v.selected) ? i : -1;\n                }).filter(function(v) { return v != -1; });\n\n                var selectedRows = elSelected.selectAll(\"rect\").data(selectedIndexes);\n\n                selectedRows.exit()\n                    .transition()\n                    .duration(600)\n                    .attr(\"width\", \"0\")\n                    .remove();\n\n                selectedRows.enter()\n                    .append('rect')\n                    .attr('width', '0')\n                    .attr('height', rowHeight - 2)\n                    .attr('y', 1)\n                    .attr('transform', function(d) { return \"translate(0,\" + (d * rowHeight) + \")\"; })\n                    .style(\"fill\", \"#cacaca\")\n                    .transition()\n                    .duration(600)\n                    .attr(\"width\", \"100%\");\n\n                selectedRows\n                    .transition()\n                    .duration(600)\n                    .attr('transform', function(d) { return \"translate(0,\" + (d * rowHeight) + \")\"; });\n            }\n\n            function drawPatients() {\n\n                var layout = osApi.getLayout();\n                var width = $window.innerWidth - layout.left - layout.right - 80;\n\n                // Set Scale\n                scaleX = d3.scaleLinear().domain(patientsDomain).range([0, width]).nice();\n                var patients = elPatients.selectAll(\"g.patient\").data(patientsVisible);\n                patients.exit()\n                    .transition()\n                    .delay(200)\n                    .duration(500)\n                    .style('opacity', 0.0)\n                    .remove();\n\n                var patientEnter = patients.enter()\n                    .append('g')\n                    .attr(\"class\", \"patient\")\n                    .attr('transform', function(d, i) {\n                        return \"translate(0,\" + (i * rowHeight) + \")\";\n                    });\n\n                drawEvents(patients.selectAll(\".event\").data(function(d) {\n                    return d.events.filter(function(v) { return v.visible; });\n                }));\n\n                drawEvents(patientEnter.selectAll(\".event\").data(function(d) {\n                    return d.events.filter(function(v) { return v.visible; });\n                }));\n\n\n            }\n\n            // Gets called by Draw Patients Don't call manually\n            function drawEvents(evts) {\n                evts.exit()\n                    .on(\"mouseover\", null)\n                    .on(\"mouseout\", null)\n                    .remove();\n                evts.enter().append(\"rect\")\n                    .attr('class', 'event')\n                    .attr('width', function(d) { return Math.max((scaleX(d.tsEndAligned) - scaleX(d.tsStartAligned)), 2); })\n                    .attr('height', function(d) { return (d.name == \"Radiation\" || d.name == \"Drug\") ? (rowHeight - 2) / 2 : rowHeight - 2; })\n                    .attr('y', function(d) { return ((d.name == \"Radiation\") ? rowHeight / 2 : 1); })\n                    .attr('x', function(d) { return scaleX(d.tsStartAligned); })\n                    .style('fill', function(d) { return d.color; })\n                    .on(\"mouseover\", elTip.show)\n                    .on(\"mouseout\", elTip.hide);\n                evts\n                    .attr('width', function(d) { return Math.max((scaleX(d.tsEndAligned) - scaleX(d.tsStartAligned)), 2); })\n                    .attr('height', function(d) { return (d.name == \"Radiation\" || d.name == \"Drug\") ? rowHeight / 2 : rowHeight; })\n                    .attr('y', function(d) { return ((d.name == \"Radiation\") ? rowHeight / 2 : 0); })\n                    .attr('x', function(d) { return scaleX(d.tsStartAligned); })\n                    .style('fill', function(d) { return d.color; });\n            }\n\n            function updateScale() {\n                var layout = osApi.getLayout();\n                var width = $window.innerWidth - layout.left - layout.right - 80;\n                var height = $window.innerHeight - 200;\n                elContainer.css(\"background\", \"#FAFAFA\").css(\"margin-left\", layout.left + 30).css(\"margin-right\", layout.right).css(\"width\", width + 20).css(\"height\", height + 20);\n                elScrollY.attr(\"height\", height);\n                elScrollX.attr(\"width\", width);\n                elChart.attr(\"height\", height).attr(\"width\", width).attr(\"fill\", \"blue\").attr('transform', 'translate(0,0)');\n                elPatients.attr(\"height\", height).attr(\"width\", width);\n                elSelected.attr(\"height\", height).attr(\"width\", width);\n                elAxis.style(\"top\", height + 20).attr(\"width\", width);\n                elHitarea.attr(\"width\", width).attr(\"height\", height);\n\n                // Set Zoom + Transition Data\n                baseZoomY = height / (patientsVisible.length * rowHeight);\n                baseZoomX = 1;\n                xZoom = baseZoomX;\n                yZoom = baseZoomY;\n                xTran = 0;\n                yTran = 0;\n                if (baseZoomY == Infinity) baseZoomY = 10;\n\n                // Scale + Transform\n                elPatients.attr(\"transform\", \"translate(\" + xTran + \",\" + yTran + \") scale(\" + xZoom + \",\" + yZoom + \")\");\n                elSelected.attr(\"transform\", \"translate(\" + xTran + \",\" + yTran + \") scale(\" + xZoom + \",\" + yZoom + \")\");\n            }\n\n            // Filter + Sort Patients = Set patientsFiltered\n            function updatePatientsVisible() {\n\n                vm.cohort = osApi.getCohort();\n                var align = vm.align.name;\n                var sort = vm.sort.name;\n                var filter = vm.filter.name;\n                var events = vm.events.filter(function(e) {\n                    return e.selected;\n                }).map(function(e) {\n                    return e.name.toLowerCase();\n                });\n\n                // Filter Dataset + Calculate Domain\n                patientsDomain = [Infinity, -Infinity];\n                patientsAll.forEach(function(patient) {\n\n                    // Set Selected\n                    patient.selected = (vm.cohort.patientIds.indexOf(patient.id) !== -1);\n                    patient.visible = true;\n\n                    // Filter Patients W/O Align, Sort or Filter\n                    if (!patient.hash.hasOwnProperty(this.align) || !patient.hash.hasOwnProperty(this.sort) || !patient.hash.hasOwnProperty(\"Status\")) {\n                        patient.visible = false;\n                        return;\n                    }\n\n                    // Filter Based On Alive Dead Status\n                    var status = patient.hash.Status.data.status.trim().toLowerCase();\n                    if ((this.filter == \"Only Alive\" && status == \"dead\") || (this.filter == \"Only Dead\" && status != \"dead\")) {\n                        patient.visible = false;\n                        return;\n                    }\n\n\n                    // Filter Selected\n                    if (vm.displayMode.name == \"Selected Patients\" && !patient.selected) {\n                        patient.visible = false;\n                        return;\n                    }\n\n                    this.offset = 0 - patient.hash[this.align].tsStart;\n\n                    // Filter Events\n                    patient.events.forEach(function(event) {\n                        event.visible = (this.events.indexOf(event.name.toLowerCase()) != -1);\n                        // Calculate Start + End Based On Alignment\n                        if (event.visible) {\n                            event.tsStartAligned = vm.timescale.valFn(event.tsStart + this.offset);\n                            event.tsEndAligned = vm.timescale.valFn(event.tsEnd + this.offset);\n                            this.domain[0] = Math.min(this.domain[0], event.tsStartAligned);\n                            this.domain[1] = Math.max(this.domain[1], event.tsEndAligned);\n                        }\n                    }, this);\n\n                }, {\n                    align: align,\n                    sort: sort,\n                    filter: filter,\n                    events: events,\n                    domain: patientsDomain,\n                    offset: 0\n                });\n\n                // Sort Patients\n                patientsVisible = patientsAll.filter(function(v) { return v.visible; }).sort(function(a, b) {\n                    if (a.status == b.status) {\n                        var aTime = a.events.filter(function(e) { return (e.name == sort && e.order == 1); })[0].tsStartAligned;\n                        var bTime = b.events.filter(function(e) { return (e.name == sort && e.order == 1); })[0].tsStartAligned;\n                        if (aTime > bTime) return 1;\n                        if (bTime > aTime) return -1;\n                        return 0;\n                    } else {\n                        return (a.status == \"dead\") ? 1 : -1;\n                    }\n                });\n\n            }\n\n            // Load Data\n            osApi.query(osApi.getDataSource().clinical.events, {}).then(function(response) {\n\n                var colorFn = function(status) {\n                    return (status == \"Birth\") ? \"#E91E63\" :\n                        (status == \"Diagnosis\") ? \"#673AB7\" :\n                        (status == \"Pathology\") ? \"#2196F3\" :\n                        (status == \"Progression\") ? \"#00BCD4\" :\n                        (status == \"Absent\") ? \"#CDDC39\" :\n                        (status == \"Status\") ? \"#FFC107\" :\n                        (status == \"Radiation\") ? \"#FF5722\" :\n                        (status == \"Procedure\") ? \"#795548\" :\n                        (status == \"Encounter\") ? \"#607D8B\" :\n                        (status == \"Drug\") ? \"#03A9F4\" :\n                        \"black\";\n                };\n                var data = response.data[0];\n                var events = {};\n                data = Object.keys(data).map(function(key) {\n                    // Loop Throug Events\n                    var evtArray = this.data[key]\n                        .filter(function(v) {\n                            return v.start !== null;\n                        })\n                        .map(function(v) {\n                            this.events[v.name] = null;\n                            if (v.hasOwnProperty(\"data\")) {\n                                v.tip = Object.keys(v.data).reduce(function(p, c) {\n                                    try {\n                                        if (v.data[c] !== null) {\n                                            p += \"<br>\" + c\n                                                .replace(/([A-Z])/g, \" $1\")\n                                                .replace(/\\w\\S*/g, function(txt) {\n                                                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                                                }) + \": \" + v.data[c].toString()\n                                                .replace(/\\w\\S*/g, function(txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });\n                                        }\n                                    } catch (e) {\n                                        return \"\";\n                                    }\n                                    return p;\n                                }, v.name);\n                            } else if (v.hasOwnProperty(\"name\")) {\n                                v.tip = v.name;\n                            } else {\n                                v.tip = \"Unknown\";\n                            }\n                            v.tsStart = moment(v.start, \"MM/DD/YYYY\").unix();\n                            v.tsEnd = (v.end === null) ? v.tsStart : moment(v.end, \"MM/DD/YYYY\").unix();\n                            v.tsStartAligned = \"\";\n                            v.tsEndAligned = \"\";\n                            v.end = (v.end === null) ? v.start : v.end;\n                            v.color = this.colorFn(v.name);\n                            v.visible = true;\n                            v.order = 1;\n                            return v;\n                        }, {\n                            events: this.events,\n                            colorFn: this.colorFn\n                        });\n                    var evtHash = evtArray.reduce(function(p, c) {\n                        if (p.hasOwnProperty(c.name)) {\n                            if (p[c.name].tsStart > c.tsStart) p[c.name] = c;\n                        } else {\n                            p[c.name] = c;\n                        }\n                        return p;\n                    }, {});\n                    return {\n                        id: key,\n                        events: evtArray,\n                        hash: evtHash\n                    };\n                }, {\n                    data: data,\n                    events: events,\n                    colorFn: colorFn\n                });\n                data.forEach(function(patient) {\n                    var groups = _.groupBy(patient.events, 'name');\n                    var keys = Object.keys(groups).filter(function(prop) {\n                        return (this[prop].length > 1);\n                    }, groups);\n                    keys.forEach(function(v) {\n                        var i = 1;\n                        patient.events\n                            .filter(function(e) { return e.name == v; })\n                            .sort(function(a, b) {\n                                return a.tsStart - b.tsStart;\n                            }).forEach(function(v) {\n                                v.order = i;\n                                i++;\n                            });\n                    });\n                });\n                patientsAll = data.filter(function(v) {\n                    try {\n\n                        v.status = v.hash.Status.data.status.toLowerCase();\n                        return true;\n                    } catch (e) {\n                        return false;\n                    }\n                });\n                vm.events = Object.keys(events).map(function(v) {\n                    return {\n                        name: v,\n                        selected: ([\"Birth\", \"Pathology\", \"Absent\", \"Procedure\"].indexOf(v) == -1),\n                        color: this(v)\n                    };\n                }, colorFn);\n                vm.align = vm.events.filter(function(v) {\n                    if (v.name == \"Diagnosis\") return true;\n                })[0];\n                vm.sort = vm.events.filter(function(v) {\n                    if (v.name == \"Status\") return true;\n                })[0];\n\n\n\n                updatePatientsVisible();\n                updateScale(); // Depends on Visible Patients\n\n                drawPatients();\n                drawSelected();\n                drawScrollbars();\n                drawAxis();\n                elHitarea.call(brushSelect);\n                brushSelect.on(\"end\", calculateSelection);\n                osApi.onCohortChange.add(onCohortChange);\n                osApi.setBusy(false);\n            });\n\n            vm.update = function() {\n\n                elScrollY.call(brushY.move, null);\n                elScrollX.call(brushX.move, null);\n\n                updatePatientsVisible();\n                updateScale(); // Depends on Visible Patients\n                drawPatients();\n                drawScrollbars();\n                drawSelected();\n                drawAxis();\n            };\n            osApi.onResize.add(vm.update);\n\n            // Destroy\n            $scope.$on('$destroy', function() {\n                osApi.onCohortChange.remove(onCohortChange);\n                brushX.on(\"end\", null);\n                brushY.on(\"end\", null);\n                brushSelect.on(\"end\", null);\n                osApi.onResize.remove(vm.update);\n            });\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osSurvival', survival);\n\n    /** @ngInject */\n    function survival() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/survival/survival.html',\n            controller: SurvivalController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function SurvivalController(d3, osApi, $state, $timeout, $scope, $stateParams, $window, _) {\n\n            // Loading . . . \n            osApi.setBusy(true);\n\n            // View Model\n            var vm = this;\n            vm.datasource = osApi.getDataSource();\n\n            vm.cohort = osApi.getCohort();\n            vm.cohorts = (osApi.getCohorts().indexOf(vm.cohort) == -1) ?\n                osApi.getCohorts().concat([vm.cohort]) : osApi.getCohorts();\n\n            vm.pValues = [];\n            vm.setCohort = function(cohort) {\n                osApi.setCohort(cohort);\n            };\n\n            // Format Elements\n            var formatPercent = function(d) { return Math.round(d * 100) + \"%\"; };\n            var formatDays = function(d) {\n                if (Math.abs(d) === 0) return d;\n                if (Math.abs(d) < 30) return d + \" Days\";\n                if (Math.abs(d) < 360) return Math.round((d / 30.4) * 10) / 10 + \" Months\";\n                return Math.round((d / 365) * 10) / 10 + \" Years\";\n            };\n\n            // Create D3 Elements\n            var elContainer = angular.element(\"#survival-chart\");\n            var elChart = d3.select(\"#survival-chart\").append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", \"100%\");\n            var elBrush = elChart.append(\"g\");\n            var elCurves = elChart.append(\"g\");\n            var elXAxis = elChart.append(\"g\").attr(\"class\", \"axis\");\n            var elYAxis = elChart.append(\"g\").attr(\"class\", \"axis\").attr(\"transform\", \"translate(50, 10)\");\n            var brush = d3.brush();\n\n            // Base Layout\n            var layout = {\n                width: 0,\n                height: 0,\n                xScale: d3.scaleLinear(),\n                yScale: d3.scaleLinear(),\n                xDomain: [0, 1], // Effected By Survival Min Max\n                yDomain: [0, 1],\n                xAxis: d3.axisBottom().ticks(5).tickFormat(formatDays),\n                yAxis: d3.axisLeft().ticks(5).tickFormat(formatPercent)\n            };\n\n            // Curve Functions + Events\n            var curveFunction = d3.line()\n                .curve(d3.curveStepAfter)\n                .x(function(d) { return Math.round(layout.xScale(d.t)); })\n                .y(function(d) {\n                    return layout.yScale(d.s);\n                });\n            var onCurveMouseOver = function() {}; // d3.event.target.style.strokeWidth = \"3px\"; };\n            var onCurveMouseOut = function() {}; // d3.event.target.style.strokeWidth = \"1px\"; };\n\n            var addCurve = function(cohort) {\n\n                // Create Group To Hold Curve\n                var g = elCurves.append(\"g\")\n                    .attr(\"class\", \"curve\")\n                    .attr(\"transform\", \"translate(0, 10)\");\n\n                // Add Ticks\n                var ticks = cohort.survival.compute.filter(function(v) { return v.c.length > 0; });\n                ticks.forEach(function(t) {\n                    var tx = Math.round(layout.xScale(t.t));\n                    var ty = Math.round(layout.yScale(t.s));\n                    g.append(\"line\")\n                        .attr(\"class\", \"survival-tick\")\n                        .style(\"stroke\", cohort.color)\n                        .attr(\"x1\", tx)\n                        .attr(\"x2\", tx)\n                        .attr(\"y1\", ty - 3)\n                        .attr(\"y2\", ty + 3);\n                });\n\n                // Append Path\n                g.append(\"path\")\n                    .datum(cohort.survival.compute)\n                    .attr(\"tip\", cohort.name + \" Vs. All Patients + Samples<br> p : \" + cohort.survival.logrank.pValue)\n                    .attr(\"class\", \"survival-line\")\n                    .style(\"stroke\", cohort.color)\n                    .attr(\"d\", curveFunction)\n                    .on(\"mouseover\", onCurveMouseOver)\n                    .on(\"mouseout\", onCurveMouseOut)\n                    .on(\"click\", function() {\n                        osApi.setCohort(cohort);\n                    });\n            };\n\n            // Drawing Methods\n            var dataChange = function() {\n\n                // Determine The XDomain\n                layout.xDomain = vm.cohorts\n                    .filter(function(v) { return v.show; })\n                    .reduce(function(p, c) {\n                        p[0] = Math.min(p[0], c.survival.compute[0].t);\n                        p[1] = Math.max(p[1], c.survival.compute[c.survival.compute.length - 1].t);\n                        return p;\n                    }, [Infinity, -Infinity]);\n\n                // Trigger Resize\n                resize();\n            };\n\n\n            var onBrushEnd = function() {\n                if (!d3.event.selection) {\n                    osApi.setCohort(vm.cohorts.filter(function(c) { return c.type == \"ALL\"; })[0]);\n                    return;\n                }\n                var s = d3.event.selection;\n                osApi.setBusy(true);\n\n                // Calculate Bounds Of Selection\n                var rangeSort = function(a, b) { return a - b; };\n                var timeRange = [s[0][0], s[1][0]].map(layout.xScale.invert).sort(rangeSort);\n                var percentRange = [s[0][1] - 10, s[1][1] - 10].map(layout.yScale.invert).sort(rangeSort);\n                var visibleCohorts = vm.cohorts.filter(function(v) { return v.show; });\n                var visibleCompute = visibleCohorts.reduce(function(p, c) { return p.concat(c.survival.compute); }, []);\n                var computeInRange = visibleCompute.filter(function(v) {\n                    return (\n                        (v.t >= this.timeRange[0]) &&\n                        (v.t <= this.timeRange[1]) &&\n                        (v.s >= this.percentRange[0]) &&\n                        (v.s <= this.percentRange[1])\n                    );\n                }, { timeRange: timeRange, percentRange: percentRange });\n\n                var combinedIds = computeInRange.reduce(function(p, c) { return p.concat(c.c, c.d); }, []);\n                var uniqueIds = _.unique(combinedIds);\n                osApi.setCohort(uniqueIds, \"Survival\", osApi.PATIENT);\n                osApi.setBusy(false);\n            };\n\n            var resize = function() {\n\n                // Get Screen Dimensions\n                var osLayout = osApi.getLayout();\n                layout.width = $window.innerWidth - osLayout.left - osLayout.right - ((osLayout.left === 0) ? 20 : 0) - ((osLayout.right === 0) ? 20 : 0);\n                layout.height = $window.innerHeight - 125;\n\n                // Position container\n                elContainer.css({ 'width': layout.width, 'height': layout.height, 'margin-left': (osLayout.left === 0) ? 20 : osLayout.left });\n\n                // Scale Axis\n                layout.xScale.domain(layout.xDomain).range([40, layout.width - 40]);\n                layout.yScale.domain(layout.yDomain).range([layout.height - 40, 10]);\n                layout.xAxis.scale(layout.xScale);\n                layout.yAxis.scale(layout.yScale);\n                elXAxis.attr(\"transform\", \"translate(0, \" + (layout.height - 30) + \")\").call(layout.xAxis);\n                elYAxis.attr(\"transform\", \"translate(40, 10)\").call(layout.yAxis);\n\n                // Draw Cohorts\n                elCurves.selectAll(\".curve\").remove();\n                vm.cohorts\n                    .filter(function(v) { return v.show; })\n                    .map(addCurve);\n                if (vm.cohorts.indexOf(vm.cohort) == -1) {\n                    addCurve(vm.cohort);\n                }\n\n                // Set Selected + Set P Values\n                var selectedColor = d3.rgb(vm.cohort.color).toString();\n                elCurves.selectAll(\".curve\").each(function() {\n                    var me = d3.select(this);\n                    var selected = (d3.select(this).select(\".survival-line\").style(\"stroke\") == selectedColor);\n                    me.classed(\"survival-line-selected\", selected);\n                });\n\n                var pValues = vm.cohorts.filter(function(v) { return v != vm.cohort; }).map(function(v) {\n                    return {\n                        c: [vm.cohort.color, v.color],\n                        n: v.name,\n                        p: osApi.km.logranktest([vm.cohort.survival.data, v.survival.data]).pValue\n                    };\n\n                });\n\n                var all = vm.cohorts.filter(function(v) { return v.show; });\n                if (all.length !== 1) {\n\n\n                    if (vm.cohorts.indexOf(vm.cohort) == -1) {\n                        all.unshift(vm.cohort);\n                    }\n                    all.sort(function(a) {\n                        if (vm.cohort.color == a.color) return -1;\n                        if (a.color == \"#E91E63\") return -1;\n                        return 0;\n                    });\n                }\n\n                pValues.unshift({\n                    c: all.map(function(v) { return v.color; }),\n                    n: 'Visible Cohorts',\n                    p: osApi.km.logranktest(all.map(function(v) { return v.survival.data; })).pValue\n                });\n                vm.pValues = pValues;\n\n                brush.extent([\n                    [40, 20],\n                    [layout.width - 30, layout.height - 30]\n                ]);\n                brush.on(\"end\", onBrushEnd);\n                elBrush.call(brush);\n            };\n\n            var onCohortsChange = function() {\n                vm.cohorts = osApi.getCohorts();\n                vm.cohort = osApi.getCohort();\n                vm.cohort.show = true;\n                vm.cohortsLegend = vm.cohorts.filter(function(v) { return v != vm.cohort; });\n                resize();\n            };\n\n            var onCohortChange = function() {\n                onCohortsChange();\n            };\n\n            vm.toggle = function(cohort) {\n                if (vm.cohorts.reduce(function(p, c) { p += c.show ? 1 : 0; return p; }, 0) === 0) {\n                    alert(\"You must have at least one cohort visible\");\n                    cohort.show = true;\n                    return;\n                }\n                dataChange();\n                var lrt = osApi.km.logranktest(vm.cohorts.filter(function(v) { return v.show; }).map(function(v) { return v.survival.data; }));\n                vm.pSelected = \"P: \" + lrt.pValue + \" DOF: \" + lrt.dof;\n            };\n\n\n            // Create\n            osApi.onResize.add(resize);\n            osApi.onCohortChange.add(onCohortChange);\n            osApi.onCohortsChange.add(onCohortsChange);\n            dataChange();\n            onCohortChange(osApi.getCohort());\n            osApi.setBusy(false);\n\n            // Destroy\n            $scope.$on('$destroy', function() {\n                osApi.onResize.remove(resize);\n                osApi.onCohortChange.remove(onCohortChange);\n            });\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osSunburst', sunburst);\n\n    /** @ngInject */\n    function sunburst() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/sunburst/sunburst.html',\n            controller: SunburstController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function SunburstController(d3, osApi, $state, $timeout, $scope, $stateParams, $window, _) {\n\n            var colorMap;\n            var vm = this;\n            vm.patients = [];\n            vm.patient = null;\n            vm.datasource = osApi.getDataSource();\n            vm.charts = [];\n\n            var getColorMap = function(data) {\n                var colors = [\"#F44336\", \"#E91E63\", \"#9C27B0\", \"#673AB7\", \"#3F51B5\", \"#2196F3\", \"#0277BD\", \"#00BCD4\", \"#009688\", \"#4CAF50\", \"#8BC34A\", \"#CDDC39\", \"#FFEB3B\", \"#FFC107\", \"#FF9800\", \"#FF5722\", \"#795548\", \"#C51162\", \"#B388FF\"];\n                var tags = data.reduce(function(p, c) {\n                    tags = c.groups.reduce(function(p, c) {\n                        return _.union(p, c.tags)\n                    }, []);\n                    return _.union(p, tags)\n                }, []);\n                colors.length = tags.length;\n                var colorMap = _.object(tags, colors);\n                colorMap[\"Tumor\"] = \"#FEFEFE\";\n                colorMap[\"Normal\"] = \"#EAEAEA\";\n                return colorMap;\n            };\n\n\n            osApi.setBusy(true);\n            osApi.query(\"biomarker_immune_tree\").then(function(response) {\n                osApi.setBusy(false);\n                colorMap = getColorMap(response.data[0].barcharts);\n                response.data.forEach(function(v) {\n                    v.barcharts.forEach(function(v) {\n                        v.groups.forEach(function(v) {\n                            v.show = true;\n                            v.tags = v.tags.map(function(v) {\n                                return { name: v, color: colorMap[v] };\n                            });\n                        })\n                    })\n                });\n                vm.patients = response.data;\n                vm.patient = vm.patients[0];\n                vm.draw()\n            });\n\n            vm.draw = function() {\n                sunburst.draw(vm, colorMap);\n                bars.draw(vm, colorMap);\n            }\n\n            // Sunburst\n            var sunburst = (function() {\n                var color = d3.scaleOrdinal(d3.schemeCategory20);\n                //var formatNumber = d3.format(\",d\");\n                var arc,\n                    radius,\n                    x,\n                    y,\n                    data,\n                    svg,\n                    labelTumor,\n                    labelNormal,\n                    sunburstNormal,\n                    sunburstTumor;\n\n                var tooltip = d3.select(\"#sunburst-chart\").append(\"div\")\n                    .attr(\"class\", \"tooltip\")\n                    .style(\"opacity\", 0);\n                var w = d3.select(window);\n\n                var init = function(chart) {\n                    svg = chart;\n                    labelTumor = svg.append(\"text\").text(\"Tumor\");\n                    labelNormal = svg.append(\"text\").text(\"Normal\");\n                    sunburstNormal = svg.append(\"g\");\n                    sunburstTumor = svg.append(\"g\");\n                }\n\n                var mousemove = function() {\n                    tooltip\n                        .style('top', (d3.event.layerY + 10) + 'px')\n                        .style('left', (d3.event.layerX + 10) + 'px');\n                }\n                var mouseover = function(d) {\n                    tooltip.html(d.data.name)\n                        .style(\"opacity\", 1)\n                        .style('top', (d3.event.layerY + 10) + 'px')\n                        .style('left', (d3.event.layerX + 10) + 'px');\n                    w.on(\"mousemove\", mousemove).on(\"mouseup\", null);\n                }\n\n                var mouseout = function(d) {\n                    tooltip.html(d.data.Name)\n                        .style(\"opacity\", 0)\n                }\n\n                var click = function(d) {\n                    var root = d;\n                    while (root.parent) root = root.parent\n                    var sunburst = (root.data.name == \"Normal\") ? sunburstNormal : sunburstTumor;\n                    sunburst\n                        .transition()\n                        .duration(750)\n                        .tween(\"scale\", function() {\n                            var xd = d3.interpolate(x.domain(), [d.x0, d.x1]),\n                                yd = d3.interpolate(y.domain(), [d.y0, 1]),\n                                yr = d3.interpolate(y.range(), [d.y0 ? 20 : 0, radius]);\n                            return function(t) {\n                                x.domain(xd(t));\n                                y.domain(yd(t)).range(yr(t));\n                            };\n                        })\n                        .selectAll(\"path\")\n                        .attrTween(\"d\", function(d) {\n                            return function() {\n                                return arc(d);\n                            };\n                        });\n                };\n\n                var drawSunburst = function(data, g) {\n\n                    var partition = d3.partition();\n                    var root = d3.hierarchy(data);\n                    root.sum(function(d) {\n                        return d.size;\n                    });\n\n                    var decendants = partition(root).descendants()\n                    var path = g.selectAll(\"path\").data(decendants)\n                        .enter().append(\"g\");\n\n                    path.append(\"path\")\n                        .attr(\"d\", arc)\n                        .style(\"fill\", function(d) {\n                            return color((d.children ? d : d.parent).data.name);\n                        })\n                        .style(\"stroke\", \"#FFF\")\n                        .style(\"stroke-width\", \"2\")\n                        .on(\"click\", click)\n                        .on(\"mouseover\", mouseover)\n                        .on(\"mouseout\", mouseout)\n                };\n\n                var draw = function(vm) {\n                    data = vm.patient;\n                    var layout = osApi.getLayout();\n                    var height = $window.innerHeight - 180;\n                    var width = ($window.innerWidth - layout.left - layout.right);\n                    radius = (Math.min((width * .5), height - 200) / 2) - 10;\n                    x = d3.scaleLinear().range([0, 2 * Math.PI]);\n                    y = d3.scaleSqrt().range([0, radius]);\n                    arc = d3.arc()\n                        .startAngle(function(d) {\n                            return Math.max(0, Math.min(2 * Math.PI, x(d.x0)));\n                        })\n                        .endAngle(function(d) {\n                            return Math.max(0, Math.min(2 * Math.PI, x(d.x1)));\n                        })\n                        .innerRadius(function(d) {\n                            return Math.max(0, y(d.y0));\n                        })\n                        .outerRadius(function(d) {\n                            return Math.max(0, y(d.y1));\n                        });\n\n                    svg.attr(\"width\", width).attr(\"height\", height);\n                    labelNormal.attr(\"transform\", \"translate(\" + (radius + 10) + \",\" + 20 + \")\");\n                    labelTumor.attr(\"transform\", \"translate(\" + (width - radius - 10) + \",\" + 20 + \")\");\n\n                    sunburstNormal.attr(\"transform\", \"translate(\" + (radius + 10) + \",\" + (radius) + \")\");\n                    sunburstTumor.attr(\"transform\", \"translate(\" + (width - radius - 10) + \",\" + (radius) + \")\");\n\n                    drawSunburst(data.tumor, sunburstTumor, x, y);\n                    drawSunburst(data.normal, sunburstNormal, x, y);\n                };\n\n                return {\n                    init: init,\n                    draw: draw\n                };\n            })();\n\n            // Bars\n            var bars = (function() {\n\n                // Elements\n                var svg;\n                var charts;\n                var layout, transformedData;\n                var vm;\n\n                var init = function(chart, viewModel) {\n                    svg = chart;\n                    charts = svg.append(\"g\");\n                    vm = viewModel;\n                };\n\n                var getLayoutMetrics = function(data) {\n                    var layout = osApi.getLayout();\n                    var widthTotal = ($window.innerWidth - layout.left - layout.right) - 40;\n                    var widthChart = Math.floor(widthTotal / data.length);\n                    var heightChart = 200; // Constant\n                    var yChart = (Math.min((($window.innerWidth - layout.left - layout.right) * .5), ($window.innerHeight - 50) - 200)) - 10;\n                    var xChart = 20;\n                    return {\n                        layout: layout,\n                        widthTotal: widthTotal,\n                        widthChart: widthChart,\n                        heightChart: heightChart,\n                        yChart: yChart,\n                        xChart: xChart,\n                        numCharts: data.length\n                    };\n                };\n\n                var getTransformedData = function(data, colorMap) {\n\n                    // Cartesian Product\n                    function cartesianProductOf() {\n                        return _.reduce(arguments, function(a, b) {\n                            return _.flatten(_.map(a, function(x) {\n                                return _.map(b, function(y) {\n                                    return x.concat([y]);\n                                });\n                            }), true);\n                        }, [\n                            []\n                        ]);\n                    }\n\n                    // Transform Data To Be Both Tree + List (Bar) Oriented\n                    return data.map(function(chart) {\n\n\n                        // Get Cartesian Product Of All Tags From Selected Groups \n                        var bars = cartesianProductOf.apply(this, chart.groups\n                                .filter(function(c) {\n                                    return c.show\n                                })\n                                .map(function(c) {\n                                    return c.tags.map(function(v) { return v.name; });\n                                }))\n                            .map(function(v) {\n                                return {\n                                    value: 0,\n                                    tags: v\n                                }\n                            });\n\n                        // Sort Data On All Tags\n                        bars.sort(function(a, b) {\n                            for (var i = a.tags.length - 1; i >= 0; i--) {\n                                if (a.tags[i] > b.tags[i]) return 1;\n                                if (a.tags[i] < b.tags[i]) return -1;\n                            }\n                            return 0;\n                        });\n\n                        // Calculate Bar Values\n                        //var values = chart.values;\n                        bars.forEach(function(bar) {\n                            chart.values.forEach(function(value) {\n                                if (_.difference(bar.tags, value.tags).length == 0) bar.value += value.data;\n                            });\n                        });\n\n                        // Convert Array Into A Tree Structure\n                        var tree = bars.reduce(function(p, c) {\n                            var barNode = p;\n                            c.tags.reverse().forEach(function(tag) {\n                                var tagIndex = barNode.children.map(function(v) {\n                                    return v.name;\n                                }).indexOf(tag.name);\n                                if (tagIndex == -1) {\n                                    barNode.children.push({\n                                        name: tag,\n                                        children: [],\n                                        value: 1,\n                                        color: colorMap[tag]\n                                    });\n                                    barNode = barNode.children[barNode.children.length - 1];\n                                } else {\n                                    barNode = barNode.children[tagIndex];\n                                    barNode.value += 1;\n                                }\n                            });\n                            c.tags.reverse();\n                            return p;\n                        }, {\n                            name: chart.name,\n                            children: [],\n                            value: bars.length,\n                            color: '#DDD'\n                        });\n\n                        // Return Tree\n                        return {\n                            bars: bars,\n                            tree: tree\n                        };\n\n                    });\n                };\n\n                var drawTree = function(el) {\n\n                    // Chart G Element\n                    var chartLayer = d3.select(this);\n\n                    // Chart Background\n                    chartLayer.append(\"rect\")\n                        .style(\"fill\", \"#EEE\")\n                        .attr(\"width\", layout.widthChart - 5)\n                        .attr(\"height\", layout.heightChart);\n\n                    // Chart Label\n                    chartLayer.append(\"text\").text(el.tree.name)\n                        .attr(\"y\", 20)\n                        .attr(\"x\", Math.round((layout.widthChart - 5) / 2))\n                        .attr(\"text-anchor\", \"middle\");\n\n                    // Draw Bars\n                    var bars = chartLayer.selectAll(\".cat-bar\").data(el.bars);\n                    var yMax = _.max(el.bars, function(bar) {\n                        return bar.value;\n                    }).value;\n                    var yMin = _.min(el.bars, function(bar) {\n                        return bar.value;\n                    }).value;\n                    var yScale = d3.scaleLinear();\n                    yScale.range([0, 110]);\n                    yScale.domain([yMin, yMax]);\n                    var barWidth = layout.widthChart / el.bars.length;\n\n                    bars.enter()\n                        .append(\"rect\")\n                        .attr(\"x\", function(d, i) {\n                            return barWidth * i\n                        })\n                        .attr(\"y\", function(d) {\n                            return 140 - yScale(d.value)\n                        })\n                        .attr(\"width\", barWidth)\n                        .attr(\"height\", function(d) {\n                            return yScale(d.value);\n                        })\n                        .attr(\"fill\", function(d) {\n                            return (d.tags[0].name == \"Normal\") ? \"#1476b6\" : \"#adc7ea\";\n                        });\n\n                    // Create Partition Tree Legend \n                    var tree = d3.hierarchy(el.tree, function(d) {\n                        return d.children;\n                    });\n\n                    var chartHeight = (1 / tree.height + 1) * 60;\n\n                    var partition = d3.partition()\n                        .size([layout.widthChart - 5, chartHeight]);\n\n                    var nodes = partition(tree).descendants();\n\n                    var node = chartLayer.selectAll(\".cat-node\")\n                        .data(nodes);\n\n                    node.enter()\n                        .append(\"rect\")\n                        .attr(\"class\", \"cat-node\")\n                        .attr(\"x\", function(d) {\n                            return d.x0;\n                        })\n                        .attr(\"y\", function(d) {\n                            return (200 - chartHeight) - (d.y0 - chartHeight);\n                        })\n                        .attr(\"width\", function(d) {\n                            return d.x1 - d.x0;\n                        })\n                        .attr(\"height\", function(d) {\n                            return d.y1 - d.y0;\n                        })\n                        .attr(\"fill\", function(d) {\n                            return d.data.color;\n                        })\n                        .style(\"visibility\", function(d) {\n                            return d.data.name == 'chart' ? \"hidden\" : \"visible\";\n                        });\n\n                }\n\n                var draw = function(data, colorMap) {\n\n                    vm.charts = data = vm.patient.barcharts;\n                    layout = getLayoutMetrics(data);\n\n                    transformedData = getTransformedData(data, colorMap);\n\n                    // Chart Spaces\n                    var chart = charts.selectAll(\".sunburst-barchart\").data(transformedData);\n                    chart.enter()\n                        .append(\"g\")\n                        .attr(\"class\", \"sun-chart-g\")\n                        .attr(\"transform\", function(d, i) {\n                            return \"translate(\" + ((i * layout.widthChart) + layout.xChart) + \",\" + ($window.innerHeight - 380) + \")\";\n                        });\n                    charts.selectAll(\".sun-chart-g\")\n                        .each(drawTree);\n                };\n                return {\n                    init: init,\n                    draw: draw\n                };\n            })();\n\n            var svg = d3.select(\"#sunburst-chart\").append(\"svg\");\n            sunburst.init(svg);\n            bars.init(svg, vm);\n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osSpreadsheet', spreadsheet);\n\n    /** @ngInject */\n    function spreadsheet() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/spreadsheet/spreadsheet.html',\n            controller: SpreadsheetController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function SpreadsheetController(osApi, $state, $timeout, $scope, moment, $stateParams, _, $, $q, $window, uiGridConstants, saveAs) {\n\n            // Loading ...\n            osApi.setBusy(true);\n\n            var selectHandler;\n\n            // View Model\n            var vm = this;\n            vm.showPanelColumns = false;\n            vm.closePanelColumns = function() {\n                vm.showPanelColumns = false;\n                vm.gridApi.grid.refresh();\n            };\n\n            vm.setSize = function() {\n                var elGrid = angular.element(\"#spreadsheet-grid\")[0];\n                var osLayout = osApi.getLayout();\n                var ml = osLayout.left - 1;\n                var mr = osLayout.right - 1;\n                if (ml === -1) ml = 19;\n                if (mr === -1) mr = 19;\n                elGrid.style[\"margin-left\"] = ml + \"px\";\n                elGrid.style[\"margin-right\"] = mr + \"px\";\n                elGrid.style.width = ($window.innerWidth - ml - mr - 2) + \"px\";\n                elGrid.style.height = ($window.innerHeight - 140) + \"px\";\n                vm.gridApi.core.handleWindowResize();\n            };\n            vm.collections = Object.keys(osApi.getDataSource().clinical)\n                .map(function(key) {\n                    var v = this.data[key];\n                    return {\n                        name: key,\n                        collection: v\n                    };\n                }, {\n                    data: osApi.getDataSource().clinical\n                }).filter(function(o) {\n                    return (o.name != \"events\" && o.name != \"samplemap\");\n                });\n            vm.collection = vm.collections.reduce(function(p, c) {\n                if (c.name == \"patient\") p = c;\n                return p;\n            }, vm.collections[0]);\n            vm.options = {\n                treeRowHeaderAlwaysVisible: false,\n                enableSelectionBatchEvent: false,\n                enableGridMenu: false,\n                enableSelectAll: true,\n                onRegisterApi: function(gridApi) {\n                    vm.gridApi = gridApi;\n                    selectHandler = gridApi.selection.on.rowSelectionChanged($scope, _.debounce(rowSelectionChange, 300));\n                }\n            };\n            vm.exportCsv = function(type) {\n                var cols = vm.options.columnDefs.filter(function(c) { return c.visible; }).map(function(v) { return v.field; });\n                var data = \"\\\"\" + cols.join(\"\\\",\\\"\") + \"\\\"\\n\";\n\n                var records = (type == \"selected\") ? vm.gridApi.grid.api.selection.getSelectedRows() : vm.options.data;\n\n                records\n                    .forEach(function(v) {\n                        var datum = cols.map(function(v) {\n                            return this[v];\n                        }, v);\n                        data += \"\\\"\" + datum.join(\"\\\",\\\"\") + \"\\\"\\n\";\n                    });\n\n                var blob = new Blob([data], { type: 'text/csv;charset=windows-1252;' });\n                saveAs(blob, 'oncoscape.csv');\n\n            };\n            vm.showColumns = function() {\n                vm.options.columnDefs.forEach(function(v) { v.visible = true; });\n                vm.gridApi.grid.refresh();\n            };\n            vm.hideColumns = function() {\n                vm.options.columnDefs.forEach(function(v) { v.visible = false; });\n                vm.gridApi.grid.refresh();\n            };\n\n            var sortSelectedFn = function(a, b, rowA, rowB) {\n                if (!rowA.hasOwnProperty(\"isSelected\")) rowA.isSelected = false;\n                if (!rowB.hasOwnProperty(\"isSelected\")) rowB.isSelected = false;\n                if (rowA.isSelected === rowB.isSelected) return 0;\n                if (rowA.isSelected) return -1;\n                return 1;\n            };\n\n            vm.sortSelected = function() {\n                var col = vm.gridApi.grid.columns[0];\n                col.sortingAlgorithm = sortSelectedFn;\n                vm.gridApi.grid.sortColumn(col, \"asc\", false);\n                vm.gridApi.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                vm.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);\n            };\n\n            var selectedIds = [];\n\n\n            var supressEvents = false;\n\n            var rowSelectionChange = function() {\n\n                if (supressEvents) return;\n                selectedIds = vm.gridApi.grid.api.selection.getSelectedRows().map(function(v) { return v.patient_ID; });\n\n\n                osApi.onCohortChange.remove(onCohortChange);\n                if (selectedIds.length == vm.options.data.length || selectedIds.length == 0) {\n                    osApi.setCohort([], osApi.ALL, osApi.PATIENT);\n                } else {\n                    osApi.setCohort(_.unique(selectedIds), \"Spreadsheet\", osApi.PATIENT);\n                }\n                osApi.onCohortChange.add(onCohortChange);\n            };\n\n            // Initialize\n            vm.datasource = osApi.getDataSource();\n\n            // App Event :: Resize\n            osApi.onResize.add(vm.setSize);\n\n            // App Event :: Cohort Change\n            var onCohortChange = function(cohort) {\n                selectHandler();\n\n\n                vm.gridApi.grid.api.selection.clearSelectedRows();\n                selectedIds = cohort.patientIds;\n                var selected = vm.options.data.filter(function(v) {\n                    return selectedIds.indexOf(v.patient_ID) != -1;\n                });\n                selected.forEach(function(i) { vm.gridApi.grid.api.selection.selectRow(i); });\n                selectHandler = vm.gridApi.selection.on.rowSelectionChanged($scope, _.debounce(rowSelectionChange, 300));\n\n\n            };\n            osApi.onCohortChange.add(onCohortChange);\n\n            // Setup Watches\n            $scope.$watch(\"vm.collection\", function() {\n                osApi.setBusy(true);\n                osApi.query(vm.collection.collection)\n                    .then(function(response) {\n                        angular.element(\".ui-grid-icon-menu\").text(\"Columns\");\n                        var cols = Object.keys(response.data[0])\n                            .map(function(col) {\n                                return { field: col, name: col.replace(/_/gi, ' '), width: 250, visible: true };\n                            });\n                        vm.options.columnDefs = cols;\n                        vm.options.data = response.data.map(function(v) {\n                            v.color = \"#F0DDC0\";\n                            v.selected = false;\n                            return v;\n                        });\n                        $timeout(function() {\n                            onCohortChange(osApi.getCohort());\n                        }, 1);\n                        vm.setSize();\n                        osApi.setBusy(false);\n                    });\n            });\n\n\n            // Destroy\n            $scope.$on('$destroy', function() {\n                osApi.onResize.remove(vm.setSize);\n                osApi.onCohortChange.remove(onCohortChange);\n            });\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osPlsr', explore);\n\n    // Add Line of Origin\n    // Recalculate On select\n    // Filters\n\n    /** @ngInject */\n    function explore() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/plsr/plsr.html',\n            controller: PlsrController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function PlsrController(osApi, $http, $window, $scope, $q, d3, $timeout, _) {\n\n\n            // Elements\n            var elDiv = angular.element(\"#plsr-chart\");\n            var elChart = d3.select(\"#plsr-chart\").append(\"svg\");\n            var elGroup = elChart.append(\"g\");\n            var elCircles;\n            var elLines;\n            var elTip = d3.tip().attr(\"class\", \"tip\").offset([-8, 0]).html(function(d) { return d.id; });\n            elChart.call(elTip);\n\n            // vm\n            var vm = this;\n            vm.genesets = [];\n            vm.datasource = osApi.getDataSource();\n            vm.collection = vm.datasource.molecular[0];\n            vm.dd = {\n                bound: { min: 0, max: 100 },\n                value: { min: 0, max: 100 }\n            };\n            vm.dx = {\n                bound: { min: 0, max: 100 },\n                value: { min: 0, max: 100 }\n            };\n            // vm.geneset\n\n\n            // State\n            var data;\n            var patients;\n            var xScale = new d3.scaleLinear().nice();\n            var yScale = new d3.scaleLinear().nice();\n\n            // Lasso\n            var lasso;\n            var lasso_start = function() {\n                lasso.items()\n                    .attr(\"r\", 3.5) // reset size\n                    .classed(\"not_possible\", true)\n                    .classed(\"selected\", false);\n            };\n            var lasso_draw = function() {\n                lasso.possibleItems()\n                    .classed(\"not_possible\", false)\n                    .classed(\"possible\", true);\n                lasso.notPossibleItems()\n                    .classed(\"not_possible\", true)\n                    .classed(\"possible\", false);\n            };\n\n            var lasso_end = function() {\n\n                lasso.items()\n                    .classed(\"not_possible\", false)\n                    .classed(\"possible\", false);\n                var ids = lasso.selectedItems().data().map(function(d) {\n                    return d.id;\n                });\n\n                var selectedGenes = lasso.selectedItems().data().map(function(v) { return v.id; });\n                if (selectedGenes.length < 2) {\n                    if (vm.geneset.name != 'Custom') {\n                        alert(\"Please select more than 1 gene\");\n                        return;\n                    } else {\n                        $timeout(function() {\n                            vm.geneset = prevGeneset;\n                        });\n                        return;\n                    }\n                }\n                $timeout(function() {\n                    if (vm.geneset.name != 'Custom') {\n                        prevGeneset = vm.geneset;\n                    }\n\n                    vm.geneset = { name: 'Custom', genes: selectedGenes };\n                });\n            };\n            var prevGeneset;\n\n            lasso = d3.lasso()\n                .closePathSelect(true)\n                .closePathDistance(100)\n                .targetArea(elChart)\n                .on(\"start\", lasso_start)\n                .on(\"draw\", lasso_draw)\n                .on(\"end\", lasso_end);\n\n            // Api\n            function setData(value) {\n\n                if (data === null) return;\n                data = value;\n\n                data.vectors = data.vectors.map(function(v) { return [{ id: v.id, value: [0, 0] }, v]; });\n\n                var range = data.points.reduce(function(p, c) {\n                    var x = c.value[0];\n                    var y = c.value[1];\n                    if (x > p.xMax) p.xMax = x;\n                    if (x < p.xMin) p.xMin = x;\n                    if (y > p.yMax) p.yMax = y;\n                    if (y < p.yMin) p.yMin = y;\n                    return p;\n                }, { xMin: Infinity, xMax: -Infinity, yMin: Infinity, yMax: -Infinity });\n                xScale.domain([range.xMin, range.xMax]);\n                yScale.domain([range.yMin, range.yMax]);\n                draw();\n            }\n\n            function resize() {\n                var layout = osApi.getLayout();\n                var width = $window.innerWidth - layout.left - layout.right;\n                var height = $window.innerHeight - 120; //10\n                elDiv.css({\n                    \"width\": width + \"px\",\n                    \"padding-left\": layout.left + \"px\"\n                });\n                elChart.attr(\"width\", width).attr(\"height\", height);\n                elGroup.attr(\"width\", width).attr(\"height\", height);\n                xScale.range([50, width - 50]);\n                yScale.range([50, height - 50]);\n                draw();\n            }\n\n            // Render\n            function draw() {\n                if (angular.isUndefined(data)) return;\n                elCircles = elGroup.selectAll(\"circle\").data(data.points);\n                elCircles.enter().append(\"circle\")\n                    .attr(\"class\", \"plsr-node\")\n                    .attr(\"cx\", function(d) {\n                        return xScale(d.value[0]);\n                    })\n                    .attr(\"cy\", function(d) {\n                        return yScale(d.value[1]);\n                    })\n                    .attr(\"r\", 4)\n                    .on(\"mouseover\", elTip.show)\n                    .on(\"mouseout\", elTip.hide);\n                elCircles.exit()\n                    .transition()\n                    .duration(200)\n                    .delay(function(d, i) {\n                        return i / 300 * 100;\n                    })\n                    .style(\"fill-opacity\", \"0\")\n                    .remove();\n                elCircles\n                    .transition()\n                    .duration(750)\n                    .delay(function(d, i) {\n                        return i / 300 * 100;\n                    })\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", function(d) {\n                        return xScale(d.value[0]);\n                    })\n                    .attr(\"cy\", function(d) {\n                        return yScale(d.value[1]);\n                    });\n                // .style(\"fill\", function(d) {\n                //     return d.color;\n                // })\n                //.style(\"fill-opacity\", 0.8);\n\n\n                var line = d3.line()\n                    .x(function(d) { return xScale(d.value[0]); })\n                    .y(function(d) { return yScale(d.value[1]); });\n\n                elLines = elGroup.selectAll(\".plsr-line\").data(data.vectors);\n\n                elLines.enter().append(\"path\")\n                    .attr(\"class\", \"plsr-line\")\n                    .attr(\"d\", line)\n                    .style(\"stroke\", function(d) {\n                        return (d[0].id == \"age_at_diagnosis\") ? \"#FF9800\" : \"#38347b\";\n                    });\n                elLines.exit().remove();\n                elLines\n                    .transition()\n                    .duration(750)\n                    .attr(\"d\", line);\n\n                lasso.items(elGroup.selectAll(\".plsr-node\"));\n                elChart.call(lasso);\n                osApi.setBusy(false);\n            }\n\n\n\n            // Move To Service \n            function query(dataset, genes, samples, features, molecular_collection, clinical_collection, n_components) {\n   \n                \n                var data = { dataset: dataset, genes: genes, samples: samples, features: features, molecular_collection: molecular_collection, clinical_collection: clinical_collection, n_components: n_components };\n\n                return $http({\n                    method: 'POST',\n                    url: \"https://dev.oncoscape.sttrcancer.io/cpu/plsr\",\n                    data: data\n                    \n                });\n                \n\n            }\n\n            // Load Data\n            $q.all([\n                osApi.query('lookup_genesets'),\n                osApi.query(osApi.getDataSource().clinical.patient, {\n                    $fields: ['patient_ID', 'gender', 'race', 'age_at_diagnosis', 'days_to_death', 'status_vital']\n                })\n            ]).then(function(responses) {\n                patients = responses[1].data;\n\n                var minMax = patients.reduce(function(p, c) {\n                    if (c.age_at_diagnosis !== null) {\n                        if (p.dx.max < c.age_at_diagnosis) p.dx.max = c.age_at_diagnosis;\n                        if (p.dx.min > c.age_at_diagnosis) p.dx.min = c.age_at_diagnosis;\n                    }\n                    if (c.days_to_death !== null) {\n                        if (p.dd.max < c.days_to_death) p.dd.max = c.days_to_death;\n                        if (p.dd.min > c.days_to_death) p.dd.min = c.days_to_death;\n                    }\n                    return p;\n                }, {\n                    dd: { min: Infinity, max: -Infinity },\n                    dx: { min: Infinity, max: -Infinity }\n                });\n                vm.dd.bound = minMax.dd;\n                vm.dd.value = _.clone(minMax.dd);\n                vm.dx.bound = minMax.dx;\n                vm.dx.value = _.clone(minMax.dx);\n\n                vm.genesets = responses[0].data;\n                vm.geneset = vm.genesets[6];\n\n\n            });\n\n\n            // Watches\n            vm.filterChange = function() {\n                var patientIds = patients.filter(function(patient) {\n                    return (patient.age_at_diagnosis >= vm.dx.value.min && patient.age_at_diagnosis <= vm.dx.value.max && patient.days_to_death >= vm.dd.value.min && patient.days_to_death <= vm.dd.value.max);\n                }).map(function(patient) {\n                    return patient.patient_ID;\n                });\n                if (patientIds.length == 0) {\n                    alert(\"Filter Does Not Contain Any Patients\");\n                    return;\n                }\n                osApi.setBusy(true);\n                osApi.setCohort(patientIds, \"PCA\", osApi.PATIENT);\n            };\n            var onGeneset = $scope.$watch(\"vm.geneset\", function() {\n                if (angular.isUndefined(vm.geneset)) return;\n                osApi.setBusy(true);\n                loadData();\n\n            });\n\n            function loadData() {\n\n                var samples = osApi.getCohort().sampleIds;\n                if (samples.length === 0) samples = Object.keys(osApi.getData().sampleMap);\n\n                query(vm.datasource.dataset, vm.geneset.genes, samples, [\"age_at_diagnosis\", \"days_to_death\"],\n                    vm.collection.collection,//\"tcga_gbmlgg_exp_hiseqv2_ucsc-xena\",\n                    osApi.getDataSource().clinical.patient,\n                    2\n                ).then(function(response) {\n                    data = response.data;\n                    setData({ vectors: data[\"y.loadings\"], points: data[\"x.loadings\"] });\n                    osApi.setBusy(false);\n                });\n            }\n\n            osApi.onResize.add(resize);\n            osApi.onCohortChange.add(loadData);\n            resize();\n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osPca', explore);\n\n    /** @ngInject */\n    function explore() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/pca/pca.html',\n            controller: PcaController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function PcaController($q, osApi, $state, $stateParams, $timeout, $scope, d3, moment, $window,$http,  _, ML, $) {\n\n            // helper functions -> move to service?\n            var findIndicesOfMax = function(inp, count) {\n                var outp = [];\n                for (var i = 0; i < inp.length; i++) {\n                    outp.push(i); // add index to output array\n                    if (outp.length > count) {\n                        outp.sort(function(a, b) { return inp[b] - inp[a]; }); // descending sort the output array\n                        outp.pop(); // remove the last index (index of smallest element in output array)\n                    }\n                }\n                return outp;\n            }\n            function calculatMetrics(){\n\n                // 1. Number, Density, and Separation of Clusters\n                //  - k-nearest neighbors\n                // data\n\n                // 2. association with clinical features\n\n                // 3. Confidence in positioning of new sample\n\n            }\n            var transpose = function( a){\n                return Object.keys(a[0]).map(function(c) {\n                    return a.map(function(r) { return r[c]; });\n                });\n            }\n\n            // Loading ...\n            osApi.setBusy(true);\n\n            var runType = \"JS\"\n\n            // Elements\n            var d3Chart = d3.select(\"#pca-chart\").append(\"svg\");\n            var d3Points = d3Chart.append(\"g\");\n            var d3xAxis = d3Chart.append(\"g\");\n            var d3yAxis = d3Chart.append(\"g\");\n            var circles;\n\n            // Properties\n            var scaleX, scaleY, axisX, axisY;\n            var data, minMax;\n            var width, height;\n            var colors = {\n                data: [],\n                name: \"Dataset\"\n            };\n            var acceptableDatatypes = [\"expr\", \"cnv\", \"mut01\", \"meth_thd\", \"meth\", \"cnv_thd\"];\n            var availableBaseMethods = [\"PCA\"]\n            var availableOverlayMethods = [\"Centroid\"]\n            var NA_runs = []\n            \n\n            // View Model Update\n            var vm = (function(vm, osApi) {\n                \n                vm.temp = {\n                    title: \"\",\n                    method: availableBaseMethods[0],\n                    source: osApi.getDataSource(),\n                    data: {types:[],selected:{i:-1, name:\"\"}},\n                    params: {bool: {\n                        geneset: {use: true, name:\"\"},\n                        cohort: {use: false, name:\"\"} }},\n                    meta: {numGenes:0, numSamples:0},\n                    result : {input:{}, output: {}},\n                    edit: false\n                }\n                vm.overlay = [ ]\n                \n                vm.selectColor = function(e) {\n                    var ids = e.values;\n                    var allIds = [];\n                    d3.selectAll(\"circle.pca-node\").each(function(d) {\n                        if (ids.indexOf(d.id) != -1) {\n                            d3.select(this).classed(\"pca-node-selected\", true);\n                            allIds.push(d.id);\n                        } else {\n                            if (d3.select(this).classed(\"pca-node-selected\")) allIds.push(d.id);\n                        }\n                    });\n                    osApi.setCohort(allIds, \"PCA\", osApi.SAMPLE);\n                };\n                vm.deselectColor = function(e) {\n                    var ids = e.values;\n                    var allIds = [];\n                    d3.selectAll(\"circle.pca-node\").each(function(d) {\n                        if (ids.indexOf(d.id) != -1) {\n                            d3.select(this).classed(\"pca-node-selected\", false);\n                        } else {\n                            if (d3.select(this).classed(\"pca-node-selected\")) allIds.push(d.id);\n                        }\n                    });\n                    osApi.setCohort(allIds, \"PCA\", osApi.SAMPLE);\n                };\n                vm.hideModal = function() {\n                    angular.element('#modalRun').modal('hide');\n                    angular.element('#modal_NArun').modal('hide');\n                    angular.element('#modal_intersection').modal('hide');\n                };\n                vm.copyBase = function(){\n                    vm.base.edit = !vm.base.edit\n\n                    if(vm.base.edit){\n                      vm.temp = {\n                          title: vm.base.title,\n                          method: vm.base.method,  \n                          result : {input : {}},\n                          meta :{},\n                          color : vm.base.color,\n                          visibility: \"visible\"\n                      }\n                      vm.temp.source = {dataset: vm.base.source.dataset}\n                      vm.temp.data = {  types:vm.base.data.types,\n                                        selected:{\n                                            i: vm.base.data.selected.i,\n                                            name:vm.base.data.selected.name}}\n                      vm.temp.params = {bool: {\n                        geneset: {use: true, name:osApi.getGeneset().name},\n                        cohort: {use: false, name:osApi.getCohort().name} }}\n                      \n                        updateOptions()\n                    }\n                    \n                }\n                vm.setBase = function(){\n                    vm.base = _.clone(vm.temp)\n                    vm.base.edit = false\n                    vm.temp = null\n                }\n                vm.updateBaseview = function(){\n                    if(vm.base.edit){\n                        vm.callBaseMethod();\n                        vm.overlay.forEach(function(d){\n                            osApi.setBusy(true)\n                            d.result.output = {}\n                            d.edit = true\n                            //vm.callOverlayMethod(d)\n                            //draw()\n                        })\n                    }\n                    else{\n                        vm.base.visibility = vm.base.visibility == \"visible\" ? \"hidden\" : \"visible\"\n                        draw()\n                    }\n\n                }\n                vm.callBaseMethod = function(){\n                    \n                    osApi.setBusy(true)\n                    vm.temp.data.selected.i = _.findIndex(vm.temp.data.types, {\"name\": vm.temp.data.selected.name})\n                    \n                    vm.temp.meta.numSamples = vm.temp.data.types[vm.temp.data.selected.i].s.length\n                    vm.temp.meta.numGenes = vm.temp.data.types[vm.temp.data.selected.i].m.length;\n                    \n                    // determine calculation size for gene x samples matrix \n                    // depending on use of geneset or cohort settings\n                    if(vm.temp.params.bool.geneset.use){\n                        var geneset = osApi.getGeneset()\n                        if(geneset.geneIds.length != 0)\n                            vm.temp.meta.numGenes = geneset.geneIds.length\n                    }\n                    if(vm.temp.params.bool.cohort.use){\n                        var samples = osApi.getCohort().sampleIds;\n                        if(samples.length != 0){\n                            vm.temp.meta.numSamples = samples.length\n                            // TO DO: intersect with samples from mtx to ensure sufficient overlap & size\n                        }\n                    }\n    \n                    if(vm.temp.method == \"PCA\")\n                        callPCA()\n                }\n\n\n                vm.copyItem = function(item){\n                    \n                    var usedColors = _.uniq(_.pluck(vm.overlay, \"color\"))\n                    var availColors = [ \"#E91E63\", \"#673AB7\", \"#4CAF50\", \"#CDDC39\", \"#FFC107\", \"#FF5722\", \"#795548\", \"#607D8B\", \"#03A9F4\", \"#03A9F4\",\n                                        '#004358', '#800080', '#BEDB39', '#FD7400', '#1F8A70', '#B71C1C', '#880E4F', '#4A148C', '#311B92', '#0D47A1', \n                                        '#006064', '#1B5E20'].filter(function(v) { return (usedColors.indexOf(v) == -1); });\n\n                    // edit/create item in history \n                    if(typeof item == \"undefined\"){\n                       item =  {\n                            title: \"\",\n                            method: availableOverlayMethods[0],\n                            source: osApi.getDataSource(),\n                            data: { types:vm.base.data.types,\n                                    selected: {i:vm.base.data.selected.i, name:vm.base.data.selected.name}\n                                    },\n                            params: {bool: { \n                                \"geneset\" : {name: vm.base.params.bool.geneset.name, use: vm.base.params.bool.geneset.use},\n                                \"cohort\"  : {name: vm.base.params.bool.cohort.name, use: vm.base.params.bool.cohort.use} }             \n                            },\n                            meta: {numGenes:0, numSamples:0},\n                            result : {input:{}, output: {}},\n                            edit: false,\n                            idx: vm.overlay.length,\n                            color: availColors[0],\n                            visibility: \"visible\"\n                        }\n                        item.title = item.method + \"  (\" + moment().format('hh:mm:ss') + \")\";\n                        \n                        vm.overlay.push(item)\n                    }\n                    item.edit = !item.edit\n\n                    // prep for running new overlay\n                    if(item.edit){\n                      vm.temp = {\n                          title: item.title,\n                          method: item.method,  \n                          result : {input : {}},\n                          meta :{},\n                          idx: item.idx,\n                          color: item.color,\n                          visibility: \"visible\"\n                      }\n                      \n                      vm.temp.source = {dataset: item.source.dataset}\n                      vm.temp.data = {  types:item.data.types,\n                                        selected:{\n                                            i: item.data.selected.i,\n                                            name:item.data.selected.name}}\n                      \n                      vm.temp.params = {bool: {\n                        geneset: {use: true, name:osApi.getGeneset().name},\n                        cohort: {use: false, name:osApi.getCohort().name} }}\n                      \n                    } else{\n                        //check if item was run\n                        if(angular.isUndefined(item.result.output.length))\n                            // item was not run, remove from processed history\n                            vm.overlay.splice(item.idx, 1)\n                    }\n                    \n                }\n                vm.updateItemview = function(item){\n                    \n                     if(item.edit){\n                        osApi.setBusy(true);\n                         vm.callOverlayMethod(item);\n                     }\n                    else{\n                        item.visibility = item.visibility == \"visible\" ? \"hidden\" : \"visible\"\n                        draw()\n                    }\n                }\n\n                vm.callOverlayMethod = function(item){\n                    item.data.selected.i = _.findIndex(item.data.types, {\"name\": item.data.selected.name})\n                    osApi.setBusy(true)\n                    callOverlay(item.idx);\n                }\n                \n\n\n                vm.exportJSON = function(){\n                    // download.file(toJSON(data), file= \"pca_result.json\")\n                }\n\n                return vm;\n            })(this, osApi);\n\n            // Update Geneset When Datasource Changes\n            osApi.onGenesetChange.add(function() {\n                if(vm.base.edit)\n                    vm.temp.params.bool.geneset.name = osApi.getGeneset().name;\n            });\n\n            // Service\n            function PCAquery(dataset, genes, samples, molecular_collection, n_components) {\n                var payload = { dataset: dataset, genes: genes, samples: samples, molecular_collection: molecular_collection, n_components: n_components };\n                return $http({\n                    method: 'POST',\n                 //   url: \"https://dev.oncoscape.sttrcancer.io/cpu/pca\",\n                 url: \"https://oncoscape-test.fhcrc.org/cpu/pca\",\n                    data: payload\n                });\n            }\n            function Distancequery(collection1, collection2, geneIds) {\n                var payload = { molecular_collection: collection1,molecular_collection2: collection2, genes:geneIds};\n                return $http({\n                    method: 'POST',\n                 //   url: \"https://dev.oncoscape.sttrcancer.io/cpu/distance\",\n                 url: \"https://oncoscape-test.fhcrc.org/cpu/distance\",\n                // url: \"https://localhost:8000/cpu/distance\",\n                    data: payload\n\n\n                });\n            }\n\n            // Setup Watches\n           \n\n            // Setup Parameter Configurations\n            var updateOptions = function(){\n                \n                var samples = []\n                if(vm.temp.params.bool.cohort.use)\n                    samples = osApi.getCohort().sampleIds\n                if(samples.length ==0) samples = \"None\"\n\n                // determine geneset accessibility for given pcaType\n                osApi.getGenesets().filter(function(gs) {return gs.show}).forEach(function(gs){ \n                    var payload = {\n                        dataset:vm.temp.source.dataset,\n                        collection:vm.temp.data.types[vm.temp.data.selected.i].collection, \n                        geneset:gs.name, \n                        samples: samples }\n                    \n                    var na_run = _.where(NA_runs,payload).length > 0 // true if run parameters gives NA result\n                    \n                    // reactivate disabled genesets not registered as unable to run for given collection name,sample,geneset\n                    // or disable active genesets known to not to give result\n                    if((gs.disable &  !na_run) | (!gs.disable & na_run)) \n                        osApi.toggleGenesetDisable(gs)\n                })\n\n            }; \n            \n            var callPCA = function(){\n\n                vm.error = \"\"\n\n                var geneset =  vm.temp.params.bool.geneset.use ? osApi.getGeneset() : osApi.getGenesetAll();\n\n                //Check if in Mongo\n                osApi.query(vm.temp.source.dataset +\"_cluster\", \n                    {   geneset: geneset.name, \n                        disease: vm.temp.source.dataset, \n                        dataType: \"PCA\", \n                        input:vm.temp.data.selected.name,\n                        scores:{$size:vm.temp.meta.numSamples}}\n                ).then(function(response){\n                    var d = response.data\n                    if(d.length >0){\n                        \n                        console.log(\"PCA: retreived from Mongo \" + Date())\n                        \n                        var score_samples = _.pluck(d[0].scores, \"id\")\n                        d[0].scores = d[0].scores.map(function(x){ return x.d})\n                        processPCA(d[0], geneset.geneIds, score_samples);\n                        draw();\n                        return\n                    }\n                    if (runType == \"JS\" & vm.temp.meta.numSamples  * vm.temp.meta.numGenes > 500000) {\n                        \n                        runType = \"python\"\n\n                        angular.element('#modalRun').modal();\n                        return;\n                    }\n                    if(runType == \"simulate\"){\n                        var numGenes = [100,200,500,1000, 5000, 10000,15000, 20000, 25000]; var numSamples = [100,200,500];\n                        for(var i=0;i<numSamples.length;i++){\n                            for(var j=0;j<numGenes.length;j++){\n                                console.log(\"Genes: \"+ numGenes[j] + \" Samples: \"+ numSamples[i])\n                                runPCAsimulation(numGenes[j], numSamples[i]);\n                            }\n                        }\n\n                    }else if(runType == \"JS\") {\n                        osApi.query(vm.temp.data.types[vm.temp.data.selected.i].collection\n                        ).then(function(response){\n                            vm.temp.result.input = response.data\n                            runPCA();\n                        });\n                    }else if(runType == \"python\") {\n                        \n                        var geneSetIds = geneset.geneIds\n                        var samples = [];\n                        if(vm.temp.params.bool.cohort.use)\n                            samples = osApi.getCohort().sampleIds;\n\n                        osApi.setBusy(true)\n                        PCAquery(vm.temp.source.dataset, geneSetIds, samples, vm.temp.data.types[vm.temp.data.selected.i].collection, 3).then(function(PCAresponse) {\n\n                            var d = PCAresponse.data;\n                            if(angular.isDefined(d.reason)){\n                                console.log(geneset.name +\": \" + d.reason)\n                                // PCA could not be calculated on geneset given current settings\n                                vm.error = d.reason;\n                                \n                                // return to previous state\n                                \n                                //add to blacklist to disable from future selection/calculation\n                                osApi.toggleGenesetDisable(geneset);\n                                if(samples.length ==0) samples = \"None\"\n                                NA_runs.push({\"dataset\":vm.temp.source.dataset, \"collection\":vm.temp.data.types[vm.temp.data.selected.i].collection, \"geneset\": geneset.name, \"samples\":samples})\n\n                                // revert/update display\n                                //if previous state not defined\n                                    //load geneset anyways - nothing to fall back on\n                                    //display null page\n                                //else\n                                    //rollback to previous definition\n                                    angular.element('#modal_NArun').modal();\n                                    //osApi.setGeneset(vm.geneSet)\n                                //}\n\n                                angular.element('#modalRun').modal('hide');\n                                osApi.setBusy(false)\n                                return;\n                            }\n\n\n                            // Successful run: \n                            //---update temp method\n                            //vm.geneSet = geneset\n                            runType = \"JS\"\n\n                            //---update plot\n                            geneSetIds = _.pluck(d.loadings,\"id\")\n                            samples = _.pluck(d.scores,\"id\")\n                            d.scores  = d.scores.map(function(result){ return result.d});\n                            angular.element('#modalRun').modal('hide');\n                            processPCA(d, geneSetIds, samples);\n                            draw();\n                        });\n                    }\n                })\n\n            }\n\n            var runPCAsimulation = function(numGenes, numSamples) {\n\n                var options = {isCovarianceMatrix: false, center : true, scale: false};\n                // create 2d array of samples x features (genes)\n                var molecular = Array.apply(null, {length: numSamples}).map(function(){ return Array.apply(null, {length: numGenes}).map(Function.call, Math.random)});\n\n                var then = Date.now();\n                //console.log(\"PCA: Running \" + Date())\n                var d = new ML.Stat.PCA(molecular, options)\n                var now = Date.now()\n                //console.log(\"PCA: transforming scores \" + Date())\n                console.log(\"Genes: \"+ numGenes + \" Samples: \"+numSamples+ \"Diff: \" + (now-then)/1000)\n\n            }\n\n            var runPCA = function() {\n\n                osApi.setBusy(true)\n                var options = {isCovarianceMatrix: false, center : true, scale: false};\n\n                // Subset samples to those available in the collection\n                var samples = []; \n                var sampleIdx = _.range(0,vm.temp.result.input[0].s.length)\n                \n                if(vm.temp.params.bool.cohort.use)\n                    samples = osApi.getCohort().sampleIds;\n                \n                if(samples.length ==0){\n                    samples = vm.temp.result.input[0].s\n                } else{ \n                    sampleIdx = vm.temp.result.input[0].s.map(function(s, i){\n                        var matchS = _.contains(samples, s) ? i : -1\n                        return matchS})\n                }\n                \n\n                var geneIds = _.pluck(vm.temp.result.input,\"m\")\n                if(vm.temp.params.bool.geneset.use && osApi.getGeneset().geneIds.length >0)\n                    geneIds = _.intersection( osApi.getGeneset().geneIds, geneIds);\n                    //subset geneIds to be only those returned from query\n                \n                if(geneIds.length != 0){\n                    vm.temp.result.input = vm.temp.result.input.filter(function(g){return _.contains(geneIds,g.m)})\n                }\n                \n                // create 2d array of samples x features (genes)\n                var molecular = vm.temp.result.input.map(function(s){return  s.d.filter(function(r, i){return _.contains(sampleIdx, i)})})\n                \n                // remove any genes that have NA values\n                molecular = molecular.filter(function(v){return _.intersection(v, [NaN,\"NaN\"]).length == 0 })\n                \n                molecular = transpose(molecular)\n                \n                console.log(\"PCA: Running \" + Date())\n                //NOTE: If there are null values in molecular, PCA runs in an infinite loop!\n                var d = new ML.Stat.PCA(molecular, options)\n                console.log(\"PCA: transforming scores \" + Date())\n                d.metadata = {}\n                d.metadata.variance = d.getExplainedVariance()\n                d.loadings = d.getLoadings() // [[PC1 loadings (for coefficients for each gene)], [PC2 loadings], [...#PC = # samples]]\n                d.scores = d.predict(molecular)\n                \n                processPCA(d, geneIds, samples);\n                draw();\n\n            }\n            var processPCA = function(d, geneIds, samples){\n                \n                    console.log(\"PCA: processing results \" + Date())\n    \n                    vm.setBase()\n\n                    // Process PCA Variance\n                    vm.base.meta.pc1 = [\n                        { name: 'PC1', value: (d.metadata.variance[0] * 100).toFixed(2) },\n                        { name: '', value: 100 - (d.metadata.variance[0]*100) }\n                    ];\n                    vm.base.meta.pc2 = [\n                        { name: 'PC2', value: (d.metadata.variance[1] *100).toFixed(2) },\n                        { name: '', value: 100 - (d.metadata.variance[1] *100) }\n                    ];\n    \n                    // Process Scores\n                    d.scores = d.scores.map(function(v,i) {\n                        v.id = samples[i];\n                        v.layer = -1\n                        return v;\n                    });\n                    vm.base.result.output = d.scores\n    \n                    \n            };\n\n            var editOverlayMethod = function(){\n                \n                if (angular.isUndefined(vm.overlaySource)) {\n                    vm.overlaySource = vm.sources[0];\n                } else {\n                    var newSource = vm.sources.filter(function(v) { return (v === vm.overlaySource); });\n                    vm.overlaySource = (newSource.length === 1) ? newSource[0] : vm.sources[0];\n                }\n\n            \n                    if(typeof vm.overlaySource == \"object\")\n                    vm.overlaySource = vm.overlaySource.name\n\n                    vm.overlayType = null\n                var response = osApi.getDataSources()\n                \n                    vm.overlay_molecularTables = response.collections.filter(function(d){ return _.contains(acceptableDatatypes, d.type)})\n                    vm.overlayTypes = _.pluck(vm.overlay_molecularTables, \"name\")\n\n                    if (angular.isUndefined(vm.overlayType)) {\n                        vm.overlayType = vm.overlayTypes[0];\n                    } else {\n                        var newSource = vm.overlayTypes.filter(function(v) { return (v === vm.overlayType); });\n                        vm.overlayType = (newSource.length === 1) ? newSource[0] : vm.overlayTypes[0];\n                    }\n            \n                var molecular_matches = vm.overlay_molecularTables.filter(function(d){return d.name == vm.overlayType })\n                if(molecular_matches.length ==1){\n                    vm.overlay = molecular_matches[0]  \n                }\n\n                var samples = \"None\";\n                if(vm.temp.params.bool.cohort.use)\n                    samples = osApi.getCohort().sampleIds;\n                \n            }\n\n            var callOverlay = function(i){\n                \n                vm.error = \"\"\n\n                var common_m = _.intersection(vm.overlay[i].data.types[vm.overlay[i].data.selected.i].m, vm.base.data.types[vm.base.data.selected.i].m)\n                if(vm.base.params.bool.geneset.use){\n                    var gIds = osApi.getGenesets().filter(function(g){return g.name == vm.base.params.bool.geneset.name})[0].geneIds\n                    if(gIds.length >0 )\n                        common_m = _.intersection(common_m, gIds)\n                }\n                    \n                if(common_m.length == 0){\n                    angular.element('#modal_intersection').modal();\n                    vm.overlay[i].result.output = {}\n                    osApi.setBusy(false)\n                    return;\n                }\n\n                runOverlay(i);\n            };\n            var runOverlay = function(i){\n                \n                var geneset = vm.base.params.bool.geneset\n                var gIds = []\n                if(geneset.use)\n                    gIds = osApi.getGenesets().filter(function(g){return g.name == geneset.name})[0].geneIds\n                \n                osApi.setBusy(true)\n                Distancequery(vm.base.data.types[vm.base.data.selected.i].collection, vm.overlay[i].data.types[vm.overlay[i].data.selected.i].collection, gIds).then(function(response) {\n\n                    var d = response.data;\n                    if(angular.isDefined(d.reason)){\n                        console.log(vm.base.data.types[vm.base.data.selected.i].collection +\"+ \"+vm.overlay[i].data.types[vm.overlay[i].data.selected.i].collection+\": \" + d.reason)\n                        // Distance could not be calculated on geneset given current settings\n                            window.alert(\"Sorry, Distance could not be calculated\\n\" + d.reason)\n\n                        vm.overlay[i].result.output = {}\n                        angular.element('#modalRun').modal('hide');\n                        osApi.setBusy(false)\n                        return;\n                    }\n\n                    //distances = _.pluck(d.D,\"id\")\n                    angular.element('#modalRun').modal('hide');\n                    var newData = calculateCentroid(d);\n                    \n                    \n                    newData = newData.map(function(d){                  \n                        d.layer= i\n                        return d\n                    })\n\n                    //set overlay\n                    vm.overlay[i].result.input = d.D\n                    vm.overlay[i].result.output = newData\n                    vm.overlay[i].edit = false\n\n                    draw()\n                    // update plot with new points\n                });\n            }\n            \n            var calculateCentroid = function(dist){\n                //data= {id: overlay sample , d: [distance values], m:[mol_df ids]}\n                \n                // for each new overlay id, get ids for closest 3\n                var num_compare = 3\n                \n    \n                 var top3 = dist.D.map(function(s){ \n                    var indices = findIndicesOfMax(s.d, 3);\n                    var match_ids = indices.map(function(i){return s.m[i]})\n                    return {id:s.id, match: match_ids}\n                //    return {\"id\":s.id, \"match\": s.m[]\n                //         s.d.sort().slice((-1*num_compare),)\n                //             .map(function(maxMatch){return s.m[_.indexOf(s.d,maxMatch)]} )}\n                })\n                \n                \n                // find positions in current plot & calculate centroid\n                var scores = top3.map(function(s){ \n                    var match_scores = vm.base.result.output.filter(function(p){ return _.contains(s.match,p.id)})\n                    var cent_scores = [0,0,0]\n                    for(var i=0;i<match_scores.length;i++){\n                        cent_scores[0] += match_scores[i][0]\n                        cent_scores[1] += match_scores[i][1]\n                        cent_scores[2] += match_scores[i][2]\n                    }\n                    var d = cent_scores.map(function(x){ return x/num_compare})\n                    d.id = s.id;\n                    \n                    return d\n                })\n\n                //osApi.setCohort(_.pluck(scores, \"id\"), \"centroid\", \"SAMPLE\")\n                return scores;\n\n            }\n\n            var draw = function() {\n\n                data = vm.base.result.output\n                for(var i =0; i<vm.overlay.length; i++){\n                    if(angular.isDefined(vm.overlay[i].result.output.length))\n                        data = data.concat(vm.overlay[i].result.output)\n                }\n\n                // Colorize\n                setColors();\n\n                // Size\n                var layout = osApi.getLayout();\n                width = $window.innerWidth - layout.left - layout.right;\n                height = $window.innerHeight - 120; //10\n                angular.element(\"#pca-chart\").css({\n                    \"width\": width + \"px\",\n                    \"padding-left\": layout.left + \"px\"\n                });\n\n                d3Chart.attr(\"width\", width).attr(\"height\", height);\n                d3Points.attr(\"width\", width).attr(\"height\", height);\n\n                // Scale\n                minMax = data.reduce(function(p, c) {\n                    p.xMin = Math.min(p.xMin, c[0]);\n                    p.xMax = Math.max(p.xMax, c[0]);\n                    p.yMin = Math.min(p.yMin, c[1]);\n                    p.yMax = Math.max(p.yMax, c[1]);\n                    return p;\n                }, {\n                    xMin: Infinity,\n                    yMin: Infinity,\n                    xMax: -Infinity,\n                    yMax: -Infinity\n                });\n\n                scaleX = d3.scaleLinear().domain([minMax.xMin, minMax.xMax]).range([50, width - 50]).nice();\n                scaleY = d3.scaleLinear().domain([minMax.yMin, minMax.yMax]).range([50, height - 50]).nice();\n\n                // Draw\n                circles = d3Points.selectAll(\"circle\").data(data);\n                circles.enter().append(\"circle\")\n                    .attr(\"class\", \"pca-node\")\n                    .attr(\"cx\", function(d) {\n                        return scaleX(d[0]);\n                    })\n                    .attr(\"cy\", function(d) {\n                        return scaleY(d[1]);\n                    })\n                    .attr(\"r\", 3)\n                    .style(\"fill\", function(d) {\n                        return d.color;\n                    })\n                    .style(\"visibility\", function(d){ return d.visibility});\n\n                circles.exit()\n                    .transition()\n                    .duration(200)\n                    .delay(function(d, i) {\n                        return i / 300 * 100;\n                    })\n                    .style(\"fill-opacity\", \"0\")\n                    .remove();\n                circles\n                    .style(\"fill\", function(d) {\n                        return d.color;\n                    })\n                    .transition()\n                    .duration(750)\n                    .delay(function(d, i) {\n                        return i / 300 * 100;\n                    })\n                    .attr(\"r\", 3)\n                    .attr(\"cx\", function(d) {\n                        return scaleX(d[0]);\n                    })\n                    .attr(\"cy\", function(d) {\n                        return scaleY(d[1]);\n                    })\n                    .style(\"fill\", function(d) {\n                        return d.color;\n                    })\n                    .style(\"fill-opacity\", 0.8)\n                    .style(\"visibility\", function(d){ return d.visibility});\n\n                // Axis\n                axisX = d3.axisTop().scale(scaleX).ticks(3);\n                axisY = d3.axisLeft().scale(scaleY).ticks(3);\n\n                d3xAxis\n                    .attr(\"class\", \"axis\")\n                    .attr(\"transform\", \"translate(0, \" + height * 0.5 + \")\")\n                    .call(axisX)\n                    .append(\"text\")\n                    .attr(\"x\", 50)\n                    .attr(\"y\", 15)\n                    .text(\"PC1\");\n\n                d3yAxis\n                    .attr(\"class\", \"axis\")\n                    .attr(\"transform\", \"translate(\" + width * 0.5 + \", 0)\")\n                    .call(axisY)\n                    .append(\"text\")\n                    .attr(\"y\", 55)\n                    .attr(\"x\", 25)\n                    .text(\"PC2\");\n\n                lasso.items(d3Points.selectAll(\"circle\"));\n                d3Chart.call(lasso);\n                \n                setSelected();\n                osApi.setBusy(false);\n\n            }\n                \n            \n            // Utility Functions\n            var updatePatientCounts = function() {\n\n                angular.element(\".legend-count\").text(\"\");\n                var selectedPatients = osApi.getCohort().sampleIds;\n\n                if (selectedPatients.length === 0)\n                   selectedPatients = data.map(function(d){\n                    return d.id})\n\n                var counts = data.filter(function(d){return selectedPatients.indexOf(d.id) !== -1}).reduce(function(p, c) {\n                    var color = c.color;\n                    if (!p.hasOwnProperty(color)) p[color] = 0;\n                    p[color] += 1;\n                    return p;\n                }, {});\n\n                Object.keys(counts).forEach(function(key) {\n                    angular.element(\"#legend-\" + key.substr(1)).text(\" (\" + this[key] + \")\");\n                }, counts);\n\n            };\n            function setSelected() {\n                var selectedIds = osApi.getCohort().sampleIds\n                \n                if(typeof selectedIds != \"undefined\"){\n                   d3Points.selectAll(\"circle\").classed(\"pca-node-selected\", function() {\n                        return (selectedIds.indexOf(this.__data__.id) >= 0);\n                    });\n                }\n\n            }\n            function setColors() {\n\n                // Set Legend\n                vm.legendCaption = colors.name;\n                vm.legendNodes = colors.data;\n\n                // If No Color Specified\n                if (colors.name == \"Dataset\") {\n                    vm.legendNodes = [\n                    {name: vm.base.title, color: vm.base.color, values: vm.base.result.output.map(function(d){ return d.id }), id: \"legend-\"+vm.base.color.substr(1)}   ]\n                    vm.legendNodes = vm.legendNodes.concat(\n                        vm.overlay.map(function(r) {\n                            return angular.isUndefined(r.result.output.length) ?\n                                null\n                             :  {name: r.title, color: r.color, values: r.result.output.map(function(d){ return d.id }), id: \"legend-\"+r.color.substr(1)}}) \n                            .filter(function(r){return r != null})\n                        )\n                   \n                    data.forEach(function(v) {\n                            if(v.layer == -1){ v.color = vm.base.color }\n                            else { v.color = vm.overlay[v.layer].color} })\n\n                // Color Based On selected input\n                } else {\n                    var degMap = colors.data.reduce(function(p, c) {\n                        for (var i = 0; i < c.values.length; i++) {\n                            p[c.values[i]] = c.color;\n                        }\n                        return p;\n                    }, {});\n                    data = data.map(function(v) {\n                        v.color = (angular.isDefined(this[v.id])) ? this[v.id] : \"#DDD\";\n                        return v;\n                    }, degMap);\n                }    \n            \n                data.forEach(function(v) {\n                    if(v.layer == -1){ v.visibility = vm.base.visibility }\n                    else { v.visibility = vm.overlay[v.layer].visibility}\n                });\n                $timeout(updatePatientCounts);\n\n            }\n            var lasso_start = function() {\n\n                lasso.items()\n                    .attr(\"r\", 3.5) // reset size\n                    .classed(\"not_possible\", true)\n                    .classed(\"selected\", false);\n            };\n            var lasso_draw = function() {\n\n\n                // Style the possible dots\n                lasso.possibleItems()\n                    .classed(\"not_possible\", false)\n                    .classed(\"possible\", true);\n\n                // Style the not possible dot\n                lasso.notPossibleItems()\n                    .classed(\"not_possible\", true)\n                    .classed(\"possible\", false);\n            };\n            var lasso_end = function() {\n\n                // Reset the color of all dots\n                lasso.items()\n                    .classed(\"not_possible\", false)\n                    .classed(\"possible\", false);\n\n                var ids = lasso.selectedItems().data().map(function(d) {\n                    return d.id;\n                });\n                osApi.setCohort(ids, \"PCA\", osApi.SAMPLE);\n\n            };\n\n            var lasso = d3.lasso()\n                .closePathSelect(true)\n                .closePathDistance(100)\n                .targetArea(d3Chart)\n                .on(\"start\", lasso_start)\n                .on(\"draw\", lasso_draw)\n                .on(\"end\", lasso_end);\n\n            \n            \n            // App Event :: Resize\n            osApi.onResize.add(draw);\n\n            // App Event :: Color change\n            var onPatientColorChange = function(value) {\n                colors = value;\n                vm.showPanelColor = false;\n                draw();\n            };\n            osApi.onPatientColorChange.add(onPatientColorChange);\n\n            // App Event :: Cohort Change\n            var onCohortChange = function(c) {\n                setSelected();\n            };\n            osApi.onCohortChange.add(onCohortChange);\n            osApi.onCohortChange.add(updatePatientCounts)\n\n\n            osApi.query(\"lookup_oncoscape_datasources_v2\", {\n                dataset: osApi.getDataSource().dataset\n            }).then(function(response){\n                vm.temp.method = \"PCA\"\n                vm.temp.title = vm.temp.method + \"  (\" + moment().format('hh:mm:ss') + \")\";\n                vm.temp.data.types = response.data[0].collections.filter(function(d){ return _.contains(acceptableDatatypes, d.type)})\n                vm.temp.data.selected.i = 0;\n                vm.temp.data.selected.name = vm.temp.data.types[vm.temp.data.selected.i].name;\n                vm.temp.params.bool = { \"geneset\" : {name: osApi.getGeneset().name, use: true},\n                                        \"cohort\"  : {name: osApi.getCohort().name, use: false } } \n                vm.temp.color = '#0096d5' \n                vm.temp.visibility = \"visible\"           \n                \n                vm.callBaseMethod();\n            });\n\n            // Destroy\n            $scope.$on('$destroy', function() {\n                osApi.onResize.remove(draw);\n                osApi.onPatientColorChange.remove(onPatientColorChange);\n                osApi.onCohortChange.remove(onCohortChange);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osPathways', pathways);\n\n    /** @ngInject */\n    function pathways() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/pathways/pathways.html',\n            controller: PathwaysController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function PathwaysController(osApi, $state, $stateParams, $scope, $sce, $window, moment, cytoscape) {\n\n            var markersNetwork;\n            var vm = this;\n\n            // Elements\n            var elChart = angular.element(\"#pathways-chart\");\n            var csChart;\n\n            vm.datasource = osApi.getDataSource();\n            vm.search = \"\";\n            vm.tip = null;\n            vm.linkTitle = \"\";\n            vm.links = [];\n\n            vm.resize = function() {\n                elChart.width('100%');\n                elChart.height($window.innerHeight - 90);\n                if (csChart) {\n                    csChart.resize();\n                    csChart.center();\n                }\n            };\n\n            $scope.$watch('vm.search', function() {\n                if (angular.isUndefined(csChart)) return;\n                var term = vm.search.toUpperCase();\n                var len = term.length;\n                csChart.startBatch();\n                csChart.nodes().map(function(ele) {\n                    if (len === 0) {\n                        ele.unselect();\n                    } else if (ele.attr(\"name\").substr(0, len) === term) {\n                        ele.select();\n                    } else {\n                        ele.unselect();\n                    }\n                });\n                csChart.endBatch();\n            });\n\n            // Load Datasets\n            osApi.setBusy(true);\n            osApi.query(\"render_pathways\").then(function(result) {\n                markersNetwork = result.data[0];\n\n                csChart = cytoscape({\n                        container: elChart,\n                        elements: markersNetwork.elements,\n                        style: getStyle(),\n                        minZoom: 0.1,\n                        maxZoom: 5,\n                        zoom: 0.2,\n                        wheelSensitivity: 0.5,\n                        layout: {\n                            name: \"preset\",\n                            fit: true\n                        }\n                    })\n                    .on('click', 'node', function(e) {\n                        if (e.cyTarget.data().nodeType != \"gene\") return;\n                        angular.element('#gbm-webpage').modal();\n                        $scope.$apply(function() {\n                            vm.frame = $sce.trustAsResourceUrl(\"https://www.genecards.org/cgi-bin/carddisp.pl?gene=\" + e.cyTarget.data().id);\n                        });\n                    })\n                    .on('click', 'edge', function(e) {\n\n                        // links =[\n                        //     { name: \"PubMed Article\", url:\"https://www.ncbi.nlm.nih.gov/pubmed/?term=\" + e.cyTarget.data().pmid },\n                        //     { name: \"PubMed Search\",  url:\"http://www.ncbi.nlm.nih.gov/pubmed/?term=(GENE \"+e.cyTarget.data().source+\") AND (GENE \"+e.cyTarget.data().target+\")\"}\n                        //     { name: e.cyTarget.data().source+\"Gene Card\", url: \"https://www.genecards.org/cgi-bin/carddisp.pl?gene=\"+e.cyTarget.data().source}\n                        //     { name: e.cyTarget.data().target+\"Gene Card\", url: \"https://www.genecards.org/cgi-bin/carddisp.pl?gene=\"+e.cyTarget.data().target}\n                        // ];\n                        // $window.open(\"https://www.ncbi.nlm.nih.gov/pubmed/?term=\" + e.cyTarget.data().pmid);\n                        // $window.open(\"http://www.ncbi.nlm.nih.gov/pubmed/?term=(GENE \"+e.cyTarget.data().source+\") AND (GENE \"+e.cyTarget.data().target+\")\");\n                        // $window.open(\"https://www.genecards.org/cgi-bin/carddisp.pl?gene=\"+e.cyTarget.data().source);\n                        // $window.open(\"https://www.genecards.org/cgi-bin/carddisp.pl?gene=\"+e.cyTarget.data().target);\n\n                        angular.element('#gbm-webpage').modal();\n                        $scope.$apply(function() {\n                            vm.frame = $sce.trustAsResourceUrl(\"https://www.ncbi.nlm.nih.gov/pubmed/?term=\" + e.cyTarget.data().pmid);\n                        });\n\n                    }).on('mouseover', 'edge', function(e) {\n                        $scope.$apply(function() {\n                            vm.tip = e.cyTarget.data().source + \" Extract\";\n                        });\n\n                        e.cyTarget.style({\n                            'width': '4px'\n                        });\n                    }).on('mouseout', 'edge', function(e) {\n                        $scope.$apply(function() {\n                            vm.tip = null;\n                        });\n                        e.cyTarget.style({\n                            'width': '2px'\n                        });\n                    }).on('mouseover', 'node', function(e) {\n                        $scope.$apply(function() {\n                            vm.tip = e.cyTarget.data().name + \" Gene Card\";\n                        });\n                    }).on('mouseout', 'node', function() {\n                        $scope.$apply(function() {\n                            vm.tip = null;\n                        });\n                    });\n\n                vm.resize();\n                osApi.setBusy(false);\n            });\n\n            function getStyle() {\n                var darkblue = 'rgb(5, 108, 225)';\n                var red = 'red'; //rgb(230, 44, 28)';\n                var purple = 'rgb(56, 52,123)';\n                var green = 'green'; //'rgb(56, 52,123)';//'rgb(28, 230,116)';//'green';\n                return [{\n                        'selector': 'node',\n                        'style': {\n                            'content': 'data(label)',\n                            'text-valign': 'center',\n                            'text-halign': 'center',\n                            'shape': 'ellipse',\n                            'width': '60px',\n                            'height': '50px',\n                            'color': darkblue,\n                            'background-color': 'rgb(250, 250, 250)',\n                            'border-width': '2px',\n                            'border-color': darkblue\n\n                        }\n                    }, {\n                        'selector': 'edge',\n                        'style': {\n                            'width': '2px',\n                            'line-color': darkblue,\n                            'line-style': 'solid'\n                        }\n                    },\n                    // Boxes\n                    {\n                        'selector': 'node[nodeType=\"class\"], node[nodeType=\"family\"], node[nodeType=\"complex\"]',\n                        'style': {\n                            'content': '',\n                            'background-color': 'white',\n                            'shape': 'roundrectangle'\n\n                        }\n                    },\n                    // Blue Activiates & Indirect Activates\n                    {\n                        'selector': 'edge[edgeType=\"activates\"], edge[edgeType=\"indirectly activates\"]',\n                        'style': {\n                            'line-color': green,\n                            'target-arrow-shape': 'triangle',\n                            'target-arrow-color': green\n                        }\n                    },\n                    // Inhibits & Ubiquitinylates\n                    {\n                        'selector': 'edge[edgeType=\"inhibits\"], edge[edgeType=\"ubiquitinylates\"]',\n                        'style': {\n                            'line-color': red,\n                            'target-arrow-shape': 'tee',\n                            'target-arrow-color': red\n                        }\n                    },\n                    // Fusion\n                    {\n                        'selector': 'edge[edgeType=\"fusion\"]',\n                        'style': {\n                            'line-color': green\n                        }\n                    },\n                    // Hide\n                    {\n                        'selector': 'edge[edgeType=\"contains\"]',\n                        'style': {\n                            'display': 'none'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"process\"]',\n                        'style': {}\n                    }, {\n                        'selector': 'node[nodeType=\"gene\"]:selected',\n                        'style': {\n                            'overlay-opacity': '0.5',\n                            'overlay-color': 'red'\n                        }\n                    },\n\n                    // Legacy ... Not sure if it's being used\n                    {\n                        'selector': 'node[nodeType=\"rtk\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'background-color': 'rgb(224, 209, 178)',\n                            'border-color': 'black',\n                            'border-width': '0px',\n                            'font-size': '48px',\n                            'shape': 'roundrectangle',\n                            'width': '40px',\n                            'height': '160px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"kinase\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'background-color': 'rgb(255, 206, 194)',\n                            'shape': 'ellipse',\n                            'width': '160px',\n                            'height': '120px',\n                            'font-size': '48px',\n                            'border-color': 'black',\n                            'border-width': '1px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"dimer\"]',\n                        'style': {\n                            'content': '',\n                            'background-color': 'rgb(234, 219, 188)',\n                            'shape': 'ellipse',\n                            'width': '160px',\n                            'height': '120px',\n                            'font-size': '48px',\n                            'border-color': 'black',\n                            'border-width': '0px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"loop\"]',\n                        'style': {\n                            'content': '',\n                            'background-color': 'rgb(255, 255, 255)',\n                            'shape': 'ellipse',\n                            'width': '160px',\n                            'height': '120px',\n                            'font-size': '48px',\n                            'border-color': 'black',\n                            'border-width': '1px',\n                            'border-style': 'dotted'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"gtpase\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'background-color': 'rgb(194, 194, 255)',\n                            'shape': 'ellipse',\n                            'width': '160px',\n                            'height': '120px',\n                            'font-size': '48px',\n                            'border-color': 'black',\n                            'border-width': '1px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"adaptor\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'background-color': 'rgb(77, 184, 255)',\n                            'shape': 'ellipse',\n                            'width': '60px',\n                            'height': '120px',\n                            'font-size': '48px',\n                            'border-color': 'black',\n                            'border-width': '1px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"GEF\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'background-color': 'rgb(77, 184, 255)',\n                            'shape': 'ellipse',\n                            'width': '60px',\n                            'height': '60px',\n                            'font-size': '48px',\n                            'border-color': 'black',\n                            'border-width': '1px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"process\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'background-color': 'rgb(255, 255, 255)',\n                            'shape': 'roundrectangle',\n                            'width': '100px',\n                            'height': '40px',\n                            'font-size': '24px',\n                            'border-color': 'black',\n                            'border-width': '0px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"TF\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'background-color': 'rgb(255, 206, 94)',\n                            'shape': 'diamond',\n                            'width': '160px',\n                            'height': '60px',\n                            'font-size': '48px',\n                            'border-color': 'black',\n                            'border-width': '1px'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"gene fusion\"]',\n                        'style': {\n                            'content': 'data(label)',\n                            'shape': 'roundrectangle',\n                            'font-size': '24px',\n                            'border-color': 'red',\n                            'border-width': '3px'\n                        }\n                    }, {\n                        'selector': 'edge:selected',\n                        'style': {\n                            'overlay-color': 'grey',\n                            'overlay-opacity': '0.3'\n                        }\n                    }, {\n                        'selector': 'edge[edgeType=\"recruits\"]',\n                        'style': {\n                            'width': '2px'\n                        }\n                    }, {\n                        'selector': 'edge[edgeType=\"fusion\"]',\n                        'style': {\n                            'line-color': purple\n                        }\n                    }, {\n                        'selector': 'edge[edgeType=\"recruits\"]',\n                        'style': {\n                            'line-color': 'red',\n                            'width': '1px',\n                            'line-style': 'dashed',\n                            'target-arrow-shape': 'triangle',\n                            'target-arrow-color': 'black'\n                        }\n                    }, {\n                        'selector': 'edge[edgeType=\"cycles\"]',\n                        'style': {\n                            'line-color': 'black',\n                            'width': '1px',\n                            'line-style': 'dashed',\n                            'target-arrow-shape': 'triangle',\n                            'source-arrow-shape': 'triangle',\n                            'target-arrow-color': 'green',\n                            'source-arrow-color': 'red'\n                        }\n                    }, {\n                        'selector': 'edge[edgeType=\"associates\"]',\n                        'style': {\n                            'line-color': 'black',\n                            'width': '1px',\n                            'line-style': 'solid'\n                        }\n                    }, {\n                        'selector': 'edge[edgeType=\"activation\"]',\n                        'style': {\n                            'line-color': 'green',\n                            'width': '1px'\n                        }\n                    }, {\n                        'selector': 'edge[edgeType=\"inhibition\"]',\n                        'style': {\n                            'line-color': 'red',\n                            'width': '1px'\n                        }\n                    }\n                ];\n            }\n\n            // Listen For Resize\n            osApi.onResize.add(vm.resize);\n\n        }\n    }\n})();\n(function() {\n  'use strict';\n\n  angular\n      .module('oncoscape')\n      .directive('osParallelcoord', parallelcoord);\n\n  /** @ngInject */\n  function parallelcoord() {\n\n    var directive = {\n        restrict: 'E',\n        templateUrl: 'app/components/parallelcoord/parallelcoord.html',\n        controller: ParallelcoordController,\n        controllerAs: 'vm',\n        bindToController: true\n    };\n\n    return directive;\n\n    /** @ngInject */\n    function ParallelcoordController(osApi, $state, $timeout, $window, d3) {\n\n      var vm = this;\n      osApi.setBusy(false)\n      vm.datasource = osApi.getDataSource();\n\n      vm.zoom = 1000000 // 1 MB\n      vm.gene = \"MYC\"\n      var samples = osApi.getCohort().sampleIds;\n      samples = [\"TCGA-OL-A66H-01\", \"TCGA-3C-AALK-01\", \"TCGA-AR-A1AH-01\", \"TCGA-AC-A5EH-01\", \"TCGA-EW-A2FW-01\"]\n\n      // Elements\n      var d3Chart = d3.select(\"#parallelcoord-chart\").append(\"svg\");\n      var genes;\n\n      // Properties\n      var scaleX, scaleY, axisX, axisY;\n      var data, minMax;\n      var width, height;\n\n      var draw = function(){ \n        \n        // Size\n        var layout = osApi.getLayout();\n        width = $window.innerWidth - layout.left - layout.right;\n        height = $window.innerHeight - 150; //10\n        angular.element(\"#parallelcoord-chart\").css({\n            \"width\": width + \"px\",\n            \"padding-left\": layout.left + \"px\"\n        });\n\n        d3Chart.attr(\"width\", width).attr(\"height\", height);\n        \n        // Scale\n        // scaleX = d3.scaleLinear().domain([minMax.xMin, minMax.xMax]).range([50, width - 50]).nice();\n        // scaleY = d3.scaleLinear().domain([minMax.yMin, minMax.yMax]).range([50, height - 50]).nice();\n\n \n        var x = d3.scalePoint().domain(vm.genes).range([75, width - 75]),\n            y = {};\n        \n        var line = d3.line(),\n            axis = d3.axisLeft(x),\n            foreground;\n  \n        // Create a scale and brush for each gene.\n        vm.genes.forEach(function(d) {\n          // Coerce values to numbers.\n          data.forEach(function(p) { p[d] = +p[d]; });\n      \n          y[d] = d3.scaleLinear()\n              .domain(d3.extent(data, function(p) { return p[d]; }))\n              .range([height, 0]);\n      \n          // y[d].brush = d3.svg.brush()\n          //     .y(y[d])\n          //     .on(\"brush\", brush);\n        });\n  \n        // Add a legend.\n        // var legend = d3Chart.selectAll(\"g.legend\")\n        //     .data(samples)\n        //   .enter().append(\"svg:g\")\n        //     .attr(\"class\", \"legend\")\n        //     .attr(\"transform\", function(d, i) { return \"translate(0,\" + (i * 20 + 584) + \")\"; });\n      \n        // legend.append(\"svg:line\")\n        //     .attr(\"class\", String)\n        //     .attr(\"x2\", 8);\n      \n        // legend.append(\"svg:text\")\n        //     .attr(\"x\", 12)\n        //     .attr(\"dy\", \".31em\")\n        //     .text(function(d) { return d; });\n      \n        // Add foreground lines.\n        foreground = d3Chart.append(\"g\")\n            .attr(\"class\", \"foreground\")\n          .selectAll(\"path\")\n            .data(data)\n          .enter().append(\"path\")\n            .attr(\"d\", path)\n            .attr(\"stroke\", \"#000\")\n            .attr(\"class\", function(d) { return \"cohort\"; });\n  \n        // Add a group element for each gene.\n        genes = d3Chart.selectAll(\".gene\")\n            .data(vm.genes)\n            \n        var g=  genes.enter().append(\"g\")\n            .attr(\"class\", \"gene\")\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d) + \")\"; })\n            // .call(d3.drag()\n            // .origin(function(d) { return {x: x(d)}; })\n            // .on(\"dragstart\", dragstart)\n            // .on(\"drag\", drag)\n            // .on(\"dragend\", dragend));\n        \n            genes.exit().remove()\n            \n            genes\n            .attr(\"class\", \"gene\")\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d) + \")\"; })\n        \n        // Add an axis and title.\n        g.append(\"g\")\n            .attr(\"class\", \"axis\")\n            .each(function(d) { d3.select(this).call(axis.scale(y[d])); })\n          .append(\"text\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"y\", -9)\n            .text(String);\n  \n        // Add a brush for each axis.\n        // g.append(\"g\")\n        //     .attr(\"class\", \"brush\")\n        //     .each(function(d) { d3.select(this).call(y[d].brush); })\n        //   .selectAll(\"rect\")\n        //     .attr(\"x\", -8)\n        //     .attr(\"width\", 16);\n  \n        // function dragstart(d) {\n        //   i = vm.genes.indexOf(d);\n        // }\n  \n        // function drag(d) {\n        //   x.range()[i] = d3.event.x;\n        //   vm.genes.sort(function(a, b) { return x(a) - x(b); });\n        //   g.attr(\"transform\", function(d) { return \"translate(\" + x(d) + \")\"; });\n        //   foreground.attr(\"d\", path);\n        // }\n  \n        // function dragend(d) {\n        //   x.domain(vm.genes).rangePoints([0, w]);\n        //   var t = d3.transition().duration(500);\n        //   t.selectAll(\".gene\").attr(\"transform\", function(d) { return \"translate(\" + x(d) + \")\"; });\n        //   t.selectAll(\".foreground path\").attr(\"d\", path);\n        // }\n\n        // Returns the path for a given data point.\n        function path(d) {\n          return line(vm.genes.map(function(p) { return [x(p), y[p](d[p])]; }));\n        }\n\n        // Handles a brush event, toggling the display of foreground lines.\n        function brush() {\n          var actives = vm.genes.filter(function(p) { return !y[p].brush.empty(); }),\n              extents = actives.map(function(p) { return y[p].brush.extent(); });\n          foreground.classed(\"fade\", function(d) {\n            return !actives.every(function(p, i) {\n              return extents[i][0] <= d[p] && d[p] <= extents[i][1];\n            });\n          });\n        }\n       \n        osApi.setBusy(false);\n      }\n    \n  \n      \n\n      vm.updateGene = function() {\n              var test = vm.gene\n              callGeneRegion()\n      };\n    \n      var callGeneRegion = function(){\n\n        osApi.query(\"lookup_hg19_genepos_minabsstart\", {m: vm.gene}).then(function(response){\n          var d = response.data\n          if(d.length >0){\n            vm.chr = d[0].chr\n            osApi.query(\"lookup_hg19_genepos_minabsstart\", {chr: vm.chr, pos: {$lt: d[0].pos + vm.zoom, $gt: d[0].pos - vm.zoom}}).then(function(resp){\n              vm.genes_in_region = resp.data\n              vm.genes =  _.pluck(vm.genes_in_region,\"m\" )\n              osApi.query(\"brca_gistic2_ucsc-xena\", {m: {$in:vm.genes}}).then(function(r){\n                var molecular = r.data\n                var sampleIdx = _.range(0,molecular[0].s.length)\n\n                if(samples.length !=0){ \n                    sampleIdx = molecular[0].s.map(function(s, i){\n                        var matchS = _.contains(samples, s) ? i : -1\n                        return matchS})\n                }else{\n                  samples = molecular[0].s\n                }\n                vm.genes =  _.pluck(molecular, \"m\")\n\n                var tbl = jStat.transpose(molecular.map(function(g){return  g.d.filter(function(r, i){return _.contains(sampleIdx, i)})}))\n                data = tbl.map(function(s, i){ var v =_.object( vm.genes,s); v[\"sample\"] = samples[i]; return v }) \n                \n                \n                draw();\n              });\n            });\n          }\n        });\n      }\n\n\n      // Setup Watches\n\n      // $scope.$watch('vm.gene', function() {\n        //runs with every keystroke\n      //     if (vm.gene === null) return;\n      //     callGeneRegion()\n\n      // });\n\n      // App Event :: Resize\n      osApi.onResize.add(draw);\n\n      callGeneRegion();\n        \n    }  //end Controller\n  }  //end parallelcoord() \n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .service('osSound', osSound);\n\n    /** @ngInject */\n    function osSound() {\n\n        var _beep = new Audio(\"data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");\n\n        function beep() {\n            _beep.play();\n        }\n\n        return {\n            beep: beep\n        }\n    }\n})();\n\n (function() {\n     'use strict';\n\n     angular\n         .module('oncoscape')\n         .factory('osHttp', oncoscape);\n\n     /** @ngInject */\n     function oncoscape($http) {\n         //window.collections = {};\n         var url = \"/api/\";\n         url = \"https://dev.oncoscape.sttrcancer.io/api/\";\n         //  url = \"https://oncoscape-test.fhcrc.org/api/\";\n\n         var queryString = function(req) {\n             //window.collections[req.table] = 1;\n             var query = url + req.table;\n             if (angular.isDefined(req.query)) query += \"/?q=\" + encodeURIComponent(angular.toJson(req.query));\n             // what if query size too large??\n             return query;\n         };\n         \n      //   var jwt = \"\"\n\n         var query = function(req) {\n             return $http({\n                 method: 'GET',\n                 url: queryString(req),\n                 headers: {\n                     apikey: 'password'\n                     //, authentication: jwt\n                 }\n             });\n         };\n\n         // Return Object\n         return {\n             queryString: queryString,\n             query: query\n         };\n     }\n })();\n\n(function() {\n    'use strict';\n    angular.module('oncoscape').directive('ngEnter', function() {\n        return function(scope, element, attrs) {\n            element.bind(\"keydown keypress\", function(event) {\n                if (event.which === 13) {\n                    scope.$apply(function() {\n                        scope.$eval(attrs.ngEnter);\n                    });\n\n                    event.preventDefault();\n                }\n            });\n        };\n    });\n    /*\n        angular\n            .module('oncoscape')\n            .provider({\n                $exceptionHandler:\n    */\n    /** @ngInject */\n    /*        \n            function exceptionFactory(){\n            \tvar handler = function (exception, cause){\n                    window.alert(\"Oh Snap!  An error occured.  View console for details\")\n                    console.log(exception);\n                    exception.stack();\n                    if (angular.isDefined(cause)) console.log(cause);\n            \t}\n                this.$get = function() { return handler; };\n            }\n           });\n    */\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .service('osAuth', osAuth);\n\n    /** @ngInject */\n    function osAuth(osHttp, $http, signals, $location, auth, osApi) {\n\n        // Events\n        var onLogin = new signals.Signal(); // Fired When Data Changes\n        var onLogout = new signals.Signal(); // Fired When Selection changes\n\n        // User Object\n        var _user = null;\n        var getUser = function() {\n            return _user;\n        };\n        var _datasets = null;\n        var getDatasets = function() {\n            return _datasets;\n        };\n        var setDatasets = function(datasets) {\n            _datasets = datasets;\n        };\n        var isAuthenticated = function() {\n            return _user != null;\n        };\n\n        // Authentication Sources\n        var authSource = null;\n        var authSources = [{\n            id: 'guest',\n            name: 'Guest',\n            icon: 'fa fa-user'\n        }, {\n            id: 'google',\n            name: 'Google',\n            icon: 'fa fa-google-plus',\n            // key: '428912153446-7c82srcvu1bk1nramiqqctne005epl6s.apps.googleusercontent.com',\n            //key: '1098022410981-p7n5ejjji8qlvdtff274pol54jo5i8ks.apps.googleusercontent.com',\n            key: '459144121975-lp2p5kahpqahm2gffgtl31vv0nes9hj4.apps.googleusercontent.com',\n            mode: 'implicit'\n        }, {\n            id: 'linkedin',\n            name: 'LinkedIn',\n            icon: 'fa fa-linkedin',\n            key: '7869gkuwwnacez',\n            mode: 'explicit'\n        }];\n\n        /*}, {\n            id: 'facebook',\n            name: 'Facebook',\n            icon: 'fa fa-facebook',\n            key: '142281766208909',\n            mode: 'implicit'\n        }, {\n            id: 'github',\n            name: 'GitHub',\n            icon: 'fa fa-github-alt',\n            key: '78b5dbe2ba756151169e',\n            mode: 'explicit'\n        },{\n            id: 'instagram',\n            name: 'Instagram',\n            icon: 'fa fa-instagram',\n            key: '3578c1b7c8c248c6ba80784b9ede0c52',\n            mode: 'implicit'\n        }, {\n            id: 'linkedin',\n            name: 'LinkedIn',\n            icon: 'fa fa-linkedin',\n            key: '7869gkuwwnacez',\n            mode: 'explicit'\n        }, {\n            id: 'twitter',\n            name: 'Twitter',\n            icon: 'fa fa-twitter',\n            key: 'vrbGiMB0LCtuHeShKE6v5IIFa',\n            mode: 'implicit'\n        }, {\n            id: 'windows',\n            name: 'Win Live',\n            icon: 'fa fa-windows',\n            key: 'caee23ac-d4aa-41c7-9bda-166b86c52de3',\n            mode: 'implicit'\n        }, {\n            id: 'dropbox',\n            name: 'Dropbox',\n            icon: 'fa fa-dropbox',\n            key: 'dropbox',\n            mode: 'implicit'\n        }, {\n            id: 'flickr',\n            name: 'Flickr',\n            icon: 'fa fa-flickr',\n            key: '',\n            mode: 'implicit'\n        }*/\n\n        var getAuthSources = function() {\n            return authSources;\n        };\n\n        var loginGuest = function() {\n            _user = {\n                network: 'guest',\n                id: 'x',\n                name: 'Guest',\n                thumb: 'Guest.png'\n            };\n            osApi.init().then(function() {\n                onLogin.dispatch();\n            });\n        }\n        var login = function(source) {\n            if (source.id == 'guest') {\n                _user = {\n                    network: 'guest',\n                    id: 'x',\n                    name: 'Guest',\n                    thumb: 'Guest.png'\n                };\n            \n                onLogin.dispatch();\n                \n                return;\n            }\n            auth().login(source.id, {\n                // response_type: 'code',\n                display: 'popup',\n                response_type: 'token',\n                scope: 'email',\n                force: true\n            });\n            onLogin.dispatch();\n        };\n\n        var logout = function() {\n            _user = null\n            _datasets = null;\n            auth().logout(authSource, {\n                force: false\n            }, onLogout.dispatch);\n        };\n\n        auth.init(\n            authSources.reduce(function(prev, curr) {\n                prev[curr.id] = curr.key;\n                return prev;\n            }, {}), {\n                oauth_proxy: '/api/auth',\n                redirect_uri:'/login'\n                // redirect_uri: 'https://dev.oncoscape.sttrcancer.io/'\n            }\n        );\n\n        auth.on('auth.login', function(e) {\n            osApi.setBusy();\n            authSource = e.network;\n            auth(authSource).api(\"/me\", \"get\", null, function(e) {\n                _user = {\n                    network: authSource,\n                    id: e.id,\n                    name: e.name,\n                    thumb: e.thumbnail,\n                    email: e.email\n                };\n                osApi.init().then(function() {    \n                    onLogin.dispatch(_user);\n                });\n            });\n        });\n\n        return {\n            isAuthenticated: isAuthenticated,\n            loginGuest: loginGuest,\n            getUser: getUser,\n            getAuthSources: getAuthSources,\n            setDatasets : setDatasets,\n            getDatasets : getDatasets,\n            login: login,\n            logout: logout,\n            onLogin: onLogin,\n            onLogout: onLogout\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .service('osApi', osApi);\n\n    /** @ngInject */\n    function osApi(osHttp, $http, signals, $location, $q, jStat, $, $window, _, moment) {\n\n        // Events\n        var onDataSource = new signals.Signal();\n        var onResize = new signals.Signal();\n        var onNavChange = new signals.Signal();\n        var onCohortToolInfo = new signals.Signal();\n        var onCohortChange = new signals.Signal();\n        var onCohortsChange = new signals.Signal();\n        var onGenesetToolInfo = new signals.Signal();\n        var onGenesetChange = new signals.Signal();\n        var onGenesetsChange = new signals.Signal();\n        var onPatientColorChange = new signals.Signal();\n        var onshowGenesetImportChange= new signals.Signal();\n\n        // Resize\n        angular.element($window).bind('resize', _.debounce(onResize.dispatch, 900));\n\n        // Layout Metrics\n        var getLayout = function() {\n            var rt = angular.element(\".tray-right\").attr(\"locked\");\n            if (angular.isUndefined(rt)) rt = \"true\";\n            return {\n                left: (angular.element('#collectionpanel-lock').attr(\"locked\") == \"true\") ? 300 : 0,\n                right: (rt === \"true\") ? 300 : 0\n            };\n        };\n        var setBusy = function(value) {\n            if (value) {\n                angular.element(\".loader-modal\").show();\n            } else {\n                angular.element(\".loader-modal\").hide();\n            }\n        };\n\n\n        // Factories\n        var statsFactory = (function(jStat) {\n\n            var km = (function(jStat) {\n\n                var pluck,\n                    uniq,\n                    sortBy,\n                    groupBy,\n                    last,\n                    find;\n\n                function multiply(a, b) {\n                    var r = jStat.multiply(a, b);\n                    return r.length ? r : [\n                        [r]\n                    ];\n                }\n\n                function transpose(a) {\n                    var r = jStat.transpose(a);\n                    return r[0].length ? r : [r];\n                }\n\n                function timeTable(tte, ev) {\n                    var exits = sortBy(tte.map(function(x, i) { return { tte: x, ev: ev[i] }; }), 'tte'), // sort and collate\n                        uexits = uniq(pluck(exits, 'tte'), true), // unique tte\n                        gexits = groupBy(exits, function(x) { return x.tte; }); // group by common time of exit\n                    return uexits.reduce(function(a, tte) { // compute d_i, n_i for times t_i (including censor times)\n                        var group = gexits[tte],\n                            l = last(a) || { n: exits.length, e: 0 },\n                            events = group.filter(function(x) { return x.ev; });\n\n                        a.push({\n                            n: l.n - l.e, // at risk\n                            e: group.length, // number exiting\n                            d: events.length, // number events (death)\n                            t: group[0].tte // time\n                        });\n                        return a;\n                    }, []);\n                }\n\n                function compute(tte, ev) {\n                    var dini = timeTable(tte, ev);\n                    return dini.reduce(function(a, dn) { // survival at each t_i (including censor times)\n                        var l = last(a) || { s: 1 };\n                        if (dn.d) { // there were events at this t_i\n                            a.push({ t: dn.t, e: true, s: l.s * (1 - dn.d / dn.n), n: dn.n, d: dn.d, rate: dn.d / dn.n });\n                        } else { // only censors\n                            a.push({ t: dn.t, e: false, s: l.s, n: dn.n, d: dn.d, rate: null });\n                        }\n                        return a;\n                    }, []);\n                }\n\n                function expectedObservedEventNumber(si, tte, ev) {\n                    var data = timeTable(tte, ev),\n                        expectedNumber,\n                        observedNumber,\n                        dataByTimeTable = [];\n\n                    si = si.filter(function(item) { return item.e; });\n\n                    expectedNumber = si.reduce(function(memo, item) {\n                        var pointerInData = find(data, function(x) { return (x.t >= item.t); });\n\n                        if (pointerInData) {\n                            var expected = pointerInData.n * item.rate;\n                            dataByTimeTable.push(pointerInData);\n                            return memo + expected;\n                        } else {\n                            return memo;\n                        }\n\n                    }, 0);\n\n                    observedNumber = ev.filter(function(x) { return x; }).length;\n\n                    return {\n                        expected: expectedNumber,\n                        observed: observedNumber,\n                        dataByTimeTable: dataByTimeTable,\n                        timeNumber: dataByTimeTable.length\n                    };\n                }\n\n                function covariance(allGroupsRes, OETable) {\n                    var vv = jStat.zeros(OETable.length),\n                        i, j, //groups\n                        t, //timeIndex\n                        N, //total number of samples\n                        Ki, Kj, // at risk number from each group\n                        n; //total observed\n\n                    for (i = 0; i < OETable.length; i++) {\n                        for (j = i; j < OETable.length; j++) {\n                            for (t = 0; t < allGroupsRes.length; t++) {\n                                N = allGroupsRes[t].n;\n                                n = allGroupsRes[t].d;\n                                if (t < OETable[i].timeNumber && t < OETable[j].timeNumber) {\n                                    Ki = OETable[i].dataByTimeTable[t].n;\n                                    Kj = OETable[j].dataByTimeTable[t].n;\n                                    // when N==1: only 1 subject, no variance\n                                    if (i !== j && N !== 1) {\n                                        vv[i][j] -= n * Ki * Kj * (N - n) / (N * N * (N - 1));\n                                        vv[j][i] = vv[i][j];\n                                    } else if (N !== 1) { // i==j\n                                        vv[i][i] += n * Ki * (N - Ki) * (N - n) / (N * N * (N - 1));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    return vv;\n                }\n\n                // This might be the mis-named.\n                function solve(a, b) {\n                    var bT = transpose(b),\n                        aInv = jStat.inv(a);\n                    return multiply(multiply(b, aInv), bT);\n                }\n\n                function allGroupsKm(groups) {\n                    var tte = [].concat.apply([], pluck(groups, 'tte')),\n                        ev = [].concat.apply([], pluck(groups, 'ev'));\n                    return compute(tte, ev).filter(function(t) { return t.e; });\n                }\n\n                // allGroupsRes: km of all groups combined?\n                // groupedDataTable: [{tte, ev}, ...]\n                function logranktest(groupedDataTable) {\n                    var allGroupsRes = allGroupsKm(groupedDataTable),\n                        pValue = 1,\n                        KMStats,\n                        dof, // degree of freedom\n                        OETable,\n                        OMinusEVector, // O-E\n                        vv; //covariant matrix\n\n                    // Table of observed and expected events, for each group.\n                    OETable = groupedDataTable\n                        .map(function(v) { return expectedObservedEventNumber(allGroupsRes, v.tte, v.ev); })\n                        .filter(function(r) { return r.expected; });\n\n                    // Find O-E and covariance, and drop one dimension from each\n                    OMinusEVector = OETable.map(function(r) { return r.observed - r.expected; }).slice(1);\n                    vv = covariance(allGroupsRes, OETable).slice(1).map(function(r) { return r.slice(1); }); // drop 1st row & 1st column\n\n                    dof = OETable.length - 1;\n\n                    if (dof > 0) {\n                        KMStats = solve(vv, [OMinusEVector])[0][0];\n                        pValue = 1 - jStat.chisquare.cdf(KMStats, dof);\n                    }\n\n                    return {\n                        dof: dof,\n                        KMStats: KMStats,\n                        pValue: pValue\n                    };\n                }\n\n                var exports = {\n                    init: function(obj) {\n                        pluck = obj.pluck;\n                        uniq = obj.uniq;\n                        sortBy = obj.sortBy;\n                        groupBy = obj.groupBy;\n                        last = obj.last;\n                        find = obj.find;\n                        return exports; // return the module for convenience of the caller\n                    },\n                    compute: compute,\n                    expectedObservedEventNumber: expectedObservedEventNumber,\n                    logranktest: logranktest\n                };\n                return exports;\n            })(jStat).init(_);\n\n            function getNumericStats(patients, attribute) {\n                var len = patients.length;\n                var bin =\n                    (len < 2) ? 1 :\n                    (len < 6) ? 2 :\n                    (len < 9) ? 3 :\n                    (len < 18) ? 6 :\n                    (len < 36) ? 8 :\n                    10;\n\n                var props = patients.map(function(pd) {\n                    return pd[attribute];\n                });\n\n                var data = {\n                    type: \"numeric\",\n                    min: jStat.min(props),\n                    max: jStat.max(props),\n                    range: jStat.range(props),\n                    sd: jStat.stdev(props),\n                    count: 0,\n                    hist: jStat.histogram(props, bin),\n                    histRange: [],\n                    bins: bin\n                };\n\n                data.histRange = [jStat.min(data.hist), jStat.max(data.hist)];\n                data.count = data.hist.reduce(function(p, c) { p += c; return p; }, 0);\n\n                bin = Math.round(data.range / bin);\n                data.hist = data.hist.map(function(pt) {\n                    var rv = {\n                        label: this.start + \"-\" + (this.start + this.bin),\n                        value: pt\n                    };\n                    this.start += this.bin;\n                    return rv;\n                }, {\n                    bin: bin,\n                    start: data.min\n                });\n                return data;\n            }\n\n            function getFactorStats(patients, attribute) {\n\n                var props = patients.map(function(pd) {\n                    return pd[attribute];\n                });\n                var factors = props\n                    .reduce(function(prev, curr) {\n                        prev[curr] = (prev.hasOwnProperty(curr)) ? prev[curr] + 1 : 1;\n                        return prev;\n                    }, {});\n\n                factors = Object.keys(factors).map(function(key) {\n                    return {\n                        label: key,\n                        value: this.factors[key]\n                    };\n                }, {\n                    factors: factors\n                });\n\n                var values = factors.map(function(v) {\n                    return v.value;\n                });\n                var data = {\n                    type: \"factor\",\n                    min: jStat.min(values),\n                    max: jStat.max(values),\n                    range: jStat.range(values),\n                    sd: jStat.stdev(values),\n                    count: 0,\n                    hist: factors,\n                    histRange: [],\n                    bins: factors.length\n                };\n                data.histRange = [data.min, data.max];\n                data.count = data.hist.reduce(function(p, c) { p += c.value; return p; }, 0);\n                return data;\n            }\n\n            var createHistogram = function(ids, data) {\n\n                // Transform Ids Into Clinical Records + Remove Nulls\n                var clinical = ids.map(function(v) {\n                    var patient = this[v];\n                    if (patient === null) return null;\n                    return patient.clinical;\n                }, data.patientMap).filter(function(v) { return v != null; })\n\n                return {\n                    total: Object.keys(data.patientMap).length,\n                    selected: clinical.length,\n                    features: [{\n                            label: \"Age At Diagnosis\",\n                            data: getNumericStats(clinical, \"age_at_diagnosis\"),\n                            prop: \"age_at_diagnosis\",\n                            type: \"numeric\"\n                        },\n                        //{label: \"Death\", data:getNumericStats(data,\"days_to_death\"), prop:\"days_to_death\" , type:\"numeric\"},\n                        {\n                            label: \"Gender\",\n                            data: getFactorStats(clinical, \"gender\"),\n                            prop: \"gender\",\n                            type: \"factor\"\n                        }, {\n                            label: \"Race\",\n                            data: getFactorStats(clinical, \"race\"),\n                            prop: \"race\",\n                            type: \"factor\"\n                        }, {\n                            label: \"Ethnicity\",\n                            data: getFactorStats(clinical, \"ethnicity\"),\n                            prop: \"ethnicity\",\n                            type: \"factor\"\n                        }, {\n                            label: \"Vital\",\n                            data: getFactorStats(clinical, \"status_vital\"),\n                            prop: \"status_vital\",\n                            type: \"factor\"\n                        }, {\n                            label: \"Disease Status\",\n                            data: getFactorStats(clinical, \"last_known_disease_status\"),\n                            prop: \"last_known_disease_status\",\n                            type: \"factor\"\n                        }\n                    ]\n                };\n            };\n\n            var createSurvival = function(ids, data, cohortAll) {\n\n                // Transform Ids Into Survival Records + Remove Nulls\n                var survival = ids.map(function(v) {\n                        var patient = this[v];\n                        if (patient === null) return null;\n                        return patient.survival;\n                    }, data.patientMap)\n                    .filter(function(v) { return angular.isDefined(v); });\n\n                if (survival.length == 0) return null;\n\n                /*\n                Transform Survival Records Into KM Data The Result Is A Value Object Containing The Following\n                t = time in days\n                c = array of censored patient ids\n                d = array of dead patient ids\n                n = numer of patients remaining\n                s = survival rate\n                p = previous survival rate\n                */\n                var te = survival.reduce(function(p, c) {\n                    p.tte.push(c.tte);\n                    p.ev.push(c.ev);\n                    return p;\n                }, { tte: [], ev: [] });\n\n                var compute = km.compute(te.tte, te.ev)\n                    .map(function(r) { return _.omit(r, ['rate', 'e', 'n', 'd']); })\n                compute.forEach(function(c) {\n                    var cd = this.survival.reduce(function(p, c) {\n                        if (p.time == c.tte) p[c.ev ? \"d\" : \"c\"].push(c.pid);\n                        return p;\n                    }, { c: [], d: [], time: c.t });\n                    c.c = cd.c;\n                    c.d = cd.d;\n                }, { survival: survival });\n\n\n                var lrt = (cohortAll === null) ? { \"KMStats\": \"NA\", \"pValue\": \"NA\", dof: \"NA\" } :\n                    km.logranktest([te, cohortAll.survival.data]);\n\n                var rv = {\n                    data: te,\n                    compute: compute,\n                    logrank: lrt\n                };\n\n                var firstEvent = rv.compute[0];\n                if (firstEvent.s !== 1 || firstEvent.t !== 0) {\n                    rv.compute.unshift({ c: [], d: [], s: 1, t: firstEvent.t });\n                    rv.compute.unshift({ c: [], d: [], s: 1, t: 0 });\n                }\n\n                return rv;\n            };\n\n            return {\n                km: km,\n                createHistogram: createHistogram,\n                createSurvival: createSurvival\n            };\n        })(jStat);\n\n\n        // Properties\n        var _dataSources; // All Data Sources\n        var _dataSource; // Selected Data Source\n        var _toolsAll; // List of All Tools\n        var _tools; // List of Tools For DataSource\n        var _data = null; // This is the clinical and sample to patient mapping data.\n        var _hugoMap = null; // Hugo Gene sybol map to alias\n        var _cohortAll; // Precalculated Cohort of All Patients / Samples\n        var _cohorts = null; // Collection of Cohorts\n        var _cohort = null; // Selected Cohorts\n        var _genesetAll; // Precalculated Geneset of All Symbols\n        var _genesets = null; // Collection of Genesets\n        var _geneset = null; // Selected Genesets\n        var _patientColor;\n        var _cohortToolInfo = { 'numSamples': 500, 'numPatients': 500 };\n        var _cohortDatasetInfo = { 'numSamples': 0, 'numPatients': 0 };\n        var _genesetToolInfo = { 'numGenes': 0, 'numSymbols': 0 };\n        var _showGenesetImport = false;\n     //   var _genesetDatasetInfo = { 'numGenes': 0, 'numSymbols': 0, 'url': '', 'desc':''  };\n\n        var getTools = function() { return _tools; };\n        var getCohorts = function() { return _cohorts; };\n        var getCohort = function() { return _cohort; };\n        var getCohortToolInfo = function() { return _cohortToolInfo; };\n        var getCohortDatasetInfo = function() { return _cohortDatasetInfo; };\n        var getGenesets = function() { return _genesets; };\n        var getGeneset = function() { return _geneset; };\n        var getGenesetAll = function() { return _genesetAll; };\n        var getGenesetToolInfo = function() { return _genesetToolInfo; };\n    //    var getGenesetDatasetInfo = function() { return _genesetDatasetInfo; };\n        var getData = function() { return _data; };\n        var getPatientColor = function() { return _patientColor; };\n        var getDataSources = function() { return _dataSources; };\n        var getDataSource = function() { return _dataSource; };\n        var setPatientColor = function(patientColor) {\n            _patientColor = patientColor;\n            onPatientColorChange.dispatch(patientColor);\n        };\n        var setCohortToolInfo = function(cohortToolData) {\n            _cohortToolInfo = cohortToolData;\n            onCohortToolInfo.dispatch(_cohortToolInfo);\n        };\n        var setGenesetToolInfo = function(genesetToolData) {\n            _genesetToolInfo = genesetToolData;\n            onGenesetToolInfo.dispatch(_genesetToolInfo);\n        };\n        var setDataSource = function(value) {\n\n            return new Promise(function(resolveDataSource) {\n\n                // Set Data Source Object Using String or Object\n                if (angular.isObject(value)) {\n                    if (_dataSource === value) {\n                        resolveDataSource();\n                        return;\n                    }\n                    _dataSource = value;\n                } else if (angular.isString(value)) {\n                    if (_dataSource.dataset === value) {\n                        resolveDataSource();\n                        return;\n                    }\n                    _dataSource = _dataSources.filter(function(v) {\n                        return v.dataset == this.key;\n                    }, {\n                        key: value\n                    })[0];\n                }\n\n                // Update What Tools Are Availible Based On Data Sources\n                _tools = _toolsAll.filter(function(item) {\n                    return (_dataSource.tools.indexOf(item.route) !== -1);\n                }).sort(function(a, b) {\n                    if (a.name < b.name) return -1;\n                    if (a.name > b.name) return 1;\n                    return 0;\n                });\n\n\n                // Load Sample Maps\n                Promise.all([query(_dataSource.dataset +\"_samplemap\", {}),\n                             query(\"phenotype_wrapper\",{\"dataset\":_dataSource.dataset}), \n                             query(_dataSource.dataset + \"_phenotype\", {}),\n                             query(\"lookup_oncoscape_datasources_v2\", {\"dataset\":_dataSource.dataset})]).then(function(responses) {\n                    var data = {};\n\n                    _dataSource.collections = responses[3].data[0].collections\n                    // Map of Samples To Patients\n                    data.sampleMap = responses[0].data[0];\n\n                    // Map of Patients To Samples + Clinical Using Samples Ids\n                    data.patientMap = Object.keys(data.sampleMap).reduce(function(p, c) {\n                        var patient = data.sampleMap[c];\n                        var sample = c;\n                        if (p.hasOwnProperty(patient)) {\n                            p[patient].samples.push(sample);\n                        } else {\n                            p[patient] = { samples: [sample] };\n                        }\n                        return p;\n                    }, {});\n\n                    // wrapper configuration\n                    data.wrapper = responses[1].data[0]\n\n                    // add phenotype data to patient map\n                    responses[2].data.reduce(function(p, c) {\n                        if (p.hasOwnProperty(c[data.wrapper.req.patient_id])) {\n                            p[c[data.wrapper.req.patient_id]].clinical = c;\n                        } else {\n                            p[c[data.wrapper.req.patient_id]] = { clinical: c, samples: [] };\n                        }\n                        return p;\n                    }, data.patientMap);\n\n                    _cohortDatasetInfo.numSamples = Object.keys(data.sampleMap).length;\n                    _cohortDatasetInfo.numPatients = Object.keys(data.patientMap).length;\n\n                    // Survival Data\n                    responses[2].data.map(function(v) {\n\n                        // No Status - Exclude\n                        if (!v.hasOwnProperty(data.wrapper.req.status_vital)) return null;\n                        if (v[data.wrapper.req.status_vital] === null) return null;\n\n                        // Get Time - Or Exclude\n                        var status = v[data.wrapper.req.status_vital].toString().trim().toUpperCase();\n                        var time;\n                        if (status == \"ALIVE\") { // Alive = Sensor 2\n                            if (!v.hasOwnProperty(data.wrapper.req.days_to_last_followup)) return null;\n                            time = parseInt(v[data.wrapper.req.days_to_last_followup]);\n                            if (time < 0) time = 0;\n                            if (isNaN(time)) return null;\n                            return { pid: v[data.wrapper.req.patient_id], ev: false, tte: time };\n                        }\n                        if (status == \"DEAD\") { // Dead = Sensor 1\n                            if (!v.hasOwnProperty(data.wrapper.req.days_to_death)) return null;\n                            time = parseInt(v[data.wrapper.req.days_to_death]);\n                            if (time < 0) time = 0;\n                            if (isNaN(time)) return null;\n                            return { pid: v[data.wrapper.req.patient_id], ev: true, tte: time };\n                        }\n                        return null;\n                    }).reduce(function(p, c) {\n                        if (c !== null) {\n                            p[c.pid].survival = c;\n                        }\n                        return p;\n                    }, data.patientMap);\n\n                    _data = data;\n                    _cohortAll = {\n                        color: '#039BE5',\n                        patientIds: [],\n                        sampleIds: [],\n                        name: 'All Patients + Samples',\n                        histogram: statsFactory.createHistogram(Object.keys(data.patientMap), data),\n                        survival: statsFactory.createSurvival(Object.keys(data.patientMap), data, null),\n                        numPatients: Object.keys(_data.patientMap).length,\n                        numSamples: Object.keys(_data.sampleMap).length,\n                        numClinical: Object.keys(_data.patientMap).reduce(function(p, c) { p += (_data.patientMap[c].hasOwnProperty('clinical')) ? 1 : 0; return p; }, 0),\n                        show: true,\n                        type: 'ALL'\n                    };\n\n                    _cohorts = localStorage.getItem(_dataSource.dataset + 'Cohorts');\n\n                    if (_cohorts !== null) {\n                        _cohorts = angular.fromJson(_cohorts);\n                        setCohort(_cohorts[0]);\n                    } else {\n                        _cohorts = [_cohortAll];\n                        setCohort(_cohortAll);\n                    }\n\n                    // Let everyone know what happened\n                    onCohortsChange.dispatch(_cohorts);\n                    onCohortChange.dispatch(_cohort);\n                    onDataSource.dispatch(_dataSource);\n\n                    // Resolve The Promise\n                    resolveDataSource();\n                });\n            });\n        };\n        var showGenesetImport = function(showpanel) {\n            _showGenesetImport= showpanel;\n            onshowGenesetImportChange.dispatch(showpanel);\n        };\n\n        var createWithSampleIds = function(name, sampleIds, data) {\n            if (sampleIds.length === 0) return _cohortAll;\n            var patientIds = sampleIds\n                .map(function(v) { return this.hasOwnProperty(v) ? this[v] : null; }, data.sampleMap)\n                .filter(function(v) { return (v !== null); }) // Remove Null\n                .filter(function(item, i, ar) { return ar.indexOf(item) === i; }); // Remove Dups\n\n            return create(name, patientIds, sampleIds);\n        };\n\n        var createWithPatientIds = function(name, patientIds, data) {\n\n            if (patientIds.length === 0) return _cohortAll;\n            var sampleIds = [].concat\n                .apply([], patientIds\n                    .map(function(v) { return this.hasOwnProperty(v) ? this[v].samples : null; }, data.patientMap))\n                .filter(function(item, i, ar) { return ar.indexOf(item) === i; });\n\n            return create(name, patientIds, sampleIds);\n        };\n\n        var createWithHugoIds = function(name, hugoIds) {\n\n            if (hugoIds.length === 0) return _genesetAll;\n            var geneIds = hugoIds;\n            var result = {\n                symbols: hugoIds,\n                genes: geneIds,\n                name: name,\n                url:\"\",\n                desc:\"Created from Geneset Menu\"\n            };\n            return loadGeneset(result);\n        };\n\n        var create = function(name, patientIds, sampleIds) {\n            var survival = statsFactory.createSurvival(patientIds, _data, _cohortAll);\n            var rv = {\n                uuid: Math.random().toString().substr(2),\n                color: '#000',\n                patientIds: patientIds,\n                sampleIds: sampleIds,\n                name: name,\n                histogram: statsFactory.createHistogram(patientIds, _data),\n                survival: (survival === null) ? _cohortAll.survival : survival,\n                numPatients: patientIds.length,\n                numSamples: sampleIds.length,\n                numClinical: patientIds.reduce(function(p, c) { p += (_data.patientMap[c].hasOwnProperty('clinical')) ? 1 : 0; return p; }, 0),\n                show: true,\n                type: 'UNSAVED'\n            };\n            return rv;\n        };\n\n        var loadGeneset = function(result) {\n            var rv = {\n                uuid: Math.random().toString().substr(2),\n                color: '#000',\n                hugoIds: result.genes,\n                geneIds: result.genes,\n                name: result.name,\n                url:result.url,\n                desc:result.desc,\n                show: false,\n                disable: false,\n                type: result.type\n            };\n            return rv;\n        };\n\n        var setCohort = function(cohort, name, type) {\n            // Create Cohort If Array Passed\n            if (angular.isArray(cohort)) {\n                name += \"  (\" + moment().format('hh:mm:ss') + \")\";\n                cohort = (type == \"PATIENT\") ? createWithPatientIds(name, cohort, _data) : createWithSampleIds(name, cohort, _data);\n                cohort.type = (cohort.patientIds.length === 0) ? \"ALL\" : \"UNSAVED\";\n                if (cohort.type != \"ALL\") {\n                    var usedColors = _cohorts.map(function(v) { return v.color; });\n                    var availColors = [\"#E91E63\", \"#673AB7\", \"#4CAF50\", \"#CDDC39\", \"#FFC107\", \"#FF5722\", \"#795548\", \"#607D8B\", \"#03A9F4\", \"#03A9F4\", '#004358', '#800080', '#BEDB39', '#FD7400', '#1F8A70', '#B71C1C', '#880E4F', '#4A148C', '#311B92', '#0D47A1', '#006064', '#1B5E20'].filter(function(v) { return (usedColors.indexOf(v) == -1); });\n                    cohort.color = availColors[0];\n                }\n            }\n            //if (_cohort === cohort) return;\n            _cohort = cohort;\n            onCohortChange.dispatch(_cohort);\n        };\n\n        var setGeneset = function(geneset, name, type) {\n            // Create Cohort If Array Passed\n            if (angular.isArray(geneset)) {\n                //name += \"  (\" + moment().format('hh:mm:ss') + \")\";\n                geneset = (type == \"SYMBOL\") ? createWithHugoIds(name, geneset, _hugoMap) : createWithHugoIds(name, geneset, _hugoMap);\n                geneset.type = (geneset.hugoIds.length === 0) ? \"ALL\" : \"UNSAVED\";\n                // if (geneset.type != \"ALL\") {\n                //     var usedColors = _genesets.map(function(v) { return v.color; });\n                //     var availColors = [\"#E91E63\", \"#673AB7\", \"#4CAF50\", \"#CDDC39\", \"#FFC107\", \"#FF5722\", \"#795548\", \"#607D8B\", \"#03A9F4\", \"#03A9F4\", '#004358', '#800080', '#BEDB39', '#FD7400', '#1F8A70', '#B71C1C', '#880E4F', '#4A148C', '#311B92', '#0D47A1', '#006064', '#1B5E20'].filter(function(v) { return (usedColors.indexOf(v) == -1); });\n                //     geneset.color = availColors[0];\n                // }\n            }\n            //if (_cohort === cohort) return;\n            _geneset = geneset;\n            onGenesetChange.dispatch(_geneset);\n        };\n\n        var saveCohort = function() {\n            _cohort.type = \"SAVED\";\n            _cohorts.push(_cohort);\n            localStorage.setItem(_dataSource.dataset + 'Cohorts', angular.toJson(_cohorts));\n\n        };\n        var saveGeneset = function() {\n            _geneset.type = \"SAVED\";\n            _genesets.push(_geneset);\n            localStorage.setItem( 'GeneSets', angular.toJson(_genesets.filter(function(d){return d.type == \"SAVED\"})));\n            onGenesetsChange.dispatch(_genesets);\n\n        };\n        var deleteCohort = function(cohort) {\n            _cohorts.splice(_cohorts.indexOf(cohort), 1);\n            localStorage.setItem(_dataSource.dataset + 'Cohorts', angular.toJson(_cohorts));\n            setCohort([], \"\", \"PATIENT\");\n        };\n        var deleteGeneset = function(geneset) {\n            _genesets.splice(_genesets.indexOf(geneset), 1);\n            localStorage.setItem('GeneSets', angular.toJson(_genesets.filter(function(d){return d.type == \"SAVED\"})));\n            setGeneset([], \"\", \"SYMBOL\");\n            onGenesetsChange.dispatch(_genesets);\n        };\n        var toggleGenesetDisable = function(geneset) {\n            _genesets[_genesets.indexOf(geneset)].disable = ! _genesets[_genesets.indexOf(geneset)].disable\n            onGenesetsChange.dispatch(_genesets);\n        };\n\n        // Converts Sample Ids To A List of Sample Ids\n        var importIds = function(ids, name) {\n            var sampleIds = _.union.apply(null, ids\n                .map(function(id) { // Convert All Ids to Patient Ids\n                    id = id.toUpperCase().trim(); // Clean input\n                    return _data.sampleMap.hasOwnProperty(id) ? _data.sampleMap[id] : id;\n                })\n                .filter(function(id) { // Remove Invalid Patient Ids\n                    return _data.patientMap.hasOwnProperty(id);\n                })\n                .map(function(id) { // Convert Patient Ids To Sample Arrays\n                    return _data.patientMap[id].samples;\n                })); // Union Merges Arrays + Removes Dups\n\n            setCohort(sampleIds, name, \"SAMPLE\");\n            saveCohort();\n        };\n\n        // Adds gene Ids to geneset and stores in localStorage\n        var importGeneIds = function(ids, name) {\n\n            //  var geneIds = _.union.apply(null, ids\n            //     .map(function(id) { // Convert All Ids to Patient Ids\n            //         id = id.trim(); // Clean input\n            //         return _data.hugoMap.hasOwnProperty(id) ? _data.hugoMap[id] : id;\n            //     })\n            //      .filter(function(id) { // Remove Invalid HUGO Ids\n            //          return _hugoMap.hasOwnProperty(id);\n            //      })\n            //); // Union Merges Arrays + Removes Dups\n            var geneIds = ids;\n\n            setGeneset(geneIds, name, \"SYMBOL\");\n            saveGeneset();\n        };\n\n        // Initialize (Load Tools Raw Data + DataSources)\n        var initialized = false;\n\n        function init() {\n            if (initialized) return new Promise(function(resolve) { resolve(_dataSources); });\n            initialized = true;\n            return Promise.all([\n                new Promise(function(resolve, reject) {\n                    query(\"lookup_oncoscape_tools\").then(function(response) {\n                        _toolsAll = response.data;\n                        resolve();\n                    }, reject);\n                }),\n                new Promise(function(resolve, reject) {\n\n                    query(\"lookup_oncoscape_datasources_v2\", {\n                        beta: false, \"$fields\": [\"dataset\",\"source\", \"beta\", \"name\",\"img\", \"tools\"]\n                    }).then(function(response) {\n                        _dataSource = { dataset: '' };\n\n                        _dataSources = response.data\n                            .filter(function(d) {\n                                return angular.isDefined(d.img);\n                            })\n                            .map(function(d) {\n                                d.name = d.name.trim();\n                                return d;\n                            })\n                            .sort(function(a, b) {\n                                return (a.img < b.img) ? -1 :\n                                    (a.img > b.img) ? 1 :\n                                    (a.dataset < b.dataset) ? -1 :\n                                    (a.dataset > b.dataset) ? 1 :\n                                    0;\n                            });\n                        resolve();\n                    }, reject);\n                }),\n                new Promise(function(resolve, reject) {\n                    query(\"lookup_genesets\", {\n                        // $fields: ['name', 'genes']\n                    }).then(function(response) {\n                        var result = response.data;\n                        _genesets = result.map(function(d){\n                            d.type = \"IMPORT\"\n                            return loadGeneset(d); });\n\n                        _genesetAll = {\n                                color: '#039BE5',\n                                hugoIds: [],\n                                geneIds: [],\n                                name: 'All Genes',\n                                url: '',\n                                desc: \"All available molecular markers will be used in analysis.\",\n                                // histogram: statsFactory.createHistogram(Object.keys(data.patientMap), data),\n                                // survival: statsFactory.createSurvival(Object.keys(data.patientMap), data, null),\n                                // numPatients: Object.keys(_data.patientMap).length,\n                                // numSamples: Object.keys(_data.sampleMap).length,\n                                // numClinical: Object.keys(_data.patientMap).reduce(function(p, c) { p += (_data.patientMap[c].hasOwnProperty('clinical')) ? 1 : 0; return p; }, 0),\n                                show: true,\n                                disable: false,\n                                type: 'ALLGENES'\n                        };\n\n                        _genesets.unshift(_genesetAll);\n                        _geneset = _genesets[0];\n\n                        var localGenesets = localStorage.getItem('GeneSets');\n\n                        if (localGenesets !== null) {\n\n                            var localGenesetsArray = angular.fromJson(localGenesets)\n                            if(localGenesetsArray.length != 0){\n                                _genesets.concat(localGenesetsArray);\n                                // setGeneset(_genesets[0]);\n                            } else {\n                                // setGeneset(_genesetAll);\n                            }\n                        }\n\n                        onGenesetsChange.dispatch(_genesets);\n                        onGenesetChange.dispatch(_geneset);\n\n                            resolve();\n                    }, reject);\n\n                })//,\n\n                // new Promise(function(resolve, reject) {\n                //     query(\"lookup_oncoscape_genes\", {\n                //     }).then(function(response) {\n                //         _hugoMap = response.data\n\n                //     resolve();\n                //     }, reject);\n                // })\n            ]);\n        }\n\n        // Query Api\n        var queryString = function(table, query) {\n            return osHttp.queryString({\n                table: table,\n                query: query\n            });\n        };\n        var query = function(table, query) {\n            return osHttp.query({\n                table: table,\n                query: query\n            });\n        };\n\n        return {\n\n            // Constants\n            ALL: \"All Patients\",\n            ALLGENES: \"All Genes\",\n            SAMPLE: \"SAMPLE\",\n            PATIENT: \"PATIENT\",\n            SYMBOL: \"SYMBOL\",\n\n            // Init\n            init: init,\n\n            // RPC\n            query: query,\n            queryString: queryString,\n\n            // Data Sources\n            setDataSource: setDataSource,\n            getDataSource: getDataSource,\n            getDataSources: getDataSources,\n\n            // Patient Colors\n            setPatientColor: setPatientColor,\n            getPatientColor: getPatientColor,\n\n            // Tools + Layouts\n            getTools: getTools,\n            getLayout: getLayout,\n\n            // Cohort Tool Info\n            setCohortToolInfo: setCohortToolInfo,\n            getCohortToolInfo: getCohortToolInfo,\n            getCohortDatasetInfo: getCohortDatasetInfo,\n\n\n            // Cohort Management\n            getCohorts: getCohorts,\n            getCohort: getCohort,\n            setCohort: setCohort,\n            saveCohort: saveCohort,\n            deleteCohort: deleteCohort,\n            importIds: importIds,\n            importGeneIds: importGeneIds,\n\n            // Geneset Tool Info\n            setGenesetToolInfo: setGenesetToolInfo,\n            getGenesetToolInfo: getGenesetToolInfo,\n            //getGenesetDatasetInfo: getGenesetDatasetInfo,\n\n\n            // Geneset Management\n            getGenesets: getGenesets,\n            getGeneset: getGeneset,\n            getGenesetAll: getGenesetAll,\n            setGeneset: setGeneset,\n            saveGeneset: saveGeneset,\n            deleteGeneset: deleteGeneset,\n            toggleGenesetDisable: toggleGenesetDisable,\n            showGenesetImport: showGenesetImport,\n            \n\n            // Signals\n            onPatientColorChange: onPatientColorChange,\n            onCohortToolInfo: onCohortToolInfo,\n            onGenesetToolInfo: onGenesetToolInfo,\n            onNavChange: onNavChange,\n            onDataSource: onDataSource,\n            onResize: onResize,\n            onCohortChange: onCohortChange,\n            onCohortsChange: onCohortsChange,\n            onGenesetChange: onGenesetChange,\n            onGenesetsChange: onGenesetsChange,\n            onshowGenesetImportChange: onshowGenesetImportChange,\n\n            // Random\n            setBusy: setBusy,\n            km: statsFactory.km,\n\n            getData: getData\n\n        };\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osMarkers', markers);\n\n    /** @ngInject */\n    function markers() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/markers/markers.html',\n            scope: {},\n            controller: MarkersController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function MarkersController(osApi, d3, $state, $timeout, $scope, $stateParams, cytoscape, signals, moment, $window, _, $q) {\n\n            osApi.setBusy(true);\n\n            var tmpdata, worker;\n\n            var signal = (function() {\n                return {\n                    patients: {\n                        select: new signals.Signal(),\n                        unselect: new signals.Signal(),\n                        over: new signals.Signal(),\n                        out: new signals.Signal()\n                    },\n                    genes: {\n                        select: new signals.Signal(),\n                        unselect: new signals.Signal(),\n                        over: new signals.Signal(),\n                        out: new signals.Signal()\n                    },\n                    edges: {\n                        select: new signals.Signal(),\n                        unselect: new signals.Signal(),\n                        over: new signals.Signal(),\n                        out: new signals.Signal()\n                    },\n                    clear: function() {\n                        this.edges.select.removeAll();\n                        this.edges.unselect.removeAll();\n                        this.edges.over.removeAll();\n                        this.edges.out.removeAll();\n                        this.patients.select.removeAll();\n                        this.patients.unselect.removeAll();\n                        this.patients.over.removeAll();\n                        this.patients.out.removeAll();\n                        this.genes.select.removeAll();\n                        this.genes.unselect.removeAll();\n                        this.genes.over.removeAll();\n                        this.genes.out.removeAll();\n                    }\n                };\n            })();\n\n\n            // State\n            var mpState = (function(osApi) {\n                // Retrieve State\n                var mp = localStorage.getItem(\"MP-\" + osApi.getDataSource().dataset);\n                var hasState = (mp !== null);\n                if (hasState) mp = angular.fromJson(mp);\n\n\n                var _colors = null;\n                var setColors = function(c) {\n                    _colors = c;\n                };\n                var applyState = function(fn, cyChart) {\n                    if (!hasState) return;\n                    osApi.onPatientColorChange.dispatch(mp.optColors);\n                    requestAnimationFrame(function() {\n                        cyChart.startBatch();\n                        cyChart.add(mp.edges);\n                        cyChart.$('node[nodeType=\"patient\"]').forEach(function(node) {\n                            if (\n                                mp.moved.hasOwnProperty(node.id())\n                            ) {\n                                node.position(\n                                    mp.moved[node.id()]\n                                );\n                            }\n                        });\n                        cyChart.endBatch();\n                    });\n\n\n\n                };\n\n                var getOptEdgeColors = function() {\n\n                    if (hasState) return mp.optEdgeColors;\n                    return [{\n                        name: 'Mutation',\n                        abv: 'm',\n                        show: true,\n                        color: '#9C27B0',\n                        class: 'switch-mutation',\n                        count: '',\n                        id: 0\n                    }, {\n                        name: 'Amplification',\n                        abv: 'cnG2',\n                        show: true,\n                        color: '#3F51B5',\n                        class: 'switch-cnG2',\n                        count: '',\n                        id: 2\n                    }, {\n                        name: 'Gain',\n                        abv: 'cnG1',\n                        show: true,\n                        color: '#03A9F4',\n                        class: 'switch-cnG1',\n                        count: '',\n                        id: 1\n                    }, {\n                        name: 'Loss',\n                        abv: 'cnL1',\n                        show: true,\n                        color: '#FF9800',\n                        class: 'switch-cnL1',\n                        count: '',\n                        id: -1\n                    }, {\n                        name: 'Deletion',\n                        abv: 'cnL2',\n                        show: true,\n                        color: '#F44336',\n                        class: 'switch-cnL2',\n                        count: '',\n                        id: -2\n                    }];\n                };\n\n                var getGeneSet = function(genesets) {\n                    if (hasState) {\n                        return genesets.filter(function(v) {\n                            return v.name == mp.optGeneSet.name;\n                        }, mp.optGeneSet.name)[0];\n                    }\n\n                    var datasetGeneset = osApi.getDataSource().geneset;\n                    var gs = genesets.reduce(function(p, c) {\n                        if (c.name === datasetGeneset) { p = c; }\n                        return p;\n                    }, genesets[0]);\n                    return gs;\n                };\n\n                var getPatientLayout = function(layouts) {\n\n                    if (hasState) {\n                        return layouts.filter(function(v) {\n                            return v.name == mp.optPatientLayout.name;\n                        }, mp.optPatientLayout.name)[0];\n                    } else {\n                        return layouts.reduce(function(p, c) {\n                            if (c.hasOwnProperty(\"default\")) {\n                                if (c.default) p = c;\n                            }\n                            return p;\n                        }, layouts[0]);\n                    }\n                };\n\n\n                var save = function(vm, cyChart) {\n                    var s = {};\n                    s.moved = {};\n                    cyChart.$('node[nodeType=\"patient\"]').forEach(function(v) {\n                        if (!_.isMatch(v.data().position, v.position())) {\n                            s.moved[v.id()] = v.position();\n                        }\n                    });\n                    s.optEdgeColors = vm.optEdgeColors;\n                    s.optGeneSet = vm.optGeneSet;\n                    s.optPatientLayout = vm.optPatientLayout;\n                    s.optColors = _colors;\n                    s.edges = cyChart.$('edge[edgeType=\"cn\"]').jsons();\n                    localStorage.setItem(\"MP-\" + osApi.getDataSource().dataset, angular.toJson(s));\n                };\n\n                return {\n                    applyState: applyState,\n                    getOptEdgeColors: getOptEdgeColors,\n                    getGeneSet: getGeneSet,\n                    getPatientLayout: getPatientLayout,\n                    setColors: setColors,\n                    save: save\n                };\n            })(osApi);\n\n\n\n\n            /*\n             *  Cytoscape Chart\n             *  + Node & Edge Styles\n             */\n            var elChart = angular.element(\"#markers-chart\");\n            var cyChart = (function(elChart) {\n                return cytoscape({\n                    'container': elChart,\n                    'style': [{\n                        'selector': 'core',\n                        'style': {\n                            'selection-box-color': '#039BE5',\n                            'selection-box-border-color': '#3993fa',\n                            'selection-box-border-width': '1px',\n                            'selection-box-opacity': '.2'\n                        }\n                    }, {\n                        'selector': 'node',\n                        'style': {\n                            'background-color': \"#039BE5\",\n                            'display': \"data(display)\",\n                            'width': 'data(sizeEle)',\n                            'height': 'data(sizeEle)',\n                            'border-width': 'data(sizeBdr)',\n                            'font-size': 'data(sizeLbl)',\n                            'text-valign': 'center'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"telomere\"]',\n                        'style': {\n                            'background-color': \"#039BE5\",\n                            'border-color': \"#039BE5\"\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"patient\"]',\n                        'style': {\n                            'background-color': 'data(color)',\n                            'text-halign': 'center',\n                            'border-color': '#FFFFFF'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"patient\"]:selected',\n                        'style': {\n                            'background-color': 'data(color)',\n                            'border-color': \"#000\",\n                            'border-width': 5\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"gene\"]',\n                        'style': {\n                            'background-color': \"data(color)\",\n                            'border-color': \"data(colorBdr)\",\n                            'text-halign': \"data(halign)\",\n                            'text-margin-x': \"data(padding)\",\n                            'font-size': '8px',\n                            'color': '#aaa',\n                            'label': \"data(id)\",\n                            'border-width': \"data(sizeBdr)\"\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"gene\"]:selected',\n                        'style': {\n                            'background-color': \"#fc8400\",\n                            'border-color': \"#000000\",\n                            'color': '#000'\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"centromere\"]',\n                        'style': {\n                            'font-size': '20px',\n                            'text-halign': 'center',\n                            'background-color': \"#039BE5\",\n                            'color': \"#FFFFFF\",\n                            'border-color': 'rgb(19, 150, 222)',\n                            'height': '40px',\n                            'width': '40px',\n                            'shape': 'round',\n                            'label': \"  data(id)\"\n                        }\n                    }, {\n                        'selector': 'edge',\n                        'style': {\n                            'display': \"data(display)\",\n                            'line-color': \"data(color)\",\n                            'width': \"data(sizeEle)\"\n                        }\n                    }, {\n                        'selector': 'node[nodeType=\"annotation-text\"]',\n                        'style': {\n                            'font-size': '50px',\n                            'text-halign': 'right',\n                            'text-valign': 'bottom',\n                            'background-color': \"#FFFFFF\",\n                            'color': \"#000\",\n                            'border-color': '#FFFFFF',\n                            'height': '50px',\n                            'width': '50px',\n                            'shape': 'round',\n                            'label': 'data(label)',\n                            'text-transform': 'uppercase'\n                        }\n                    }],\n                    hideEdgesOnViewport: false,\n                    hideLabelsOnViewport: true,\n                    textureOnViewport: false,\n                    wheelSensitivity: 0.2,\n                    zoom: 0.08,\n                    pan: {\n                        x: 650,\n                        y: 160\n                    },\n                    minZoom: 0.05,\n                    maxZoom: 20,\n                    layout: {\n                        name: \"preset\",\n                        fit: true\n                    }\n                });\n            })(elChart);\n\n            /*\n             *  Draw Chromosome\n             */\n            (function() {\n\n                osApi.query(\"render_chromosome\", {\n                    type: \"chromosome\"\n                }).then(function(result) {\n\n                    // Process Chromosome\n                    var chromosomes = result.data[0].data;\n                    var elements = [];\n\n                    Object.keys(chromosomes).forEach(function(key) {\n                        var chromosome = this.chromosomes[key];\n                        this.elements.push({\n                            group: \"edges\",\n                            grabbable: false,\n                            locked: true,\n                            selectable: false,\n                            data: {\n                                color: \"#039BE5\",\n                                id: \"ce\" + key, // Chromosome Edge (CE)\n                                display: \"element\",\n                                edgeType: \"chromosome\",\n                                sizeBdr: 0,\n                                sizeEle: 3, // Style?\n                                source: \"cp\" + key, // Chromosome P (CP)\n                                target: \"cq\" + key // Chromosome Q (CQ)\n                            }\n                        });\n\n                        // Telemere P\n                        this.elements.push({\n                            group: \"nodes\",\n                            grabbable: false,\n                            locked: true,\n                            selectable: false,\n                            position: {\n                                x: chromosome.x,\n                                y: chromosome.p\n                            },\n                            data: {\n                                id: \"cp\" + key,\n                                display: \"element\",\n                                nodeType: \"telomere\",\n                                degree: 1,\n                                sizeBdr: 1,\n                                sizeEle: 1,\n                                sizeLbl: 1,\n                                subType: \"unassigned\"\n                            }\n                        });\n                        // Telemere Q\n                        this.elements.push({\n                            group: \"nodes\",\n                            grabbable: false,\n                            locked: true,\n                            selectable: false,\n                            position: {\n                                x: chromosome.x,\n                                y: chromosome.q\n                            },\n                            data: {\n                                id: \"cq\" + key,\n                                display: \"element\",\n                                nodeType: \"telomere\",\n                                degree: 1,\n                                sizeBdr: 5,\n                                sizeEle: 5,\n                                sizeLbl: 5,\n                                subType: \"unassigned\"\n                            }\n                        });\n                        // Centromere Q\n                        this.elements.push({\n                            group: \"nodes\",\n                            grabbable: false,\n                            locked: true,\n                            selectable: false,\n                            position: {\n                                x: chromosome.x,\n                                y: chromosome.c\n                            },\n                            data: {\n                                id: key,\n                                display: \"element\",\n                                sizeBdr: 1,\n                                sizeEle: 10,\n                                sizeLbl: 10,\n                                nodeType: \"centromere\",\n                                degree: 1\n                            }\n                        });\n\n                    }, {\n                        chromosomes: chromosomes,\n                        elements: elements\n                    });\n                    cyChart.add(elements);\n                });\n            })();\n\n            /*\n             * View Model + Initial Data Load \n             * + Initial Data Load\n             * + View Port Resize Event\n             */\n            var vm = (function(vm, osApi, mpState) {\n                vm.showPopupSelection = false;\n                vm.datasource = osApi.getDataSource();\n                vm.detail = {\n                    show: false,\n                    html: \"\",\n                    title: \"\"\n                };\n                vm.optGeneSets = [];\n                vm.optGeneSet = null;\n                vm.optPatientLayouts = [];\n                vm.optPatientLayout = null;\n                vm.showPanelLayout = false;\n                vm.showPanelColor = false;\n                vm.showPanelColorRna = false;\n                vm.search = \"\";\n                vm.searchCount = \"\";\n\n                vm.optCommandModes = [{\n                    name: 'Sequential'\n                }, {\n                    name: 'Set'\n                }, {\n                    name: 'Ad Hoc'\n                }];\n                vm.optCommandMode = vm.optCommandModes[0];\n\n                vm.exeSearch = function() {\n                    var needle = vm.search.toUpperCase().trim();\n                    var count = 0;\n                    var doSearch = (needle.length > 0);\n                    cyChart.$('node').forEach(function(el) {\n                        var found = (doSearch) ? (el.id().toUpperCase().indexOf(needle) === 0) : false;\n                        if (found) count += 1;\n                        el[found ? \"select\" : \"deselect\"]();\n                    });\n                    vm.searchCount = \"(\" + count + \" found)\";\n                    $timeout(function() { vm.searchCount = \"\"; }, 3000, true);\n                };\n                vm.hideModal = function() {\n                    angular.element('#modalEdge').modal('hide');\n                };\n                vm.filterModelEdge = function() {\n\n                    angular.element('#modalEdge').modal('hide');\n                    var vals = vm.optEdgeColors\n                        .filter(function(c) {\n                            return c.show;\n                        })\n                        .map(function(c) {\n                            return c.id;\n                        });\n                    var edges = tmpdata.edges.filter(function(edge) {\n                        return (vals.indexOf(edge.data.cn) != -1);\n                    }, {\n                        vals: vals\n                    });\n\n                    cyChart.startBatch();\n                    cyChart.add(edges);\n                    cyChart.endBatch();\n                    tmpdata = null;\n\n                };\n\n                vm.edgeToggle = function() {\n                    vm.cmd('ShowSelectedEdges');\n                };\n\n                vm.selectColor = function(item) {\n                    var color = item.color;\n                    var nodes = cyChart.$('node[nodeType=\"patient\"]');\n                    cyChart.startBatch();\n                    nodes.forEach(function(node) {\n                        if (node.data().color == this) {\n                            node.select();\n                        }\n                    }, color);\n                    cyChart.endBatch();\n                };\n                vm.deselectColor = function(item) {\n                    var color = item.color;\n                    var nodes = cyChart.$('node[nodeType=\"patient\"]:selected');\n                    cyChart.startBatch();\n                    nodes.forEach(function(node) {\n                        if (node.data().color == this) {\n                            node.unselect();\n                        }\n                    }, color);\n                    cyChart.endBatch();\n                };\n\n                vm.lockPatients = false;\n                vm.lockGenes = false;\n                vm.lock = function(type) {\n                    switch (type) {\n                        case \"patient\":\n                            vm.lockPatients = !vm.lockPatients;\n                            cyChart.startBatch();\n                            cyChart.$('node[nodeType=\"patient\"]')\n                                .forEach(function(node) {\n                                    if (vm.lockPatients) node.unselectify();\n                                    else node.selectify();\n                                });\n                            cyChart.endBatch();\n                            break;\n                        case \"gene\":\n                            vm.lockGenes = !vm.lockGenes;\n                            cyChart.startBatch();\n                            cyChart.$('node[nodeType=\"cn\"]')\n                                .forEach(function(node) {\n                                    if (vm.lockGenes) node.unselectify();\n                                    else node.selectify();\n                                });\n                            cyChart.endBatch();\n                            break;\n\n                    }\n                };\n\n                vm.optEdgeColors = mpState.getOptEdgeColors();\n\n\n                // Populate Dropdowns + Draw Chromosome\n                //hg19_geneset\n                $q.all([\n                    osApi.query(\"hg19_geneset\", {\n                        type: 'geneset',\n                        $fields: ['name']\n                    }),\n                    osApi.query(osApi.getDataSource().dataset + \"_cluster\", {\n                        $fields: ['input', 'geneset', 'dataType', 'source', 'default']\n                    })\n\n                ]).then(function(results) {\n\n                    var layouts = results[1].data.map(function(v) {\n                        v.name = v.dataType + \" \" + v.input + \" \" + v.geneset;\n                        return v;\n                    }).sort(function(a, b) {\n                        var x = a.name.toLowerCase();\n                        var y = b.name.toLowerCase();\n                        return x < y ? -1 : x > y ? 1 : 0;\n                    });\n\n                    vm.optGeneSets = _.uniq(osApi.getDataSource().edges.map(function(e) { return { name: e.geneset }; }), function(item) { return item.name; });\n                    vm.optGeneSet = mpState.getGeneSet(vm.optGeneSets);\n                    vm.optPatientLayouts = layouts;\n                    var patientLayout = mpState.getPatientLayout(vm.optPatientLayouts);\n                    vm.optPatientLayout = angular.isDefined(patientLayout) ? patientLayout : layouts[0];\n\n                });\n\n\n                vm.resize = function() {\n                    var width = $window.innerWidth;\n                    //    if (angular.element(\".tray\").attr(\"locked\") == \"true\") width -= 300;\n                    elChart.width(width);\n                    elChart.height($window.innerHeight - 90);\n                    cyChart.resize();\n                };\n                angular.element($window).bind('resize',\n                    _.debounce(vm.resize, 300)\n                );\n\n                return vm;\n            })(this, osApi, mpState);\n\n\n            /*\n             * Zoom Control Functions\n             * - reset\n             * - fit\n             */\n            var zoom = (function(cyChart, vm) {\n                var reset = function() {\n                    cyChart.fit();\n                    cyChart.center();\n                };\n                var fit = function() {\n                    cyChart.fit(cyChart.$(':selected'), 50);\n                };\n                vm.zoom = {\n                    reset: reset,\n                    fit: fit\n                };\n                cyChart.on('pan', _.debounce(function() {\n                    cyChart.startBatch();\n                    resizeNodes();\n                    cyChart.endBatch();\n                }, 50));\n\n                return vm.zoom;\n            })(cyChart, vm);\n\n            var borderScale = d3.scaleLog().domain([0.005, 20]).range([5, 1]);\n            var nodeScale = d3.scaleLog().domain([0.005, 20]).range([80, 1]);\n            var labelScale = d3.scaleLog().domain([0.005, 20]).range([50, 1]);\n            var expressionScale = d3.scalePow().range([0.01, 2]);\n\n\n            var resizeNodesByType = function(type) {\n\n                expressionScale.domain(\n                    cyChart.$('node[nodeType=\"' + type + '\"]').toArray()\n                    .reduce(function(p, c) {\n                        var w = c.data().weight;\n                        p[0] = Math.min(p[0], w);\n                        p[1] = Math.max(p[1], w);\n                        return p;\n                    }, [Infinity, -Infinity])\n                );\n\n\n\n\n                var zoom = cyChart.zoom();\n                var sizeNode = nodeScale(zoom);\n                var sizeLbl = (zoom < 0.375) ? 0 : labelScale(zoom);\n                var sizeBdr = borderScale(zoom);\n\n                cyChart.startBatch();\n                cyChart.$('node[nodeType=\"' + type + '\"]').forEach(function(node) {\n                    node.data({\n                        'sizeEle': Math.round(this.sizeNode * expressionScale(node.data().weight)),\n                        'sizeLbl': this.sizeLbl,\n                        'sizeBdr': this.sizeBdr\n                    });\n                }, {\n                    sizeNode: sizeNode,\n                    sizeBdr: sizeBdr,\n                    sizeLbl: sizeLbl,\n                    scale: expressionScale\n                });\n                cyChart.endBatch();\n            };\n\n            var resizeNodes = function() {\n                resizeNodesByType('patient');\n                resizeNodesByType('gene');\n            };\n\n            /* \n             *  Interop Between UI and Worker Thread\n             *  - setGeneSet(name:String)\n             *  - setPatientLayout(name:String)\n             *  - setDataSource(name:String)\n             *  - setOptions(options:Object)\n             */\n            var setOptions = (function(cyChart, vm, osApi, $q, zoom, _, signal) {\n\n                // Instatiate Worker\n                var cmd = {};\n                worker = new Worker(\"app/components/markers/markers.worker.js\");\n                worker.addEventListener('message', function(msg) {\n                    cmd[msg.data.cmd](msg.data.data);\n                }, false);\n\n                var remove = function(selector, data) {\n                    if (angular.isUndefined(data)) {\n                        cyChart.remove(selector);\n                        return;\n                    }\n\n                    if (data.length === 0) return;\n                    var items = data.map(function(item) {\n                        return this.getElementById(item);\n                    }, cyChart);\n                    try {\n                        cyChart.collection(items).remove();\n                    } catch (e) {}\n                };\n                cmd.patients_html = function() {\n\n                };\n                cmd.patients_resize = function() {\n\n                };\n                cmd.patients_delete = function(data) {\n                    remove('node[nodeType=\"patient\"]', data);\n                };\n                cmd.patients_insert = function(data) {\n                    cyChart.startBatch();\n                    var elements = cyChart.add(data.patients);\n                    elements.on(\"select\", _.debounce(signal.patients.select.dispatch, 300));\n                    elements.on(\"unselect\", _.debounce(signal.patients.unselect.dispatch, 300));\n                    elements.on(\"mouseover\", signal.patients.over.dispatch);\n                    elements.on(\"mouseout\", signal.patients.out.dispatch);\n                    elements.forEach(function(node) {\n                        try {\n                            node.data({\n                                'weight': data.degrees[node.id()].weight\n                            });\n                        } catch (e) {\n                            node.data({\n                                'weight': 10\n                            });\n                        }\n                    });\n                    resizeNodes();\n                    cyChart.endBatch();\n                    vm.resize();\n\n                    //Initial Node Selection & Color\n                    var cohort = osApi.getCohort();\n                    cyChart.startBatch();\n                    cyChart.nodes('node[nodeType=\"patient\"]').forEach(function(node) {\n                        if (this.indexOf(node.id()) != -1) node.select();\n\n                    }, cohort.sampleIds);\n                    cyChart.endBatch();\n                    vm.zoom.reset();\n                    cyChart.center();\n                    cyChart.fit(cyChart.nodes(), 400);\n                    mpState.applyState(onPatientColorChange, cyChart);\n\n                };\n                cmd.patients_layout = function(data) {\n                    cyChart.startBatch();\n                    cyChart.$(\"node[nodeType='annotation-text']\").remove();\n\n                    var posX = 100;\n                    var posY = 3000;\n                    var numMissing = 0;\n\n                    cyChart.nodes('node[nodeType=\"patient\"]').forEach(function(node) {\n                        if (data.hasOwnProperty(node.id())) {\n                            var pos = data[node.id()];\n                            node.data().position = { x: pos.x, y: pos.y };\n                            node.position(pos);\n                            node.style({ display: 'element' });\n                        } else {\n                            node.style({ display: 'none' });\n                            //node.position({ x: -10000, y: -10000 });\n                            // node.position({ x: posX, y: posY });\n                            // posX += 80;\n                            // if (posX > 3000) {\n                            //     posX = 100;\n                            //     posY += 80;\n                            // }\n                            // numMissing += 1;\n                        }\n                    });\n\n                    if (numMissing > 0) { // uncomment to show grid of missing\n                        // cyChart.add({\n                        //     group: \"nodes\",\n                        //     grabbable: false,\n                        //     locked: true,\n                        //     selectable: false,\n                        //     position: { x: 50, y: 2850 },\n                        //     data: {\n                        //         id: \"annotation\",\n                        //         color: \"rgb(0, 0, 0)\",\n                        //         display: \"element\",\n                        //         nodeType: \"annotation-text\",\n                        //         sizeEle: 800,\n                        //         weight: 0,\n                        //         sizeLbl: 500,\n                        //         degree: 0,\n                        //         sizeBdr: 50,\n                        //         label: \"The following \" + numMissing + \" samples lacked the requisite data to be clustered.\"\n                        //     }\n                        // });\n                    }\n                    resizeNodes();\n                    cyChart.endBatch();\n                };\n\n                cmd.genes_html = function() {\n\n                };\n                cmd.genes_delete = function(data) {\n                    remove('node[nodeType=\"gene\"]', data);\n                };\n                cmd.genes_insert = function(data) {\n                    cyChart.startBatch();\n                    //var signals = signal.genes;\n                    var elements = cyChart.add(data.genes);\n                    elements.on(\"select\", _.debounce(signal.genes.select.dispatch, 300));\n                    elements.on(\"unselect\", _.debounce(signal.genes.unselect.dispatch, 300));\n                    elements.on(\"mouseover\", signal.genes.over.dispatch);\n                    elements.on(\"mouseout\", signal.genes.out.dispatch);\n                    elements.forEach(function(node) {\n                        try {\n                            node.data({\n                                'weight': data.degrees[node.id()].weight\n                            });\n                        } catch (e) {\n                            node.data({\n                                'weight': 0\n                            });\n                        }\n                    });\n                    cyChart.endBatch();\n                    resizeNodes();\n                    osApi.setBusy(false);\n                };\n                cmd.edges_delete = function(data) {\n                    remove('edge[edgeType=\"cn\"]', data);\n\n                };\n                cmd.edges_insert = function(data) {\n                    tmpdata = data;\n                    if (data.counts.total > 5000) {\n                        angular.element('#modalEdge').modal();\n                        $scope.$apply(function() {\n                            vm.edgeCounts = data.counts;\n                        });\n                        return;\n                    }\n\n                    if (vm.optCommandMode.name == \"Ad Hoc\") {\n\n                        cyChart.startBatch();\n                        cyChart.$('edge[edgeType=\"cn\"]').remove();\n                        var elements = cyChart.add(data.edges);\n\n                        if (mouseIsOver == \"patient\") {\n\n                            var geneColors = elements\n                                .map(function(v) {\n                                    return [v.data().source, v.data().color];\n                                })\n                                .reduce(function(p, c) {\n                                    p[c[0]] = c[1];\n                                    return p;\n                                }, {});\n\n                            cyChart.$('node[nodeType=\"gene\"]')\n                                .forEach(function(ele) {\n                                    var id = ele.id();\n                                    var selected = this.hasOwnProperty(id);\n                                    ele.data(\"sizeBdr\", (selected) ? 10 : 1);\n                                    ele.data(\"colorBdr\", (selected) ? this[id] : \"#FFFFFF\");\n                                    ele.data(\"color\", (selected) ? this[id] : \"#0096d5\");\n\n                                }, geneColors);\n                        }\n\n                        cyChart.endBatch();\n\n                    } else {\n                        cyChart.startBatch();\n                        try {\n                            cyChart.add(data.edges);\n                        } catch (e) {}\n                        vm.edgeCounts = data.counts;\n                        cyChart.endBatch();\n                    }\n\n                };\n\n                // Outbound\n                return function(options) {\n                    worker.postMessage({\n                        cmd: \"setOptions\",\n                        data: options\n                    });\n                };\n            })(cyChart, vm, osApi, $q, zoom, _, signal);\n\n            /* Options Factory */\n            var createOptions = (function(cyChart, vm) {\n\n                return function(cmd) {\n\n                    cmd = cmd || \"\";\n                    var geneset = vm.optGeneSet.name;\n\n                    // Could add ability to select from cBio or UCSC for edges\n                    // var edges = osApi.getDataSource().edges.filter(function(f) {\n                    //     return f.name == this.geneset;\n                    // }, {\n                    //     geneset: geneset\n                    // })[0];\n                    var opts = {\n                        mode: vm.optCommandMode.name,\n                        cmd: cmd,\n                        dataset: osApi.getDataSource().dataset,\n                        patients: {\n                            data: vm.datasource.clinical.patient,\n                            layout: vm.optPatientLayout,\n                            selected: cyChart.$('node[nodeType=\"patient\"]:selected').map(function(p) {\n                                return p.data().id;\n                            })\n                        },\n                        genes: {\n                            layout: vm.optGeneSet.name,\n                            selected: cyChart.$('node[nodeType=\"gene\"]:selected').map(function(p) {\n                                return p.data().id;\n                            })\n                        },\n                        edges: {\n                            layout: vm.datasource.edges\n                                .filter(function(v) {\n                                    return (v.geneset == this);\n                                }, geneset)[0],\n                            colors: vm.optEdgeColors\n                                .filter(function(f) {\n                                    return f.show;\n                                })\n                                .map(function(f) {\n                                    return {\n                                        id: f.id,\n                                        color: f.color\n                                    };\n                                })\n                        }\n                    };\n\n                    return opts;\n                };\n            })(cyChart, vm);\n\n            vm.cmd = function() {};\n\n            /*\n             *  Watch View Model\n             *  + vm.optGeneSet\n             *  + vm.optPatientLayout\n             */\n            (function(vm, $scope) {\n                var watches = 2;\n\n                var update = function() {\n                    setOptions(createOptions());\n                };\n\n                // GeneSet\n                watches += 0;\n                $scope.$watch('vm.optGeneSet', function() {\n                    if (watches > 0) {\n                        watches -= 1;\n                        return;\n                    }\n                    if (angular.isUndefined(vm.optGeneSet) || angular.isUndefined(vm.optPatientLayout)) return;\n                    osApi.setBusy(true);\n                    cyChart.$('edge[edgeType=\"cn\"]').remove();\n                    update();\n\n                });\n\n                // Patient Layout\n                watches += 1;\n                $scope.$watch('vm.optPatientLayout', function() {\n                    if (watches > 0) {\n                        watches -= 1;\n                        return;\n                    }\n                    update();\n                });\n\n\n                // Edge Colors\n                watches += 1;\n                $scope.$watch('vm.optEdgeColors.color', function() {\n                    if (watches > 0) {\n                        watches -= 1;\n                        return;\n                    }\n                    update();\n                    vm.resize();\n                });\n            })(vm, $scope);\n\n            var mouseIsOver = \"\";\n            var updatePatientCounts = function() {\n\n                angular.element(\".legend-count\").text(\"\");\n                var selectedPatients = cyChart.$('node[nodeType=\"patient\"]:selected').toArray();\n                if (selectedPatients.length === 0) selectedPatients = cyChart.$('node[nodeType=\"patient\"]').toArray();\n\n                var counts = selectedPatients.reduce(function(p, c) {\n                    var color = c.data().color;\n                    if (!p.hasOwnProperty(color)) p[color] = 0;\n                    p[color] += 1;\n                    return p;\n                }, {});\n\n                Object.keys(counts).forEach(function(key) {\n                    angular.element(\"#legend-\" + key.substr(1)).text(\" (\" + this[key] + \")\");\n                }, counts);\n\n            };\n\n            var setPatientInfo = function(e) {\n\n                $scope.$apply(function() {\n                    if (e.type == \"mouseout\") {\n                        //angular.element(\"#cohortmenu-legand\").html(\"\");\n\n                    } else {\n                        mouseIsOver = \"patient\";\n                        //angular.element(\"#cohortmenu-legand\").html(e.cyTarget.id() + patientHtml[e.cyTarget.id()]);\n                    }\n                });\n            };\n\n            var setGeneInfo = function(e) {\n\n                $scope.$apply(function() {\n                    if (e.type == \"mouseout\") {\n                        //angular.element(\"#cohortmenu-legand\").html(\"\");\n                    } else {\n                        mouseIsOver = \"gene\";\n                        //angular.element(\"#cohortmenu-legand\").html(e.cyTarget.id()); // + patientHtml[e.cyTarget.id()]);\n                    }\n                });\n            };\n\n            var _stopLength = 0; // Hack - need to fix\n            var skipCohortRefresh = false;\n\n            function onCohortChange(cohort) {\n                if (cohort.sampleIds.length == _stopLength) return; // Preform more robust check\n                skipCohortRefresh = true;\n                _stopLength = cohort.sampleIds.length;\n                cyChart.startBatch();\n                cyChart.$('node[nodeType=\"patient\"]:selected').deselect();\n                cyChart.$('node[nodeType=\"patient\"]').forEach(function(node) {\n                    if (cohort.sampleIds.indexOf(node.id()) != -1) node.select();\n                });\n                cyChart.endBatch();\n            }\n            osApi.onCohortChange.add(onCohortChange);\n\n            function setPatientCohort() {\n                var cohort = cyChart.$('node[nodeType=\"patient\"]:selected');\n                if (cohort.length == _stopLength) return; // Preform more robust check\n                _stopLength = cohort.length;\n                if (!skipCohortRefresh)\n                    osApi.setCohort(\n                        cohort.map(function(p) {\n                            return p.data().id;\n                        }),\n                        \"Markers + Patients\",\n                        osApi.SAMPLE\n                    );\n                skipCohortRefresh = false;\n            }\n\n            function setGeneCohort() {\n\n            }\n\n            // Initialize Commands\n            $scope.$watch(\"vm.optCommandMode\", function() {\n                signal.clear();\n                cyChart.$('node').unselect();\n                cyChart.$('edge[edgeType=\"cn\"]').remove();\n                switch (vm.optCommandMode.name) {\n                    case \"Sequential\":\n                        //try{ cyChart.$('node').unselect(); setOptions(createOptions()); }catch(e){}\n                        vm.cmd = function(cmd) {\n                            var opts;\n                            switch (cmd) {\n                                case \"ShowSelectedEdges\":\n                                    var nodes = cyChart.$('node[nodeType=\"patient\"]:selected, node[nodeType=\"gene\"]:selected');\n                                    if (nodes.length === 0) return;\n                                    nodes.neighborhood(\"edge\").remove();\n                                    opts = createOptions(cmd);\n                                    setOptions(opts);\n                                    break;\n                                case \"HideAllEdges\":\n                                    cyChart.$('edge[edgeType=\"cn\"]').remove();\n                                    break;\n                                case \"HideSelectedEdges\":\n                                    cyChart.$('node[nodeType=\"patient\"]:selected, node[nodeType=\"gene\"]:selected')\n                                        .neighborhood(\"edge\").remove();\n                                    break;\n                                case \"HideUnselectedEdges\":\n                                    cyChart.$('node[nodeType=\"patient\"]:unselected')\n                                        .neighborhood(\"edge\").remove();\n                                    break;\n                                case \"SelectConnected\":\n                                    cyChart.startBatch();\n                                    cyChart.$('node:selected')\n                                        .neighborhood(\"node\")\n                                        .forEach(function(ele) {\n                                            ele.select();\n                                        });\n                                    cyChart.endBatch();\n                                    break;\n                                case \"SelectInverse\":\n                                    cyChart.startBatch();\n                                    cyChart.$('node').forEach(function(ele) {\n                                        ele[ele._private.selected ? \"deselect\" : \"select\"]();\n                                    });\n                                    cyChart.endBatch();\n                                    break;\n                                case \"HideUnselectedNodes\":\n                                    cyChart.startBatch();\n                                    cyChart.$('node[nodeType=\"patient\"]:unselected')\n                                        .forEach(function(item) {\n                                            item.style({\n                                                display: 'none'\n                                            });\n                                        });\n                                    cyChart.endBatch();\n                                    break;\n                                case \"ShowAllNodes\":\n                                    cyChart.startBatch();\n                                    cyChart.$('node[nodeType=\"patient\"]:hidden')\n                                        .forEach(function(item) {\n                                            item.style({\n                                                display: 'element'\n                                            });\n                                        });\n                                    cyChart.endBatch();\n                                    break;\n                                default:\n                                    opts = createOptions(cmd);\n                                    setOptions(opts);\n                                    break;\n                            }\n                        };\n\n\n                        signal.patients.select.add(updatePatientCounts);\n                        signal.patients.unselect.add(updatePatientCounts);\n                        signal.genes.over.add(setGeneInfo);\n                        signal.genes.out.add(setGeneInfo);\n                        signal.genes.select.add(setGeneCohort);\n                        signal.genes.unselect.add(setGeneCohort);\n                        signal.patients.over.add(setPatientInfo);\n                        signal.patients.out.add(setPatientInfo);\n                        signal.patients.select.add(setPatientCohort);\n                        signal.patients.unselect.add(setPatientCohort);\n                        break;\n\n                    case \"Set\":\n                        var patientsUnselect = function() {\n                            cyChart.$('edge[edgeType=\"cn\"]').remove();\n                            var opts = createOptions();\n                            if (opts.patients.selected.length > 0 || opts.genes.selected.length > 0) setOptions(opts);\n                            setPatientCohort(opts);\n                        };\n                        var patientsSelect = function() {\n                            cyChart.$('edge[edgeType=\"cn\"]').remove();\n                            var opts = createOptions();\n                            setOptions(opts);\n                            setPatientCohort(opts);\n                        };\n                        var genesUnselect = function() {\n                            cyChart.$('edge[edgeType=\"cn\"]').remove();\n                            var opts = createOptions();\n                            if (opts.patients.selected.length > 0 || opts.genes.selected.length > 0) setOptions(opts);\n                            setGeneCohort(opts);\n                        };\n                        var genesSelect = function() {\n                            cyChart.$('edge[edgeType=\"cn\"]').remove();\n                            var opts = createOptions();\n                            setOptions(opts);\n                            setGeneCohort(opts);\n                        };\n\n                        signal.patients.select.add(updatePatientCounts);\n                        signal.patients.unselect.add(updatePatientCounts);\n                        signal.genes.over.add(setGeneInfo);\n                        signal.genes.out.add(setGeneInfo);\n                        signal.patients.over.add(setPatientInfo);\n                        signal.patients.out.add(setPatientInfo);\n                        signal.patients.select.add(patientsSelect);\n                        signal.patients.unselect.add(patientsUnselect);\n                        signal.genes.select.add(genesSelect);\n                        signal.genes.unselect.add(genesUnselect);\n                        break;\n\n                    case \"Ad Hoc\":\n                        var over = function(e) {\n                            cyChart.nodes().unselect();\n                            e.cyTarget.select();\n                            setOptions(createOptions());\n                        };\n                        var out = function(e) {\n                            e.cyTarget.unselect();\n                            cyChart.startBatch();\n                            cyChart.$('edge[edgeType=\"cn\"]').remove();\n                            cyChart.$('node[nodeType=\"gene\"]')\n                                .forEach(function(ele) {\n                                    ele.data(\"color\", \"#0096d5\");\n                                    ele.data(\"sizeBdr\", 1);\n                                    ele.data(\"colorBdr\", \"#FFFFFF\");\n                                });\n                            cyChart.endBatch();\n                        };\n                        signal.genes.over.add(setGeneInfo);\n                        signal.genes.out.add(setGeneInfo);\n                        signal.patients.over.add(setPatientInfo);\n                        signal.patients.out.add(setPatientInfo);\n                        signal.patients.over.add(over);\n                        signal.patients.out.add(out);\n                        signal.genes.over.add(over);\n                        signal.genes.out.add(out);\n                        break;\n                }\n            });\n\n            var onPatientColorChange = function(colors) {\n\n                if (colors === null) return;\n                mpState.setColors(colors);\n\n                vm.showPanelColor = false;\n                vm.legendCaption = colors.name;\n                vm.legendNodes = colors.data;\n\n                if (colors.name == \"None\") {\n                    vm.legendCaption = \"\";\n                    cyChart.startBatch();\n                    cyChart.nodes('node[nodeType=\"patient\"]').forEach(function(node) {\n                        node.data('color', '#0096d5');\n                    });\n                    cyChart.endBatch();\n\n                    return;\n                }\n\n                var degMap = colors.data.reduce(function(p, c) {\n                    for (var i = 0; i < c.values.length; i++) {\n                        p[c.values[i]] = c.color;\n                    }\n                    return p;\n                }, {});\n\n                cyChart.startBatch();\n                cyChart.nodes('node[nodeType=\"patient\"]').forEach(function(node) {\n                    if (degMap.hasOwnProperty(node.id())) {\n                        node.data('color', degMap[node.id()]);\n                    } else {\n                        node.data('color', '#DDD');\n                    }\n\n                });\n                cyChart.endBatch();\n                $timeout(updatePatientCounts);\n            };\n\n            osApi.onPatientColorChange.add(onPatientColorChange);\n\n            // Destroy\n            $scope.$on('$destroy', function() {\n                mpState.save(vm, cyChart);\n                osApi.onPatientColorChange.remove(onPatientColorChange);\n                worker.terminate();\n                signal.clear();\n            });\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osLogin', login);\n\n    /** @ngInject */\n    function login() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/login/login.html',\n            replace: true,\n            controller: LoginController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function LoginController(osApi, $state, $scope, osAuth) {\n\n            var vm = this;\n            vm.networks = osAuth.getAuthSources();\n            vm.login = osAuth.login;\n            vm.logout = osAuth.logout;\n            \n            var loginSuccess = function() {\n                $state.go(\"userdatasource\");\n                // $state.go(\"http://localhost:4200\");\n            };\n    \n            osAuth.onLogin.add(loginSuccess); \n            \n            // Desotroy\n            $scope.$on('$destroy', function() {\n                osAuth.onLogin.remove(loginSuccess);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osLoader', login);\n\n    /** @ngInject */\n    function login() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/loader/loader.html',\n            replace: true\n        };\n\n        return directive;\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osLayoutPanel', layoutPanel);\n\n    /** @ngInject */\n    function layoutPanel() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/layoutPanel/layoutPanel.html',\n            controller: LayoutPanelController,\n            controllerAs: 'vm',\n            bindToController: true,\n            scope: {\n                close: \"&\"\n            }\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function LayoutPanelController(osApi, d3, _) {\n\n            // Properties\n            var vm = this;\n            vm.showPanelColorRna = false;\n            vm.colorScales = [{ name: \"Quantile\" }, { name: \"Quantize\" }];\n            vm.colorScale = vm.colorScales[0];\n            vm.colorBins = [2, 3, 4, 5, 6, 7, 8].map(function(v) { return { name: v + \" Bins\", value: v }; });\n            vm.colorBin = vm.colorBins[2];\n            vm.colorOptions = osApi.getDataSource().colors;\n            if (angular.isDefined(vm.colorOptions)) {\n                if (vm.colorOptions.length !== 0) vm.colorOption = vm.colorOptions[0];\n            }\n\n\n            var tbl = osApi.getDataSource().category.filter(function(v) {\n                return v.type == 'color';\n            })[0].collection;\n\n            osApi.query(tbl, {\n                type: 'color',\n                dataset: osApi.getDataSource().dataset,\n                $fields: ['name', 'subtype']\n            }).then(function(v) {\n\n                var data = v.data.reduce(function(p, c) {\n                    if (!p.hasOwnProperty(c.subtype)) p[c.subtype] = [];\n                    p[c.subtype].push(c);\n                    return p;\n                }, {});\n\n                vm.optPatientColors = Object.keys(data).map(function(key) {\n                    return {\n                        name: key,\n                        values: this[key].sort(function(a, b) {\n                            if (a.name > b.name) return 1;\n                            if (a.name < b.name) return -1;\n                            return 0;\n                        })\n                    };\n                }, data);\n\n            });\n\n\n\n            vm.setColor = function(item) {\n                osApi.setBusy(true);\n                vm.close();\n                if (item.name == \"None\") {\n                    osApi.setPatientColor({\n                        \"dataset\": osApi.getDataSource().dataset,\n                        \"type\": \"color\",\n                        \"name\": \"None\",\n                        \"data\": [],\n                        show: true\n                    });\n                    return;\n                }\n\n                osApi.query(tbl, {\n                    type: 'color',\n                    dataset: osApi.getDataSource().dataset,\n                    name: item.name\n                }).then(function(v) {\n                    var data = v.data[0];\n                    data.data = data.data.map(function(v) {\n                        var name = v.name.toLowerCase().trim();\n                        if (name === \"\" || name == \"null\" || name == \"undefined\") {\n                            v.name = \"Null\";\n                            v.color = \"#DDDDDD\";\n                        }\n                        v.id = \"legend-\" + v.color.substr(1);\n                        return v;\n                    }).sort(function(a, b) {\n                        var aname = (isNaN(a.name)) ? a.name : parseInt(a.name);\n                        var bname = (isNaN(b.name)) ? b.name : parseInt(b.name);\n                        if (aname < bname) return -1;\n                        if (aname > bname) return 1;\n                        if (a.name == \"Null\") return 1;\n                        if (b.name == \"Null\") return -1;\n                        return 0;\n                    });\n\n                    osApi.setPatientColor(v.data[0]);\n                    osApi.setBusy(false);\n                    vm.close();\n                });\n            };\n\n\n            vm.setGeneColor = function() {\n                var genes = (\"+\" + vm.geneColor.replace(/\\s/g, '').toUpperCase()).match(/[-+]\\w*/gi).map(function(v) {\n                    return {\n                        op: v.substr(0, 1),\n                        gene: v.substr(1).toLowerCase(),\n                        message: \"\",\n                        status: \"\"\n                    };\n                });\n                osApi.setBusy(true);\n                osApi.query(\"lookup-genes\", { symbols: { $in: genes.map(function(v) { return v.gene; }) } }).then(function(result) {\n                    vm.close();\n                    genes.map(function(v) {\n                        var gene = this.filter(function(s) {\n                            return (s.symbols.indexOf(this) != -1);\n                        }, v.gene);\n\n                        if (gene.length === 0) {\n                            v.message = v.gene.toUpperCase();\n                            v.status = \"Removed\";\n                        } else if (gene.length > 1) {\n                            v.message = v.gene.toUpperCase() + \" -> \" + gene[0].hugo.toUpperCase();\n                            v.status = \"Converted\";\n                        } else if (gene.length == 1) {\n                            if (v.gene != gene[0].hugo) {\n                                v.message = v.gene.toUpperCase() + \" -> \" + gene[0].hugo.toUpperCase();\n                                v.status = \"Converted\";\n                            }\n                        }\n                    }, result.data);\n\n                    var msgs = _.sortBy(\n                        genes.filter(function(v) { return v.status !== \"\"; }), \"length\");\n\n                    var types = _.groupBy(msgs, function(gene) { return gene.status; });\n\n                    var msg = \"\";\n\n                    if (angular.isDefined(types.Removed) && types.Removed.length > 0) {\n                        msg += \"Removed: \" + types.Removed.map(function(v) { return v.message + \" - \"; });\n                    }\n                    if (msg.length > 0) msg = msg.substr(0, msg.length - 2) + \"\\r\\n\";\n                    if (angular.isDefined(types.Converted) && types.Converted.length > 0) {\n                        msg += \"Converted: \" + types.Converted.map(function(v) { return v.message + \"\\r\\n\"; });\n                    }\n                    if (msg.trim().length > 0) alert(msg);\n                    var geneset = genes.filter(function(v) { return v.status != \"Removed\"; }).map(function(v) {\n                        return v.gene.toUpperCase();\n                    });\n                    osApi.query(vm.colorOption.collection, {\n                        gene: {\n                            '$in': geneset\n                        }\n                    }).then(function(results) {\n\n                        if (results.data.length > 0) {\n                            var data;\n                            if (results.data.length == 1)\n                                data = results.data[0];\n                            else {\n                                data = {};\n                                data.patients = results.data.reduce(function(p, c) {\n                                    var fn = p.lookup[c.gene];\n                                    for (var i = 0; i < p.pids.length; i++) {\n                                        var pid = p.pids[i];\n                                        var iv = p.output.hasOwnProperty(pid) ? p.output[pid] : 0;\n                                        if (fn === \"+\") p.output[pid] = iv + c.patients[pid];\n                                        if (fn === \"-\") p.output[pid] = iv - c.patients[pid];\n                                    }\n                                    return p;\n                                }, {\n                                    pids: Object.keys(results.data[0].patients),\n                                    lookup: genes.reduce(function(p, c) {\n                                        p[c.gene] = c.op;\n                                        return p;\n                                    }, {}),\n                                    output: {}\n                                }).output;\n\n                                var range = Object.keys(data.patients).reduce(function(p, c) {\n                                    p.min = Math.min(p.min, p.values[c]);\n                                    p.max = Math.max(p.min, p.values[c]);\n                                    return p;\n                                }, {\n                                    values: data.patients,\n                                    min: Infinity,\n                                    max: -Infinity\n                                });\n                                data.min = range.min;\n                                data.max = range.max;\n                            }\n\n                            // Color Patients\n                            var colors = [\"#9d1cb2\", \"#00a7f7\", \"#3d4eb8\", \"#ff9900\", \"#f7412d\", \"#795548\", \"#E91E63\", \"#673AB7\"];\n                            var values = colors.splice(0, vm.colorBin.value);\n\n                            var scale = (vm.colorScale.name == \"Quantile\") ? d3.scaleQuantile() : d3.scaleQuantize();\n\n\n\n                            // Combine Colors + Scale Into Name + Value\n                            var labels;\n                            if (vm.colorScale.name == \"Quantile\") {\n                                scale.domain(Object.keys(data).map(function(key) { return data[key]; }, { data: data })).range(values);\n                                labels = scale.quantiles().map(function(v) { return parseFloat(v).toFixed(3); });\n                                labels.unshift(\"\");\n                                labels = labels.map(function(c, i, a) {\n                                    if (i === 0) { return \"-\\u221e \\u2194 \" + a[1]; } else if (i == a.length - 1) {\n                                        return a[i] + \" \\u2194 +\\u221e\";\n                                    }\n                                    return a[i] + \" \\u2194 \" + a[i + 1];\n                                });\n                                values = _.zip(values, labels).map(function(v) { return { color: v[0], name: v[1] }; });\n                            } else {\n                                scale\n                                    .domain([data.min, data.max])\n                                    .range(values);\n                                labels = scale.ticks(values.length).map(function(v) { return \"~\" + parseFloat(v).toFixed(2); });\n                                values = _.zip(values, labels).map(function(v) { return { color: v[0], name: v[1] }; });\n                            }\n                            data = Object.keys(data.patients).map(function(id) {\n                                    return {\n                                        id: id,\n                                        color: this.scale(this.patients[id]),\n                                        value: this.patients[id]\n                                    };\n                                }, {\n                                    patients: data.patients,\n                                    scale: scale\n                                })\n                                .reduce(function(p, c) {\n                                    if (!p.hasOwnProperty(c.color)) p[c.color] = [];\n                                    p[c.color].push(c.id);\n                                    return p;\n                                }, {});\n\n                            data = Object.keys(data).map(function(key) {\n                                return {\n                                    color: key,\n                                    name: this.names.filter(function(f) {\n                                        return f.color == this.color;\n                                    }, {\n                                        color: key\n                                    })[0].name,\n                                    values: this.data[key]\n                                };\n                            }, {\n                                data: data,\n                                names: values\n                            });\n\n                            data = data.sort(function(a, b) {\n                                if (a.name.indexOf(\"-\\u221e\") != -1) return -1;\n                                if (b.name.indexOf(\"-\\u221e\") != -1) return 1;\n                                if (a.name.indexOf(\"+\\u221e\") != -1) return 1;\n                                if (b.name.indexOf(\"+\\u221e\") != -1) return -1;\n                                if (a.name < b.name) return -1;\n                                if (a.name > b.name) return 1;\n                                return 0;\n                            });\n                            data.push({\n                                color: '#DDD',\n                                name: 'Null',\n                                values: []\n                            });\n\n                            colors = {\n                                dataset: osApi.getDataSource().dataset,\n                                type: 'color',\n                                name: genes.reduce(function(p, c) {\n                                    p += c.op + c.gene + \" \";\n                                    return p;\n                                }, \"\"),\n                                data: data\n                            };\n                            osApi.setPatientColor(colors);\n                        }\n                        osApi.setBusy(false);\n                    });\n                });\n\n            };\n        }\n    }\n})();\n(function() {\n    'use strict';\n    angular\n        .module('oncoscape')\n        .directive('osLanding', landing);\n\n    /** @ngInject */\n    function landing() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/landing/landing.html',\n            replace: true,\n            controller: LandingController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function LandingController($state) {\n\n            angular.element(\".marquee-x\").marquee({\n                particlesNumber: 79,\n                color: '#1396de',\n                particle: {\n                    speed: 39\n                }\n            });\n\n            var vm = this;\n            vm.login = function() {\n                $state.go(\"login\");\n            };\n\n            vm.getStarted = function() {\n                $state.go(\"userdatasource\");\n            };\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osImportPanel', importPanel);\n\n    /** @ngInject */\n    function importPanel() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/importpanel/importpanel.html',\n            controller: ImportPanelController,\n            controllerAs: 'vm',\n            bindToController: true,\n            scope: {\n                close: \"&\"\n            }\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function ImportPanelController(osApi, d3, _) {\n\n            // Properties\n            var vm = this;\n            vm.genesets = osApi.getGenesets();\n            vm.showGeneImport = true;\n           \n            // Import Geneset Command \n            vm.importGeneIds = \"\";\n            vm.importGeneset = function() {\n                var ids = vm.importGeneIds.split(\",\").map(function(v) { return v.trim(); });\n                osApi.importGeneIds(ids, vm.importGenesetName);\n                vm.importGeneIds = \"\";\n                vm.importGenesetName = \"\";\n                vm.showGeneImport = false;\n            };\n\n            vm.setGenesetList = function(geneset) {\n                geneset.show=true\n                osApi.setGeneset(geneset);\n            };\n            vm.addGenesetList = function() {\n                osApi.saveGeneset();\n            };\n           \n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osHelp', help);\n\n    /** @ngInject */\n    function help() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/help/help.html',\n            controller: HelpController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function HelpController() {\n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osHeatmap', heatmap);\n\n    /** @ngInject */\n    function heatmap() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/heatmap/heatmap.html',\n            controller: HeatmapController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function HeatmapController(d3, osApi, $state, $timeout, $scope, $stateParams, $window, _) {\n\n            // view Model\n            var vm = this;\n            vm.datasource = osApi.getDataSource();\n            vm.rowLabels = vm.colLabels = vm.gridlines = false;\n            vm.rowDendrogram = vm.colDendrogram = true;\n            vm.colorSchemes = [\n                { name: 'Blues', value: [\"#303f9f\", \"#03a9f4\"] },\n                { name: 'Black / Blue', value: [\"#000000\", \"#1d85cb\"] },\n                { name: 'Black / Red', value: [\"#000000\", \"#D32F2F\"] },\n                { name: 'Red / Yellow', value: [\"#D32F2F\", \"#FFEB3B\"] }\n            ]\n            vm.colorScheme = vm.colorSchemes[0]\n            vm.scales = [{ name: 'None' }, { name: 'Row' }, { name: 'Column' }]\n            vm.scale = vm.scales[2];\n            vm.dendrogramClusters = [\n                { name: 'One', value: 1 },\n                { name: 'Two', value: 2 },\n                { name: 'Three', value: 3 },\n                { name: 'Four', value: 4 },\n                { name: 'Five', value: 5 },\n                { name: 'Six', value: 6 },\n                { name: 'Seven', value: 7 },\n                { name: 'Eight', value: 8 },\n                { name: 'Nine', value: 9 },\n                { name: 'Ten', value: 10 }\n            ];\n            vm.dendrogramCluster = vm.dendrogramClusters[6];\n\n            // Element References\n            var elChart = d3.select(\"#heatmap-chart\");\n            var colDend = elChart.append(\"svg\").classed(\"dendrogram colDend\", true);\n            //var colDendObj;\n            var rowDend = elChart.append(\"svg\").classed(\"dendrogram rowDend\", true);\n            //var rowDendObj;\n            var colmap = elChart.append(\"svg\").classed(\"colormap\", true);\n            //var colmapObj;\n            var xaxis = elChart.append(\"svg\").classed(\"axis xaxis\", true);\n            var yaxis = elChart.append(\"svg\").classed(\"axis yaxis\", true);\n\n            // Load Inital Data\n            var args;\n            var data;\n\n\n            function axis(svg, data, width, height, x, y, rotated) {\n                svg.select(\"g\").remove();\n                if (rotated ? !vm.colLabels : !vm.rowLabels) return;\n\n                svg\n                    .attr(\"width\", width).attr(\"height\", height)\n                    .style(\"position\", \"absolute\")\n                    .style(\"left\", x)\n                    .style(\"top\", y);\n\n                var g = svg.append(\"g\");\n                var yScale = d3.scaleLinear().domain([0, data.length]).range([0, rotated ? width : height]);\n\n                var textAnchor = (rotated) ? \"start\" : \"start\";\n                var textX = (rotated) ? 20 : 10;\n                var labels = g.selectAll('label').data(data);\n\n                labels\n                    .enter().append(\"text\")\n                    .attr(rotated ? \"x\" : \"y\", function(d, i) { return yScale(i + .8); })\n                    .attr(rotated ? \"y\" : \"x\", textX)\n                    .attr(\"text-anchor\", textAnchor)\n                    .attr(\"font-size\", \"12px\")\n                    .text(function(d) { return d; });\n            }\n\n            function dendrogram(svg, data, width, height, xPos, yPos, rotated) {\n\n                svg.select(\"g\").remove();\n                if (rotated ? !vm.colDendrogram : !vm.rowDendrogram) return;\n\n                var hierarchy = d3.hierarchy(data);\n\n                var cluster = d3.cluster()\n                    .separation(function() { return 1; })\n                    .size((rotated) ? [width, height] : [height, width]);\n\n                var x = d3.scaleLinear()\n                    .domain([0, (rotated) ? height : width])\n                    .range([0, (rotated) ? height : width]);\n\n                var y = d3.scaleLinear()\n                    .domain([0, data.height])\n                    .range([(rotated) ? height : width, 0]);\n\n                var c = cluster(hierarchy);\n\n                var links = c.links().map(function(l) {\n                    return {\n                        source: { x: l.source.x, y: l.source.data.height },\n                        target: { x: l.target.x, y: l.target.data.height },\n                        edgePar: l.target.data.edgePar\n                    };\n                });\n\n                var dendrG = svg\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .style(\"position\", \"absolute\")\n                    .style(\"left\", xPos)\n                    .style(\"top\", yPos)\n                    .append(\"g\")\n\n                dendrG.append(\"rect\")\n                    .attr(\"width\", (rotated) ? height : width)\n                    .attr(\"height\", (rotated) ? width : height)\n                    .style(\"fill\", \"#FFF\")\n\n                if (rotated) {\n                    var transform = \"rotate(90,\" + height / 2 + \",\" + height / 2 + \") translate(0,\" + (-width + height) + \")\"\n                    dendrG.attr(\"transform\", transform);\n                }\n\n                var lines = dendrG.selectAll(\"polyline\").data(links);\n                lines\n                    .enter().append(\"polyline\")\n                    .attr(\"class\", \"denolink\")\n                    .attr(\"points\", function(d) {\n                        return y(d.source.y) + \",\" + d.source.x + \" \" +\n                            y(d.source.y) + \",\" + d.target.x + \" \" +\n                            y(d.target.y) + \",\" + d.target.x;\n                    })\n                    .style(\"stroke\", function(d) {\n                        return d.edgePar.col;\n                    });\n\n                return {\n                    g: dendrG,\n                    scaleY: y,\n                    scaleX: x,\n                    rotated: rotated,\n                    data: links\n                }\n            }\n\n            function heatmap(svg, data, width, height, x, y) {\n\n\n                svg.select(\"g\").remove();\n                svg.attr(\"width\", width).attr(\"height\", height).style(\"left\", x).style(\"top\", y).style(\"position\", \"absolute\");\n\n                var map = svg.append(\"g\").attr(\"width\", width).attr(\"height\", height);\n                var brush = svg.append(\"g\").attr(\"width\", width).attr(\"height\", height).attr(\"class\", \"brush\");\n\n                var maxValue = Math.max.apply(null, data.data);\n                var minValue = Math.min.apply(null, data.data);\n\n                var color = d3.scaleLinear().domain([minValue, maxValue]).range(vm.colorScheme.value);\n\n                var cols = data.dim[0];\n                var rows = data.dim[1];\n\n                var xScale = d3.scaleLinear().domain([0, cols]).range([0, width]);\n                var yScale = d3.scaleLinear().domain([0, rows]).range([0, height]);\n\n\n                var grid = (vm.gridlines) ? 1 : -1;\n\n                function brushend() {\n\n\n                    if (!d3.event.sourceEvent) return; // Only transition after input.\n                    if (!d3.event.selection) return; // Ignore empty selections.\n                    //var colBounds = \n                    d3.event.selection.map(function(v) { return this.invert(v[0], v[1]); }, xScale).map(Math.round);\n                    //var span = colBounds[1] - colBounds[0];\n                    //var start = colBounds[0];\n                    //var ids = data.cols.splice(start, span);\n\n                    var coords = d3.event.selection;\n                    //coords[0][0] = colBounds[0] * width;\n                    coords[0][1] = 0;\n                    //coords[1][0] = colBounds[1] * width;\n                    coords[1][1] = height;\n\n                    d3.select(this)\n                        .transition()\n                        .call(d3.event.target.move, coords);\n\n\n                }\n                brush.call(\n                    d3.brush().on(\"end\", brushend)\n                )\n\n                var boxW = xScale(1) - grid;\n                var boxH = yScale(1) - grid;\n\n                var boxes = map.selectAll('rect').data(data.data);\n                boxes\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"box\")\n                    .attr(\"colIndex\", function(d, i) { return i % cols; })\n                    .attr(\"rowIndex\", function(d, i) { return Math.floor(i / cols); })\n                    .attr(\"x\", function(d, i) { return xScale(i % cols); })\n                    .attr(\"y\", function(d, i) { return yScale(i % rows); })\n                    .attr(\"width\", boxW)\n                    .attr(\"height\", boxH)\n                    .attr(\"fill\", function(d) { return color(d); });\n\n                return {\n                    g: map,\n                    scaleY: yScale,\n                    scaleX: xScale,\n                    data: data.data,\n                    cols: cols,\n                    rows: rows,\n                    boxW: boxW,\n                    boxH: boxH\n                }\n            }\n\n            function zoom() {\n\n                /*\n                                var xZoomBehavior = d3.zoom().scaleExtent([1, 5]);\n                                var yZoomBehavior = d3.zoom().scaleExtent([1, 5]);\n                                colDendObj.g.call(xZoomBehavior);\n                                rowDendObj.g.call(yZoomBehavior);\n                                xZoomBehavior.on('zoom', function() {\n\n                                    var map = colmapObj;\n                                    var mapX = d3.event.transform.rescaleY(map.scaleX);\n\n                                    var boxW = map.scaleX(1);\n\n                                    map.g.selectAll('.box').data(map.data)\n                                        .attr(\"x\", function(d, i) { return mapX(i % map.cols); })\n                                        .attr(\"y\", function(d, i) { return map.scaleY(i % map.rows); })\n                                        .attr(\"width\", boxW)\n\n                                    var col = colDendObj;\n                                    var colY = col.scaleY;\n                                    var colX = d3.event.transform.rescaleY(col.scaleX);\n                                    \n                                    col.g.selectAll(\"polyline\")\n                                        .data(col.data)\n                                        .attr(\"points\", function(d){\n                                            return colY(d.source.y) + \",\" + colX(d.source.x) + \" \" +\n                                            colY(d.source.y)+ \",\" + colX(d.target.x) + \" \" +\n                                            colY(d.target.y)+ \",\" + colX(d.target.x);\n                                        });\n                                });\n                                yZoomBehavior.on('zoom', function() {\n\n                                    var row = rowDendObj;\n                                    var rowY = row.scaleY;\n                                    var rowX = d3.event.transform.rescaleY(row.scaleX);\n                                    \n                                    var map = colmapObj;\n                                    var mapY = d3.event.transform.rescaleX(map.scaleY);\n\n                                    var boxW = scaleX(1);\n                                    var boxH = yScale(1)-grid;\n\n                                    map.g.selectAll('.box').data(map.data)\n                                        .attr(\"x\", function(d, i) { return map.scaleY(i % map.cols); })\n                                        .attr(\"y\", function(d, i) { return mapY(i % map.rows); })\n                                        .attr(\"width\", boxW)\n                                    \n                                    row.g.selectAll(\"polyline\")\n                                        .data(row.data)\n                                        .attr(\"points\", function(d){\n                                            return rowY(d.source.y) + \",\" + rowX(d.source.x) + \" \" +\n                                            rowY(d.source.y)+ \",\" + rowX(d.target.x) + \" \" +\n                                            rowY(d.target.y)+ \",\" + rowX(d.target.x);\n                                        });\n                                });\n                */\n            }\n\n            osApi.setBusy(true);\n            vm.loadData = function() {\n                osApi.query(\"brca_psi_bradleylab_miso\", {\n                    '$limit': 100\n                }).then(function(response) {\n                    args = {\n                        data: response.data.map(function(v) {\n                            Object.keys(v.patients).forEach(function(key) {\n                                if (this[key] == null) this[key] = 0;\n                            }, v.patients);\n                            return v.patients;\n                        })\n                    };\n                    vm.loadHeatmap();\n                });\n            };\n            vm.loadHeatmap = function() {\n                osApi.setBusy(true);\n                rowDend.select(\"g\").remove();\n                colDend.select(\"g\").remove();\n                colmap.select(\"g\").remove();\n                args.scale = vm.scale.name.toLowerCase();\n                args.kcol = args.krow = vm.dendrogramCluster.value;\n                osApi.getCpuApi().getHeatmap(args).then(function(v) {\n                    data = angular.fromJson(v);\n                    vm.draw();\n                    osApi.setBusy(false);\n                });\n            }\n            vm.draw = function() {\n\n                var layout = osApi.getLayout();\n                var width = $window.innerWidth - layout.left - layout.right - 40;\n                var height = $window.innerHeight - 160; //10\n                var hmWidth = width - ((vm.rowLabels) ? 160 : 0) - ((vm.rowDendrogram) ? 80 : 0);\n                var hmHeight = height - ((vm.colLabels) ? 160 : 0) - ((vm.colDendrogram) ? 80 : 0);\n                //colmapObj = \n                heatmap(colmap, data.matrix,\n                    hmWidth,\n                    hmHeight,\n                    (vm.rowDendrogram ? 80 : 0) + layout.left + 20,\n                    (vm.colDendrogram ? 80 : 0));\n\n                //rowDendObj = \n                dendrogram(rowDend, data.rows,\n                    80, hmHeight,\n                    layout.left + 20, (vm.colDendrogram ? 80 : 0), false);\n\n                //colDendObj = \n                dendrogram(colDend, data.cols,\n                    hmWidth, 80,\n                    (vm.rowDendrogram ? 80 : 0) + layout.left + 20, 0, true);\n\n                axis(xaxis,\n                    data.matrix.rows,\n                    160, hmHeight, hmWidth + (vm.rowDendrogram ? 80 : 0) + layout.left + 20, (vm.colDendrogram ? 80 : 0), false);\n\n                axis(yaxis, data.matrix.cols,\n                    hmWidth, 160, (vm.rowDendrogram ? 80 : 0) + layout.left + 20, hmHeight + (vm.colDendrogram ? 80 : 0), true);\n\n                zoom();\n            };\n\n            vm.loadData();\n\n            osApi.onResize.add(vm.draw);\n            angular.element($window).bind('resize', _.debounce(vm.draw, 300));\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osHeader', header);\n\n    /** @ngInject */\n    function header() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/header/header.html',\n            scope: {},\n            controller: HeaderController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function HeaderController(osApi, osAuth, $stateParams, $state, $window) {\n\n            // View Model\n            var vm = this;\n            vm.showImport = false;\n            vm.showTools = false;\n            vm.showDatasets = false;\n            vm.datasources = [];\n            vm.tools = [];\n            vm.cohorts = [];\n          \n            \n\n            // State Management\n            osApi.onNavChange.add(function(state) {\n                switch (state) {\n                    case \"TOOLS\":\n                        vm.showTools = false;\n                        vm.showDatasets = false;\n                        break;\n                    case \"TOOL\":\n                        vm.showTools = true;\n                        vm.showDatasets = true;\n                        vm.datasources = osApi.getDataSources();\n                        vm.tools = osApi.getTools();\n                        vm.cohorts = osApi.getCohorts();\n                        \n                        break;\n                    default:\n                        vm.showTools = false;\n                        vm.showDatasets = false;\n                        break;\n                }\n            });\n\n            // Cohort Commands\n            vm.addPatientCohort = function() {\n                osApi.saveCohort();\n            };\n           \n\n            // State Command\n            vm.setPatientCohort = function(cohort) {\n                osApi.setCohort(cohort);\n            };\n            \n\n            // Import Cohorts Command \n            vm.importIds = \"\";\n            vm.importCohort = function() {\n                var ids = vm.importIds.split(\",\").map(function(v) { return v.trim(); });\n                osApi.importIds(ids, vm.importName);\n                vm.importIds = \"\";\n                vm.importName = \"\";\n                vm.showImport = false;\n            };\n\n            \n            osApi.onshowGenesetImportChange.add(function(show) {\n                \n                vm.showImport = show\n            });\n\n            var updateUser = function(user){\n                vm.user=osAuth.getUser()\n            }\n            osAuth.onLogin.add(updateUser); \n            osAuth.onLogout.add(updateUser); \n\n            vm.login = function() {\n                var networks = osAuth.getAuthSources();\n                osAuth.login(networks[1]);\n\n                //$state.go(\"login\");\n            };\n            vm.logout = function() {\n\n                \n                osAuth.logout()\n                localStorage.clear();\n                //$window.reload(true);\n                $window.location.href = \"#\";\n                //$window.reload();\n                \n            };\n            vm.showHelp = function() {\n                $window.open(\"\\\\documentation\" + $state.current.help.toString());\n            };\n\n            // Update Cohorts When Datasource Changes\n            osApi.onCohortsChange.add(function() {\n                vm.cohorts = osApi.getCohorts();\n            });\n\n            // Load Dataset Command - Navigation\n            vm.showDatasources = function() {\n                $state.go(\"userdatasource\");\n\n            };\n\n            // Load Tool Command - Navigation\n            vm.loadTool = function(tool) {\n                $state.go(tool, { datasource: osApi.getDataSource().dataset });\n                angular.element('.navbar-collapse').collapse('hide');\n            };\n\n\n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osGeneMenu', geneMenu);\n\n    /** @ngInject */\n    function geneMenu() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/genemenu/genemenu.html',\n            controller: GeneMenuController,\n            controllerAs: 'vm',\n            scope: {},\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function GeneMenuController(osApi, $state, $scope, $sce, $timeout, $rootScope, $filter, d3) {\n\n\n            // View Model\n            var vm = this;\n            vm.genesets = osApi.getGenesets();\n            vm.geneset = osApi.getGeneset();\n            vm.importGeneIds = \"\";\n            vm.importGenesetName = \"\"\n            vm.showGeneImport = false;\n            \n            vm.genesetSummary = \"\";\n\n            // Import to Active List\n            vm.import = function(){\n                osApi.showGenesetImport(true)\n            }\n            vm.importGeneset = function() {\n                var ids = vm.importGeneIds.split(\",\").map(function(v) { return v.trim(); });\n                osApi.importGeneIds(ids, vm.importGenesetName);\n                vm.importGeneIds = \"\";\n                vm.importGenesetName = \"\";\n                vm.showGeneImport = false;\n            };\n            // vm.hideModal = function(){\n            //     angular.element('#modal_geneImport').modal(false);\n            // }\n\n            //Update Geneset Availability\n            vm.setGeneset = function(geneset) {\n                if (angular.isString(geneset)) {\n                    osApi.setGeneset([], osApi.ALLGENES, osApi.SYMBOL);\n                } else {\n                    osApi.setGeneset(geneset);\n                }\n            };\n            vm.saveGeneset = function() {\n                osApi.saveGeneset();\n            };\n            vm.updateGeneset = function() {\n                if (vm.geneset.type == \"UNSAVED\") {\n                    osApi.saveGeneset(vm.geneset);\n                } else {\n                    osApi.deleteGeneset(vm.geneset);\n                }\n            };\n            vm.setGenesetList = function(geneset) {\n                geneset.show=true\n                osApi.setGeneset(geneset);\n            };\n\n            // Gene Service Integration\n            osApi.onGenesetsChange.add(function(genesets) {\n                vm.genesets = genesets;\n            });\n            osApi.onGenesetChange.add(function(geneset) {\n\n                var website = \"\"; var genecounts = \"\";\n                if(geneset.url.length >0) website = \"  <a href='\"+geneset.url+\"' target='_blank'> [ref]</a>\"\n                if(geneset.geneIds !=0){\n                    genecounts = \"<br/><br/>Contains:<br/>\" + \n                    $filter('number')(geneset.geneIds.length) + \" Markers<br /> \" +\n                    $filter('number')(geneset.hugoIds.length) + \" Hugo Symbols (###TODO) <br />\";    \n                } \n                var summary =   geneset.desc +website + genecounts;\n                //$filter('number')(toolInfo.numGenes) + \" Genes In Current Tool Showing<br />\" +\n                //$filter('number')(toolInfo.numSymbols) + \" Hugo Symbols In Current Tool Showing<br />\";\n\n                vm.genesetSummary = $sce.trustAsHtml(summary);\n\n                if (angular.isUndefined(geneset)) return;\n                $timeout(function() {\n                    vm.geneset = geneset;\n                });\n             \n            });\n\n        }\n    }\n\n})();\n(function() {\n  'use strict';\n\n  angular\n      .module('oncoscape')\n      .directive('osGenedashboard', genedashboard);\n\n  /** @ngInject */\n  function genedashboard() {\n\n    var directive = {\n        restrict: 'E',\n        templateUrl: 'app/components/genedashboard/genedashboard.html',\n        controller: GenedashboardController,\n        controllerAs: 'vm',\n        bindToController: true\n    };\n\n    return directive;\n\n    /** @ngInject */\n    function GenedashboardController(osApi, $state, $timeout, $window, d3, $scope) {\n\n      var vm = this;\n      osApi.setBusy(false)\n      vm.datasource = osApi.getDataSource();\n\n      vm.range = {up: 100000, down: 100000} // 100 KB\n      \n      var samples = osApi.getCohort().sampleIds;\n      //samples = [\"TCGA-OL-A66H-01\", \"TCGA-3C-AALK-01\", \"TCGA-AR-A1AH-01\", \"TCGA-AC-A5EH-01\", \"TCGA-EW-A2FW-01\"]\n\n      // Elements\n      var d3Chart = d3.select(\"#genedashboard-chart\").append(\"svg\");\n      var d3Points = d3Chart.append(\"g\");\n      var d3vLines = d3Chart.append(\"g\");\n      var genes, circles;\n\n      var acceptableDatatypes = [\"expr\", \"cnv\", \"mut01\", \"meth_thd\", \"meth\", \"cnv_thd\"];\n\n      var elTip = d3.tip().attr(\"class\", \"tip\").offset([-8, 0]).html(function(d) {\n        return \"Gene: \"+d.gene+\"<br/>Sample: \" + d.id + \"<br>Value: \" + d[2];\n      });\n      d3Chart.call(elTip);\n\n      // Properties\n      var scaleX, scaleY, axisY;\n      var data, minMax;\n      var width, height;\n\n      // Utility Functions\n      function setSelected() {\n        var selectedIds = cohort.sampleIds;\n        if(typeof selectedIds != \"undefined\"){\n           d3Points.selectAll(\"circle\").classed(\"coord-node-selected\", function() {\n                return (selectedIds.indexOf(this.__data__.id) >= 0);\n            });\n        }\n\n    }\n      \n    var lasso_start = function() {\n\n        lasso.items()\n            .attr(\"r\", 3.5) // reset size\n            .classed(\"not_possible\", true)\n            .classed(\"selected\", false);\n    };\n\n    var lasso_draw = function() {\n\n        // Style the possible dots\n        lasso.possibleItems()\n            .classed(\"not_possible\", false)\n            .classed(\"possible\", true);\n\n        // Style the not possible dot\n        lasso.notPossibleItems()\n            .classed(\"not_possible\", true)\n            .classed(\"possible\", false);\n    };\n\n    var lasso_end = function() {\n\n      // Reset the color of all dots\n        lasso.items()\n            .classed(\"not_possible\", false)\n            .classed(\"possible\", false);\n\n        var ids = lasso.selectedItems().data().map(function(d) {\n            return d.id;\n        });\n        osApi.setCohort(ids, \"COORD\", osApi.SAMPLE);\n\n    };\n\n    var lasso = d3.lasso()\n        .closePathSelect(true)\n        .closePathDistance(100)\n        .targetArea(d3Chart)\n        .on(\"start\", lasso_start)\n        .on(\"draw\", lasso_draw)\n        .on(\"end\", lasso_end);   \n\n    var draw = function(){ \n        \n        // Size\n        var layout = osApi.getLayout();\n        width = $window.innerWidth - layout.left - layout.right;\n        height = $window.innerHeight - 200; //10\n        angular.element(\"#genedashboard-chart\").css({\n            \"width\": width + \"px\",\n            \"padding-left\": layout.left + \"px\"\n        });\n\n        d3Chart.attr(\"width\", width).attr(\"height\", height);\n        d3Points.attr(\"width\", width).attr(\"height\", height);\n        d3vLines.attr(\"width\", width).attr(\"height\", height);\n\n        minMax = data.map(function(d){return d3.extent(Object.values(d).filter(function(v) { return !_.isString(v)}))})\n                      .reduce(function(p,c){\n                        if(c[0] < p[0]) p[0] = c[0]\n                        if(c[1] > p[1]) p[1] = c[1]\n                        return p;\n                      },[Infinity,-Infinity])\n\n\n        // Scale\n        var x = d3.scalePoint().domain(vm.genes).range([75, width - 75]),\n            y = d3.scaleLinear().domain(minMax).range([height - 20, 20]);\n\n        // Create a scale and brush for each gene.\n        // vm.genes.forEach(function(d) {\n        //   // Coerce values to numbers.\n        //   data.forEach(function(p) { p[d] = +p[d]; });\n      \n        //   // y[d] = d3.scaleLinear()\n        //   //     .domain(d3.extent(data, function(p) { return p[d]; }))\n        //   //     .range([height - 20, 20]);\n      \n        //   // y[d].brush = d3.svg.brush()\n        //   //     .y(y[d])\n        //   //     .on(\"brush\", brush);\n        // });\n\n        \n\n        // Returns the path for a given data point.\n        function coords(d) {\n          //return vm.genes.map(function(p) { return [x(p), y[p](d[p])]; });\n          return vm.genes.map(function(p) { return [x(p), y(d[p]), d[p], p]; });\n        }\n\n        var coordpairs_bysmple = data.map(function(d) { return coords(d)})\n        var coordpairs = _.flatten(coordpairs_bysmple, true)\n        coordpairs = coordpairs.map(function(d,i){\n            d.id = data[Math.floor(i/coordpairs_bysmple[0].length)].sample; \n            d.gene = d[3]\n            return d;})\n  \n        genes = d3vLines.selectAll(\".gene\").data(vm.genes)\n\n        var tickCount = 10\n        var axis_display = \"axis-show-name\"\n\n        if(coordpairs[1][0] - coordpairs[0][0] < 40){\n          tickCount =0\n          axis_display = \"axis-hide-name\"\n        }\n        \n        axisY = d3.axisLeft().scale(y).ticks(tickCount);\n        \n        // add new data\n        var g = genes.enter().append(\"g\")\n          .attr(\"class\", function(d){ \n            return \"gene \" + d})\n          .attr(\"transform\", function(d) { return \"translate(\" + x(d) + \")\"; })\n        \n        g.append(\"g\")   //only run on new elements coming in\n          .attr(\"class\", \"axis\")\n          .each(function(d) { d3.select(this).call(axisY.scale(y)); })\n          //.each(function(d) { d3.select(this).call(axisY.scale(y[d])); })\n            .append(\"text\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"y\", 10)\n            .text(String)\n            .attr(\"class\", \"axis-name \"+ axis_display);\n\n        // update existing data\n        genes\n          .select('.axis')\n          .each(function(d) { d3.select(this).call(axisY.scale(y)); })\n          //.each(function(d) { d3.select(this).call(axisY.scale(y[d])); })\n            .select(\".axis-name\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"y\", 10)\n            .text(String)\n            .attr(\"class\", \"axis-name \"+ axis_display);\n\n        genes.attr(\"class\", function(d){ return \"gene \" + d})\n          .attr(\"transform\", function(d) { return \"translate(\" + x(d) + \")\"; })\n        \n        // remove old data\n        genes.exit().remove()\n        g.exit().remove()\n\n        d3vLines.select(\".\"+vm.gene)\n          .select('.axis-name')\n          .attr(\"class\", \"axis-name axis-show-name\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"y\", 10)\n          .text(String);\n\n        // Draw\n        circles = d3Points.selectAll(\"circle\").data(coordpairs);\n        circles.enter().append(\"circle\")\n            .attr(\"class\", \"coord-node\")\n            .attr(\"cx\", function(d) {\n                return d[0];\n            })\n            .attr(\"cy\", function(d) {\n                return d[1];\n            })\n            .attr(\"r\", 3)\n            .style(\"fill\", function(d) {\n                return d.color;\n            })\n            .on(\"mouseover\", elTip.show)\n            .on(\"mouseout\", elTip.hide);\n\n        circles.exit()\n            // .transition()\n            // .duration(200)\n            // .delay(function(d, i) {\n            //     return i / 300 * 100;\n            // })\n            .style(\"fill-opacity\", \"0\")\n            .remove();\n        circles\n            .style(\"fill\", function(d) {\n                return d.color;\n            })\n            // .transition()\n            // .duration(750)\n            // .delay(function(d, i) {\n            //     return i / 300 * 100;\n            // })\n            .attr(\"r\", 3)\n            .attr(\"cx\", function(d) {\n                return d[0];\n            })\n            .attr(\"cy\", function(d) {\n                return d[1];\n            })\n            .style(\"fill\", function(d) {\n                return d.color;\n            })\n            .style(\"fill-opacity\", 0.8);\n\n          lasso.items(d3Points.selectAll(\"circle\"));\n          d3Chart.call(lasso);\n          \n          setSelected();\n          onCohortChange(osApi.getCohort());\n          //onGenesetChange(osApi.getGeneset());\n          osApi.setBusy(false);\n\n    }\n    \n    var cohort = osApi.getCohorts();\n    var onCohortChange = function(c) {\n        cohort = c;\n        setSelected();\n\n    };\n    osApi.onCohortChange.add(onCohortChange);\n    \n      \n    vm.updateGene = function() {\n            osApi.setBusy(true);\n            vm.range.up = +vm.range.up\n            vm.range.down = +vm.range.down\n            callGeneRegion()\n    };\n    \n      var callGeneRegion = function(){\n\n        osApi.setBusy(true)\n        osApi.query(\"lookup_hg19_genepos_minabsstart\", {m: vm.gene}).then(function(response){\n          var d = response.data\n          if(d.length >0){\n            vm.chr = d[0].chr\n            osApi.query(\"lookup_hg19_genepos_minabsstart\", {chr: vm.chr, pos: {$lt: d[0].pos + vm.range.down, $gt: d[0].pos - vm.range.up}}).then(function(resp){\n              vm.genes_in_region = resp.data\n\n              // while(vm.genes_in_region.length >12){\n              //     var maxDist = _.max(vm.genes_in_region,function(g){ return Math.abs(d[0].pos - g.pos)})\n              //       vm.genes_in_region = vm.genes_in_region.filter(function(g){return g.m != maxDist.m})\n              // }\n              vm.genes =  _.pluck(vm.genes_in_region,\"m\" )\n\n              osApi.query(vm.molecular.collection, {m: {$in:vm.genes}}).then(function(r){\n                var molecular = r.data\n                var sampleIdx = _.range(0,molecular[0].s.length)\n\n                if(samples.length !=0){ \n                    sampleIdx = molecular[0].s.map(function(s, i){\n                        var matchS = _.contains(samples, s) ? i : -1\n                        return matchS})\n                }else{\n                  samples = molecular[0].s\n                }\n\n                vm.genes = _.intersection(_.pluck(_.sortBy(vm.genes_in_region, \"pos\"), \"m\"), _.pluck(molecular, \"m\"))\n                \n\n                var tbl = jStat.transpose(molecular.map(function(g){return  g.d.filter(function(r, i){return _.contains(sampleIdx, i)})}))\n                data = tbl.map(function(s, i){ var v =_.object( vm.genes,s); v[\"sample\"] = samples[i]; return v }) \n                \n                \n                draw();\n              });\n            });\n          }\n        });\n      }\n\n\n      // Setup Watches\n      $scope.$watch('vm.dataType', function() {\n      \n        if(angular.isUndefined(vm.molecularTables)) return;\n\n        if (angular.isUndefined(vm.dataType)) {\n          vm.dataType = vm.dataTypes[0];\n        } else {\n          var newSource = vm.dataTypes.filter(function(v) { return (v === vm.dataType); });\n          vm.dataType = (newSource.length === 1) ? newSource[0] : vm.dataTypes[0];\n        }\n        var molecular_matches = vm.molecularTables.filter(function(d){return d.name == vm.dataType })\n        if(molecular_matches.length ==1){\n            vm.molecular = molecular_matches[0]\n        }\n        if(angular.isUndefined(vm.gene)){\n          vm.gene = vm.molecular.m[0]\n        } else if(_.intersection(vm.molecular.m, [vm.gene]).length == 0){\n          window.alert(\"Gene \"+vm.gene+\" not in data type \"+vm.dataType)\n          vm.dataType = vm.state.dataType;\n          return;\n        }\n        vm.state.dataType = vm.dataType\n        callGeneRegion()\n        \n        \n      });   \n      // $scope.$watch('vm.gene', function() {\n        //runs with every keystroke\n      //     if (vm.gene === null) return;\n      //     callGeneRegion()\n\n      // });\n\n      // App Event :: Resize\n      osApi.onResize.add(draw);\n\n      osApi.query(\"lookup_oncoscape_datasources_v2\", {\n        dataset: osApi.getDataSource().dataset\n      }).then(function(response){\n        vm.molecularTables = response.data[0].collections.filter(function(d){ return _.contains(acceptableDatatypes, d.type)})\n        vm.molecularTables = vm.molecularTables.filter(function(d) { return !d.name.match(/protein/)})\n        vm.dataTypes = _.uniq(_.pluck(vm.molecularTables, \"name\"))\n        vm.dataType = vm.dataTypes[0]\n        vm.state = {dataType:vm.dataType}\n        \n      })\n        \n    }  //end Controller\n  }  //end genedashboard() \n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osDatasource', datasource);\n\n    /** @ngInject */\n    function datasource() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/datasource/datasource.html',\n            controller: DatasourceController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function DatasourceController(osApi, $state) {\n            var vm = this;\n            vm.datasets = osApi.getDataSources();\n            vm.explore = function(tool, datasource) {\n                $state.go(tool, { datasource: datasource.dataset });\n            };\n            osApi.setBusy(false);\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osCompareCluster', compareCluster);\n\n    /** @ngInject */\n    function compareCluster() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/compareclusters/compareclusters.html',\n            controller: CompareClusterController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function CompareClusterController(osApi, d3, $state, $timeout, $scope, moment, $stateParams, _, $, $q, $window) {\n\n\n            function zoomed() {\n                elPlots.forEach(function(plot) {\n                    plot.attr(\"transform\", d3.event.transform);\n                });\n            }\n\n            var layout = osApi.getLayout();\n            var width = ($window.innerWidth - layout.left - layout.right);\n            var height = ($window.innerHeight - 120);\n            var zoom = d3.zoom()\n                .scaleExtent([1, 40])\n                .translateExtent([\n                    [-100, -100],\n                    [width + 90, height + 100]\n                ])\n                .on(\"zoom\", zoomed);\n\n            // Cohort\n            var cohort = osApi.getCohort();\n            var onCohortChange = function(c) {\n                cohort = c;\n                setSelected();\n            };\n            osApi.onCohortChange.add(onCohortChange);\n\n            // Datasource\n            var datasource = osApi.getDataSource();\n\n            // View Model\n            var vm = this;\n            vm.optionColors = [];\n            vm.optionLayouts = [];\n\n            // State\n            var clusterIndexes = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n            var clusterColors = [];\n            var clusterLayouts = [];\n\n            // Elements\n            var elChart = d3.select(\"#compareclusterChart\").append(\"svg:svg\");\n            var elBrushes = clusterIndexes.map(function() { return d3.brush(); });\n            elChart.call(zoom);\n            var elPlots = clusterIndexes.map(function() { return elChart.append(\"svg:g\"); });\n            var elHitareas = elPlots.map(function(elPlot) { return elPlot.append(\"svg:rect\"); });\n            elHitareas.forEach(function(hitArea) {\n                hitArea.attr(\"fill\", \"black\");\n                hitArea.attr(\"opacity\", 0);\n            });\n            var elLines = [0, 1, 2, 3].map(function() { return elChart.append(\"svg:line\"); });\n            elLines.forEach(function(line) {\n                line.attr(\"stroke\", \"#cbcbcb\");\n                line.attr(\"stroke-width\", \"1px\");\n            });\n\n            // State Management\n            var setSelected = function() {\n                var selectedIds = cohort.sampleIds;\n                clusterIndexes.forEach(function(clusterIndex) {\n                    elPlots[clusterIndex].selectAll(\"circle\").classed(\"pca-node-selected\", function() {\n                        return (selectedIds.indexOf(this.__data__.id) >= 0);\n                    });\n                });\n            };\n            // var saveState = function() {\n\n            // }\n            var loadState = function() {\n                vm.optionLayouts = datasource.calculated.filter(function(v) { return (v.type === \"pcaScores\" || v.type === \"mds\"); });\n                return new Promise(function(resolve) {\n                    osApi.query('brain_color_tcga_import').then(function(v) {\n\n                        // This piece of magic creates an object who's key is a sampleID and value is a color\n                        vm.optionColors = v.data.map(function(colorOption) {\n                            colorOption.lookup = colorOption.data.map(function(c) {\n                                var colorMap = c.values.reduce(function(p, c) {\n                                    p[c] = p.color;\n                                    return p;\n                                }, { color: (c.color === null) ? \"black\" : c.color });\n                                delete colorMap.color;\n                                //delete c.values;\n                                return colorMap;\n                            }).reduce(function(p, c) {\n                                _.extend(p, c);\n                                return p;\n                            }, {});\n                            return colorOption;\n                        });\n\n                        // Set Default Cluster Colors + layouts\n                        clusterLayouts = vm.optionLayouts.splice(0, 9).map(function(v) { return { name: v.collection }; });\n                        clusterColors = vm.optionColors.splice(0, 9);\n                        resolve();\n                    });\n                });\n            };\n\n            // Brushes\n            var brushStart = function() {\n                if (d3.event.selection === null) return;\n                var target = d3.event.target;\n                elBrushes\n                    .filter(function(b) {\n                        return b.brush !== target;\n                    })\n                    .forEach(function(b) {\n                        elPlots[b.index].call(b.move, null);\n                    });\n            };\n            var brushEnd = function() {\n\n                if (d3.event.selection === null) {\n\n                    elChart.selectAll(\"circle\")\n                        .classed(\"pca-node-selected\", false);\n                    return;\n                }\n                var target = d3.event.target;\n                var bv = d3.event.selection;\n                var xScale = target.xScale;\n                var yScale = target.yScale;\n                var xMin = xScale.invert(bv[0][0]);\n                var xMax = xScale.invert(bv[1][0]);\n                var yMin = yScale.invert(bv[0][1]);\n                var yMax = yScale.invert(bv[1][1]);\n\n                elChart.selectAll(\"circle\")\n                    .classed(\"pca-node-selected\", function(v) {\n                        return (v.x >= xMin && v.x <= xMax && v.y >= yMin && v.y <= yMax);\n                        //return (selectedIds.indexOf(this.__data__.id) >= 0);\n                    });\n                // Convert To PIDs\n                // var sids = data.filter(function(v) {\n                //     return (v.x >= xMin && v.x <= xMax && v.y >= yMin && v.y <= yMax);\n                // }).map(function(v) { return v.id; });\n\n                // elPlots[target.index].call(elBrushes[target.index].move, null);\n\n            };\n\n            // Layout Methods\n            var loadLayout = function(clusterIndex) {\n                return new Promise(function(resolve) {\n\n                    var collection = clusterLayouts[clusterIndex].name;\n\n                    osApi.query(collection).then(function(result) {\n\n                        var data = result.data[0].data;\n                        result.data[0].domain = Object.keys(data).reduce(function(p, c) {\n                            var datum = data[c];\n                            if (isNaN(datum.x) || isNaN(datum.y)) return p;\n                            p.pc1[0] = Math.min(p.pc1[0], datum.x);\n                            p.pc1[1] = Math.max(p.pc1[1], datum.x);\n                            p.pc2[0] = Math.min(p.pc2[0], datum.y);\n                            p.pc2[1] = Math.max(p.pc2[1], datum.y);\n                            return p;\n                        }, { pc1: [Infinity, -Infinity], pc2: [Infinity, -Infinity] });\n                        result.data[0].bind = Object.keys(data).map(function(v) {\n                            var rv = data[v];\n                            rv.id = v;\n                            return rv;\n                        });\n                        clusterLayouts[clusterIndex].data = result.data[0];\n                        resolve(result.data[0]);\n                    });\n                });\n            };\n\n            loadState().then(function() {\n                Promise.all(\n                    clusterIndexes.map(function(clusterIndex) { return loadLayout(clusterIndex); })\n                ).then(function() {\n                    draw();\n                    setSelected();\n                });\n            });\n\n            var draw = function() {\n                drawLines();\n                clusterIndexes.forEach(drawCluster);\n            };\n\n            var drawLines = function() {\n                var layout = osApi.getLayout();\n                var width = ($window.innerWidth - layout.left - layout.right);\n                var height = ($window.innerHeight - 120);\n                elLines[0].attr(\"x1\", 0).attr(\"y1\", height * (1 / 3)).attr(\"x2\", width).attr(\"y2\", (height * 1 / 3));\n                elLines[1].attr(\"x1\", 0).attr(\"y1\", height * (2 / 3)).attr(\"x2\", width).attr(\"y2\", (height * 2 / 3));\n                elLines[2].attr(\"x1\", width * (1 / 3)).attr(\"y1\", 0).attr(\"x2\", width * (1 / 3)).attr(\"y2\", height);\n                elLines[3].attr(\"x1\", width * (2 / 3)).attr(\"y1\", 0).attr(\"x2\", width * (2 / 3)).attr(\"y2\", height);\n            };\n\n            var drawCluster = function(clusterIndex) {\n\n                // Inefficent\n                var layout = osApi.getLayout();\n                var width = ($window.innerWidth - layout.left - layout.right);\n                var height = ($window.innerHeight - 120);\n                elChart.attr(\"width\", width).attr(\"height\", height);\n                var boxWidth = Math.floor(width / 3);\n                var boxHeight = Math.floor(height / 3);\n\n                // Resize Hitarea\n                var elHitarea = elHitareas[clusterIndex];\n                elHitarea\n                    .attr(\"width\", boxWidth)\n                    .attr(\"height\", boxHeight);\n\n                // Figure Out Scale Hitarea\n                var data = clusterLayouts[clusterIndex].data;\n                var xScale = d3.scaleLinear().domain(data.domain.pc1).range([5, Math.min(boxWidth) - 5]);\n                var yScale = d3.scaleLinear().domain(data.domain.pc2).range([5, Math.min(boxHeight) - 5]);\n                var elPlot = elPlots[clusterIndex];\n\n\n                var brush = elBrushes[clusterIndex];\n                brush.on(\"start\", brushStart);\n                brush.on(\"end\", brushEnd);\n                brush.extent([\n                    [0, 0],\n                    [boxWidth, boxHeight]\n                ]);\n\n                elPlot.call(brush);\n                brush.index = clusterIndex;\n                brush.xScale = xScale;\n                brush.yScale = yScale;\n                elPlot.attr(\"transform\", \"translate(\" + ((clusterIndex % 3) * boxWidth) + \",\" + (parseInt(clusterIndex / 3) * boxHeight) + \")\");\n                var circles = elPlot.selectAll(\"circle\")\n                    .data(data.bind);\n\n\n                circles.enter()\n                    .append(\"svg:circle\")\n                    .attr(\"cx\", 0).attr(\"cy\", 0)\n                    .attr(\"class\", \"point\")\n                    .attr(\"r\", 1)\n                    .style(\"fill\", function(d) { return clusterColors[clusterIndex].lookup[d.id]; })\n                    .attr(\"cx\", function(d) { return xScale(d.x); })\n                    .attr(\"cy\", function(d) { return yScale(d.y); });\n\n                circles.exit()\n                    .transition()\n                    .duration(200)\n                    .delay(function(d, i) {\n                        return i / 300 * 100;\n                    })\n                    .style(\"fill-opacity\", \"0\")\n                    .remove();\n\n                circles\n                    .transition()\n                    .duration(750)\n                    .attr(\"cx\", function(d) { return xScale(d.x); })\n                    .attr(\"cy\", function(d) { return yScale(d.y); });\n\n\n            };\n\n            // // Listen For Resize\n            osApi.onResize.add(draw);\n            // angular.element($window).bind('resize',\n            //     _.debounce(resize, 300)\n            // );\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osColorPanel', colorPanel);\n\n    /** @ngInject */\n    function colorPanel() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/colorpanel/colorpanel.html',\n            controller: ColorPanelController,\n            controllerAs: 'vm',\n            bindToController: true,\n            scope: {\n                close: \"&\",\n                change: \"&\"\n            }\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function ColorPanelController(osApi, d3, _, $timeout) {\n\n            // Properties\n            var vm = this;\n            vm.showPanelColorRna = false;\n            vm.colorScales = [{ name: \"Quantile\" }, { name: \"Quantize\" }];\n            vm.colorScale = vm.colorScales[0];\n            vm.colorBins = [2, 3, 4, 5, 6, 7, 8].map(function(v) { return { name: v + \" Bins\", value: v }; });\n            vm.colorBin = vm.colorBins[2];\n            vm.colorOptions = osApi.getDataSource().colors;\n            vm.colorFields = {}\n\n            if (angular.isDefined(vm.colorOptions)) {\n                if (vm.colorOptions.length !== 0) vm.colorOption = vm.colorOptions[0];\n            }\n\n            var activeDatasets = [osApi.getDataSource().dataset]\n            // Import saved colors\n\n            \n            var promises = activeDatasets.map(function(ds){\n                return new Promise(function(resolve, reject) {\n                    osApi.query(ds+ \"_color\",{\n                        dataset: ds,\n                        $fields: ['name', 'subtype']\n                    }).then(function(v) {\n\n                        // attach dataset inclusion to Fields\n                        var regx = /(\\d+%)/i;\n                        vm.colorFields = v.data.reduce(function(p, c) {\n                            name = c.name.substr(0,c.name.match(regx).index-2)\n\n                            if (!p.hasOwnProperty(name)) p[name] = [];\n                            p[name].push(ds);\n                            return p;\n                        }, vm.colorFields);\n    \n                        var data = Object.keys(vm.colorFields).reduce(function(p,c) {\n                            var group = vm.colorFields[c].join(\" + \")\n                            if(!p.hasOwnProperty(group)) p[group] = []\n                            p[group].push(c)\n                            return p\n                           }, {}) ;\n                           \n                        vm.optPatientColors = Object.keys(data).map(function(key){\n                            return {\n                                name: key,\n                                values: data[key].map(function(d){ return {\"name\":d}})\n                                    .sort(function(a, b) {\n                                        if (a.name > b.name) return 1;\n                                        if (a.name < b.name) return -1;\n                                        return 0;\n                                    })\n                            };\n                        } )\n\n                        resolve();\n                    })\n                })\n            })\n\n             Promise.all( promises )\n            \n\n           \n            \n                \n            vm.resetColor = function() {\n                \n                osApi.setPatientColor({\n                    \"name\": \"Dataset\",\n                    \"data\": [ ],\n                    show: true\n                });\n            };\n\n            vm.setColor = function(item) {\n                osApi.setBusy(true);\n                vm.close();\n                if (item.name == \"None\") {\n                    osApi.setPatientColor({\n                        \"name\": \"Dataset\",\n                        \"data\": [],\n                        show: true\n                    });\n                    return;\n                }\n\n                var fulldata = {data:[], name: item.name}\n                var promises = activeDatasets.map(function(ds){\n                    return new Promise(function(resolve, reject) {\n                        osApi.query(ds+ \"_color\",{\n                            name: item.name\n                        }, {data:1}).then(function(v) {\n                            var data = v.data[0];\n                            data.data = data.data.map(function(v) {\n                                var name = v.name.toLowerCase().trim();\n                                if (name === \"\" || name == \"null\" || angular.isUndefined(name)) {\n                                    v.name = \"Null\";\n                                    v.color = \"#DDDDDD\";\n                                }\n                                v.id = \"legend-\" + v.color.substr(1);\n                                return v;\n                            }).sort(function(a, b) {\n                                var aname = (isNaN(a.name)) ? a.name : parseInt(a.name);\n                                var bname = (isNaN(b.name)) ? b.name : parseInt(b.name);\n                                if (aname < bname) return -1;\n                                if (aname > bname) return 1;\n                                if (a.name == \"Null\") return 1;\n                                if (b.name == \"Null\") return -1;\n                                return 0;\n                            });\n\n                            fulldata.data = data.data.reduce(function(p,c){\n                                var t = p.filter(function(d){ return d.name == c.name}) \n                                if (t.length == 0){ p.push(c)}\n                                else { p.values.concat(c.values)}\n                                return p;\n                            }, fulldata.data)\n        \n                            // debugger;\n                            osApi.setPatientColor(fulldata);\n                            osApi.setBusy(false);\n                            vm.close();\n                            \n\n                        })\n                    })\n                })\n                Promise.all( promises ).then(function(){\n                    osApi.setPatientColor(fulldata);\n                    osApi.setBusy(false);\n                    vm.close();\n                })   \n\n            };\n            vm.setGeneColor = function() {\n                var genes = (\"+\" + vm.geneColor.replace(/\\s/g, '').toUpperCase()).match(/[-+]\\w*/gi).map(function(v) {\n                    return {\n                        op: v.substr(0, 1),\n                        gene: v.substr(1).toLowerCase(),\n                        message: \"\",\n                        status: \"\"\n                    };\n                });\n                osApi.setBusy(true);\n                osApi.query(\"lookup-genes\", { symbols: { $in: genes.map(function(v) { return v.gene; }) } }).then(function(result) {\n                    vm.close();\n                    genes.map(function(v) {\n                        var gene = this.filter(function(s) {\n                            return (s.symbols.indexOf(this) != -1);\n                        }, v.gene);\n\n                        if (gene.length === 0) {\n                            v.message = v.gene.toUpperCase();\n                            v.status = \"Removed\";\n                        } else if (gene.length > 1) {\n                            v.message = v.gene.toUpperCase() + \" -> \" + gene[0].hugo.toUpperCase();\n                            v.status = \"Converted\";\n                        } else if (gene.length == 1) {\n                            if (v.gene != gene[0].hugo) {\n                                v.message = v.gene.toUpperCase() + \" -> \" + gene[0].hugo.toUpperCase();\n                                v.status = \"Converted\";\n                            }\n                        }\n                    }, result.data);\n\n                    var msgs = _.sortBy(\n                        genes.filter(function(v) { return v.status !== \"\"; }), \"length\");\n\n                    var types = _.groupBy(msgs, function(gene) { return gene.status; });\n\n                    var msg = \"\";\n\n                    if (angular.isDefined(types.Removed) && types.Removed.length > 0) {\n                        msg += \"Removed: \" + types.Removed.map(function(v) { return v.message + \" - \"; });\n                    }\n                    if (msg.length > 0) msg = msg.substr(0, msg.length - 2) + \"\\r\\n\";\n                    if (angular.isDefined(types.Converted) && types.Converted.length > 0) {\n                        msg += \"Converted: \" + types.Converted.map(function(v) { return v.message + \"\\r\\n\"; });\n                    }\n                    if (msg.trim().length > 0) alert(msg);\n                    var geneset = genes.filter(function(v) { return v.status != \"Removed\"; }).map(function(v) {\n                        return v.gene.toUpperCase();\n                    });\n                    osApi.query(vm.colorOption.collection, {\n                        gene: {\n                            '$in': geneset\n                        }\n                    }).then(function(results) {\n\n                        if (results.data.length > 0) {\n                            var data;\n                            if (results.data.length == 1)\n                                data = results.data[0];\n                            else {\n                                data = {};\n                                data.patients = results.data.reduce(function(p, c) {\n                                    var fn = p.lookup[c.gene];\n                                    for (var i = 0; i < p.pids.length; i++) {\n                                        var pid = p.pids[i];\n                                        var iv = p.output.hasOwnProperty(pid) ? p.output[pid] : 0;\n                                        if (fn === \"+\") p.output[pid] = iv + c.patients[pid];\n                                        if (fn === \"-\") p.output[pid] = iv - c.patients[pid];\n                                    }\n                                    return p;\n                                }, {\n                                    pids: Object.keys(results.data[0].patients),\n                                    lookup: genes.reduce(function(p, c) {\n                                        p[c.gene] = c.op;\n                                        return p;\n                                    }, {}),\n                                    output: {}\n                                }).output;\n\n                                var range = Object.keys(data.patients).reduce(function(p, c) {\n                                    p.min = Math.min(p.min, p.values[c]);\n                                    p.max = Math.max(p.min, p.values[c]);\n                                    return p;\n                                }, {\n                                    values: data.patients,\n                                    min: Infinity,\n                                    max: -Infinity\n                                });\n                                data.min = range.min;\n                                data.max = range.max;\n                            }\n\n                            // Color Patients\n                            var colors = [\"#9d1cb2\", \"#00a7f7\", \"#3d4eb8\", \"#ff9900\", \"#f7412d\", \"#795548\", \"#E91E63\", \"#673AB7\"];\n                            var values = colors.splice(0, vm.colorBin.value);\n\n                            var scale = (vm.colorScale.name == \"Quantile\") ? d3.scaleQuantile() : d3.scaleQuantize();\n\n\n\n                            // Combine Colors + Scale Into Name + Value\n                            var labels;\n                            if (vm.colorScale.name == \"Quantile\") {\n                                scale.domain(Object.keys(data).map(function(key) { return data[key]; }, { data: data })).range(values);\n                                labels = scale.quantiles().map(function(v) { return parseFloat(v).toFixed(3); });\n                                labels.unshift(\"\");\n                                labels = labels.map(function(c, i, a) {\n                                    if (i === 0) { return \"-\\u221e \\u2194 \" + a[1]; } else if (i == a.length - 1) {\n                                        return a[i] + \" \\u2194 +\\u221e\";\n                                    }\n                                    return a[i] + \" \\u2194 \" + a[i + 1];\n                                });\n                                values = _.zip(values, labels).map(function(v) { return { color: v[0], name: v[1] }; });\n                            } else {\n                                scale\n                                    .domain([data.min, data.max])\n                                    .range(values);\n                                labels = scale.ticks(values.length).map(function(v) { return \"~\" + parseFloat(v).toFixed(2); });\n                                values = _.zip(values, labels).map(function(v) { return { color: v[0], name: v[1] }; });\n                            }\n                            data = Object.keys(data.patients).map(function(id) {\n                                    return {\n                                        id: id,\n                                        color: this.scale(this.patients[id]),\n                                        value: this.patients[id]\n                                    };\n                                }, {\n                                    patients: data.patients,\n                                    scale: scale\n                                })\n                                .reduce(function(p, c) {\n                                    if (!p.hasOwnProperty(c.color)) p[c.color] = [];\n                                    p[c.color].push(c.id);\n                                    return p;\n                                }, {});\n\n                            data = Object.keys(data).map(function(key) {\n                                return {\n                                    color: key,\n                                    name: this.names.filter(function(f) {\n                                        return f.color == this.color;\n                                    }, {\n                                        color: key\n                                    })[0].name,\n                                    values: this.data[key]\n                                };\n                            }, {\n                                data: data,\n                                names: values\n                            });\n\n                            data = data.sort(function(a, b) {\n                                if (a.name.indexOf(\"-\\u221e\") != -1) return -1;\n                                if (b.name.indexOf(\"-\\u221e\") != -1) return 1;\n                                if (a.name.indexOf(\"+\\u221e\") != -1) return 1;\n                                if (b.name.indexOf(\"+\\u221e\") != -1) return -1;\n                                if (a.name < b.name) return -1;\n                                if (a.name > b.name) return 1;\n                                return 0;\n                            });\n                            data.push({\n                                color: '#DDD',\n                                name: 'Null',\n                                values: []\n                            });\n\n                            colors = {\n                                dataset: osApi.getDataSource().dataset,\n                                type: 'color',\n                                name: genes.reduce(function(p, c) {\n                                    p += c.op + c.gene + \" \";\n                                    return p;\n                                }, \"\"),\n                                data: data\n                            };\n                            osApi.setPatientColor(colors);\n                        }\n                        osApi.setBusy(false);\n                    });\n                });\n\n            };\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osCollectionPanel', collectionPanel);\n\n    /** @ngInject */\n    function collectionPanel() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/collectionpanel/collectionpanel.html',\n            controller: CollectionPanelController,\n            controllerAs: 'vm',\n            scope: {},\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function CollectionPanelController(osApi) {\n\n\n            // View Model\n            var vm = this;\n\n\n            // Tray Expand / Collapse\n            var elTray = angular.element(\".collection-panel\");\n            var isLocked = true;\n            var mouseOver = function() { elTray.removeClass(\"tray-collapsed-left\"); };\n            var mouseOut = function() { elTray.addClass(\"tray-collapsed-left\"); };\n            vm.toggle = function() {\n                isLocked = !isLocked;\n                angular.element(\"#collectionpanel-lock\")\n                    .addClass(isLocked ? 'fa-lock' : 'fa-unlock-alt')\n                    .removeClass(isLocked ? 'fa-unlock-alt' : 'fa-lock')\n                    .attr(\"locked\", isLocked ? \"true\" : \"false\");\n                if (isLocked) {\n                    elTray\n                        .unbind(\"mouseover\", mouseOver)\n                        .unbind(\"mouseout\", mouseOut)\n                        .removeClass(\"tray-collapsed-left\");\n                } else {\n                    elTray\n                        .addClass(\"tray-collapsed-left\")\n                        .bind(\"mouseover\", mouseOver)\n                        .bind(\"mouseout\", mouseOut);\n                }\n\n                osApi.onResize.dispatch();\n            };\n\n\n\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osCohortMenu', cohortMenu);\n\n    /** @ngInject */\n    function cohortMenu() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/cohortmenu/cohortmenu.html',\n            controller: CohortMenuController,\n            controllerAs: 'vm',\n            scope: {},\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function CohortMenuController(osApi, $state, $scope, $sce, $timeout, $rootScope, $filter, d3) {\n\n\n            // View Model\n            var vm = this;\n            vm.cohorts = [];\n            vm.cohort = null;\n            vm.cohortFeatures = [];\n            vm.cohortFeature = null;\n            vm.cohortSummary = \"\";\n\n            // Cohort Service Integration\n            osApi.onCohortsChange.add(function(cohorts) {\n                vm.cohorts = cohorts;\n                updateSurvival(cohorts);\n            });\n            osApi.onCohortChange.add(function(cohort) {\n\n                var dataInfo = osApi.getCohortDatasetInfo();\n                var cohortSurvival = cohort.survival == null ? 0 : cohort.survival.data.tte.length;\n                var summary =\n                    $filter('number')(dataInfo.numSamples) + \" Samples In Dataset<br /> \" +\n                    $filter('number')(dataInfo.numPatients) + \" Patients In Dataset<br /> \" +\n                    $filter('number')(cohort.numSamples) + \" Samples In Current Cohort<br /> \" +\n                    $filter('number')(cohort.numPatients) + \" Patients In Current Cohort<br />\" +\n                    $filter('number')(cohort.numClinical) + \" Patients with Clinical Data<br />\" +\n                    $filter('number')(cohortSurvival) + \" Patients with Survival Outcome<br />\";\n                //$filter('number')(toolInfo.numSamplesVisible) + \" Samples In Current Cohort Showing<br />\" +\n                //$filter('number')(toolInfo.numPatients) + \" Patients In Current Cohort Showing<br />\";\n\n                vm.cohortSummary = $sce.trustAsHtml(summary);\n\n                if (angular.isUndefined(cohort)) return;\n                $timeout(function() {\n                    var featureIdx = (vm.cohortFeature !== null) ? vm.cohortFeatures.indexOf(vm.cohortFeature) : 0;\n                    vm.cohort = cohort;\n                    vm.cohortFeatures = cohort.histogram.features;\n                    vm.cohortFeature = cohort.histogram.features[featureIdx];\n                });\n                updateSurvival(vm.cohorts.concat([cohort]));\n            });\n\n            // Cohort edit\n            vm.setCohort = function(cohort) {\n                if (angular.isString(cohort)) {\n                    osApi.setCohort([], osApi.ALL, osApi.SAMPLE);\n                } else {\n                    osApi.setCohort(cohort);\n                }\n            };\n\n            vm.updateCohort = function() {\n                if (vm.cohort.type == \"UNSAVED\") {\n                    osApi.saveCohort(vm.cohort);\n                } else {\n                    osApi.deleteCohort(vm.cohort);\n                }\n            };\n\n\n            // Histogram \n            var histSvg = d3.select(\"#cohortmenu-chart\").append(\"svg\")\n                .attr(\"width\", 260)\n                .attr(\"height\", 150)\n                .append(\"g\");\n            var histSingleValueLabel = angular.element(\"#cohortmenu-single-value\");\n            var elTip = d3.tip().attr(\"class\", \"tip\").offset([-8, 0]).html(function(d) {\n                return \"Range: \" + d.label + \"<br>Count: \" + d.value + \" of \" + vm.cohortFeature.data.count + \"<br>Percent: \" + $filter('number')((d.value / vm.cohortFeature.data.count) * 100, 2) + \"%\";\n            });\n            histSvg.call(elTip);\n            $scope.$watch('vm.cohortFeature', function() {\n\n                // Histogram\n                if (vm.cohortFeature === null) return;\n                var data = vm.cohortFeature.data;\n                if (data.type == \"factor\") {\n                    if (data.hist.length == 1) {\n                        histSingleValueLabel.text(data.hist[0].label).css(\"display\", \"block\").removeClass(\"cohortmenu-single-value-numeric\");\n                        histSvg.classed(\"cohort-chart-hide\", true);\n                        return;\n                    }\n                } else {\n                    if (data.min == data.max) {\n                        histSingleValueLabel.text(data.min).css(\"display\", \"block\").addClass(\"cohortmenu-single-value-numeric\");\n                        histSvg.classed(\"cohort-chart-hide\", true);\n                        return;\n                    }\n                }\n                histSingleValueLabel.text('').css(\"display\", \"none\");\n                histSvg.classed(\"cohort-chart-hide\", false);\n                var barWidth = Math.floor((250 - data.bins) / data.bins);\n\n\n                if (data.histRange[0] > 0) data.histRange[0] -= 2;\n                var yScale = d3.scaleLinear()\n                    .domain([0, data.histRange[1]])\n                    .range([0, 135]);\n                var bars = histSvg\n                    .selectAll(\".cohort-menu-chart-bar\")\n                    .data(data.hist);\n                bars.enter()\n                    .append(\"rect\")\n                    .attr(\"class\", \"cohort-menu-chart-bar\")\n                    .attr(\"x\", function(d, i) { return ((barWidth + 1) * i) + 5; })\n                    .attr(\"y\", function(d) { return 150 - yScale(d.value); })\n                    .attr(\"height\", function(d) { return yScale(d.value); })\n                    .attr(\"width\", barWidth)\n                    .on(\"mouseover\", elTip.show)\n                    .on(\"mouseout\", elTip.hide);\n                bars\n                    .transition()\n                    .duration(300)\n                    .attr(\"x\", function(d, i) { return ((barWidth + 1) * i) + 5; })\n                    .attr(\"y\", function(d) { return 150 - yScale(d.value); })\n                    .attr(\"height\", function(d) { return yScale(d.value); })\n                    .attr(\"width\", barWidth);\n                bars.exit()\n                    .transition()\n                    .duration(300)\n                    .attr(\"y\", 150)\n                    .attr(\"height\", 0)\n                    .style('fill-opacity', 1e-6)\n                    .remove();\n                var labels = histSvg\n                    .selectAll(\"text\")\n                    .data(data.hist);\n                labels.enter()\n                    .append(\"text\")\n                    .attr(\"x\", function(d, i) { return ((4 + (barWidth + 1) * i) + (barWidth * 0.5)) + 1; })\n                    .attr(\"y\", function(d) { return 145 - yScale(d.value); })\n                    .attr(\"fill\", \"#000\")\n                    .attr(\"height\", function(d) { return yScale(d.value); })\n                    .attr(\"width\", barWidth)\n                    .attr(\"font-size\", \"8px\")\n                    .attr(\"text-anchor\", \"middle\")\n                    .text(function(d) { return d.label; });\n                labels\n                    .transition()\n                    .duration(300)\n                    .attr(\"x\", function(d, i) { return (((barWidth + 1) * i) + (barWidth * 0.5)) + 5; })\n                    .attr(\"y\", function(d) {\n                        var y = 145 - yScale(d.value);\n                        if (y < 0) y = 20;\n                        return y;\n                    })\n                    .text(function(d) { return d.label; });\n                labels.exit()\n                    .transition()\n                    .duration(300)\n                    .attr(\"y\", 150)\n                    .attr(\"height\", 0)\n                    .style('fill-opacity', 1e-6)\n                    .remove();\n\n            });\n\n\n            var formatDays = function(d) {\n                if (Math.abs(d) === 0) return d;\n                if (Math.abs(d) < 30) return d + \" Days\";\n                if (Math.abs(d) < 360) return Math.round((d / 30.4) * 10) / 10 + \" Mos\";\n                return Math.round((d / 365) * 10) / 10 + \" Yrs\";\n            };\n\n\n\n            // Survival\n            var surSvg = d3.select(\"#cohortmenu-survival\").append(\"svg\");\n            var surLines = surSvg.append(\"g\")\n                .selectAll(\"cohortmenu-survival-percent-line\")\n                .data([0.25, 0.5, 0.75]);\n\n            surLines.enter()\n                .append(\"line\").attr(\"class\", \"cohortmenu-survival-percent-line\")\n                .attr(\"stroke-width\", 1)\n                .attr(\"stroke\", \"#EAEAEA\")\n                .attr(\"x1\", 0).attr(\"x2\", 250).attr(\"y1\", function(d) {\n                    return (d * 140);\n                }).attr(\"y2\", function(d) {\n                    return (d * 140);\n                });\n\n            var surXAxis = surSvg.append(\"g\").attr(\"class\", \"axisCohort\");\n            var surLayout = {\n                width: 250,\n                height: 170,\n                xScale: null,\n                yScale: null,\n                xAxis: d3.axisBottom().ticks(4).tickFormat(formatDays)\n            };\n            surSvg.attr(\"width\", '100%').attr(\"height\", surLayout.height);\n\n            var updateSurvival = function(cohorts) {\n\n                cohorts = cohorts.filter(function(c){return c.survival != null})\n                if(cohorts.length == 0) return;\n\n                var xDomain = cohorts.reduce(function(p, c) {\n                    p[0] = Math.min(p[0], c.survival.compute[0].t);\n                    p[1] = Math.max(p[1], c.survival.compute[c.survival.compute.length - 1].t);\n                    return p;\n                }, [Infinity, -Infinity]);\n\n                surLayout.xScale = d3.scaleLinear()\n                    .domain(xDomain)\n                    .range([0, surLayout.width - 1]);\n\n                surLayout.yScale = d3.scaleLinear()\n                    .domain([0, 1])\n                    .range([surLayout.height - 30, 0]);\n\n                var lineFunction = d3.line()\n                    .curve(d3.curveStepBefore)\n                    .x(function(d) { return Math.round(surLayout.xScale(d.t)); })\n                    .y(function(d) { return Math.round(surLayout.yScale(d.s)); });\n\n                surLayout.xAxis.scale(surLayout.xScale);\n                surXAxis.attr(\"transform\", \"translate(0, \" + (surLayout.yScale(0)) + \")\")\n                    .call(surLayout.xAxis)\n                    .selectAll(\"text\")\n                    .style(\"text-anchor\", function(d, i) { return (i === 0) ? \"start\" : \"center\"; });\n\n                surSvg.selectAll(\".survival-line\").remove();\n\n                for (var i = 0; i < cohorts.length; i++) {\n                    var cohort = cohorts[i];\n                    surSvg.append(\"path\")\n                        .datum(cohort.survival.compute)\n                        .attr(\"class\", \"survival-line\")\n                        .style(\"stroke\", cohort.color)\n                        .attr(\"d\", lineFunction);\n                }\n\n            };\n\n        }\n    }\n\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .directive('osBarchart', barchart);\n\n    /** @ngInject */\n    function barchart() {\n\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/barchart/barchart.html',\n            controller: BarchartController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function BarchartController(d3, osApi, $state, $timeout) {\n\n            var vm = this;\n            vm.datasource = osApi.getDataSource();\n\n            var n = 5, // number of layers\n                m = 58, // number of samples per layer\n                stack = d3.layout.stack(),\n                layers = stack(d3.range(n).map(function() {\n                    return bumpLayer(m, 0.1);\n                })),\n                yGroupMax = d3.max(layers, function(layer) {\n                    return d3.max(layer, function(d) {\n                        return d.y;\n                    });\n                }),\n                yStackMax = d3.max(layers, function(layer) {\n                    return d3.max(layer, function(d) {\n                        return d.y0 + d.y;\n                    });\n                });\n\n            var margin = {\n                    top: 40,\n                    right: 10,\n                    bottom: 20,\n                    left: 10\n                },\n                width = 960 - margin.left - margin.right,\n                height = 500 - margin.top - margin.bottom;\n\n            var x = d3.scaleOrdinal()\n                .domain(d3.range(m))\n                .rangeRoundBands([0, width], 0.08);\n\n            var y = d3.scaleLinear()\n                .domain([0, yStackMax])\n                .range([height, 0]);\n\n            var color = d3.scaleLinear()\n                .domain([0, n - 1])\n                .range([\"#aad\", \"#556\"]);\n\n            var xAxis = d3.svg.axis()\n                .scale(x)\n                .tickSize(0)\n                .tickPadding(6)\n                .orient(\"bottom\");\n\n            var svg = d3.select(\"body\").append(\"svg\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom)\n                .append(\"g\")\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n            var layer = svg.selectAll(\".layer\")\n                .data(layers)\n                .enter().append(\"g\")\n                .attr(\"class\", \"layer\")\n                .style(\"fill\", function(d, i) {\n                    return color(i);\n                });\n\n            var rect = layer.selectAll(\"rect\")\n                .data(function(d) {\n                    return d;\n                })\n                .enter().append(\"rect\")\n                .attr(\"x\", function(d) {\n                    return x(d.x);\n                })\n                .attr(\"y\", height)\n                .attr(\"width\", x.rangeBand())\n                .attr(\"height\", 0);\n\n            rect.transition()\n                .delay(function(d, i) {\n                    return i * 10;\n                })\n                .attr(\"y\", function(d) {\n                    return y(d.y0 + d.y);\n                })\n                .attr(\"height\", function(d) {\n                    return y(d.y0) - y(d.y0 + d.y);\n                });\n\n            svg.append(\"g\")\n                .attr(\"class\", \"x axis\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(xAxis);\n\n            d3.selectAll(\"input\").on(\"change\", change);\n\n            var timeout = $timeout(function() {\n                d3.select(\"input[value=\\\"grouped\\\"]\").property(\"checked\", true).each(change);\n            }, 2000);\n\n            function change() {\n                clearTimeout(timeout);\n                if (this.value === \"grouped\") transitionGrouped();\n                else transitionStacked();\n            }\n\n            function transitionGrouped() {\n                y.domain([0, yGroupMax]);\n\n                rect.transition()\n                    .duration(500)\n                    .delay(function(d, i) {\n                        return i * 10;\n                    })\n                    .attr(\"x\", function(d, i, j) {\n                        return x(d.x) + x.rangeBand() / n * j;\n                    })\n                    .attr(\"width\", x.rangeBand() / n)\n                    .transition()\n                    .attr(\"y\", function(d) {\n                        return y(d.y);\n                    })\n                    .attr(\"height\", function(d) {\n                        return height - y(d.y);\n                    });\n            }\n\n            function transitionStacked() {\n                y.domain([0, yStackMax]);\n\n                rect.transition()\n                    .duration(500)\n                    .delay(function(d, i) {\n                        return i * 10;\n                    })\n                    .attr(\"y\", function(d) {\n                        return y(d.y0 + d.y);\n                    })\n                    .attr(\"height\", function(d) {\n                        return y(d.y0) - y(d.y0 + d.y);\n                    })\n                    .transition()\n                    .attr(\"x\", function(d) {\n                        return x(d.x);\n                    })\n                    .attr(\"width\", x.rangeBand());\n            }\n\n            // Inspired by Lee Byron's test data generator.\n            function bumpLayer(n, o) {\n\n                function bump(a) {\n                    var x = 1 / (0.1 + Math.random()),\n                        y = 2 * Math.random() - 0.5,\n                        z = 10 / (0.1 + Math.random());\n                    for (var i = 0; i < n; i++) {\n                        var w = (i / n - y) * z;\n                        a[i] += x * Math.exp(-w * w);\n                    }\n                }\n\n                var a = [],\n                    i;\n                for (i = 0; i < n; ++i) a[i] = o + o * Math.random();\n                for (i = 0; i < 5; ++i) bump(a);\n                return a.map(function(d, i) {\n                    return {\n                        x: i,\n                        y: Math.max(0, d)\n                    };\n                });\n            }\n\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .run(runBlock);\n\n    /** @ngInject */\n    function runBlock($window, $exceptionHandler) { //, $log\n\n        // Route Errors To Angular\n        $window.onerror = function handleGlobalError(message, fileName, lineNumber, columnNumber, error) {\n            if (!error) {\n                error = new Error(message);\n                error.fileName = fileName;\n                error.lineNumber = lineNumber;\n                error.columnNumber = (columnNumber || 0);\n            }\n            $exceptionHandler(error);\n        };\n    }\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .config(routerConfig);\n\n    /** @ngInject */\n    function routerConfig($stateProvider, $urlRouterProvider) {\n\n        // Resolutions\n        var resolveDatasource = function(osApi) {\n            osApi.setBusy(true);\n            return new Promise(function(resolve) {\n                osApi.init().then(function() {\n                    resolve();\n                    angular.element(\"#main\").removeClass(\"container-main-full\");\n                    angular.element(\"#header\").css({ display: \"block\" });\n                    angular.element(\"#collectionPanel\").css({ display: \"none\" });\n                    // angular.element(\"#cohortMenu\").css({ display: \"none\" });\n                    // angular.element(\"#geneMenu\").css({ display: \"none\" });\n                    osApi.onNavChange.dispatch(\"\");\n                });\n            });\n        };\n\n        var resolveTools = function(osApi, $stateParams) {\n            return new Promise(function(resolve) {\n                resolveDatasource(osApi).then(function() {\n                    osApi.setDataSource($stateParams.datasource).then(function() {\n                        resolve();\n                        angular.element(\"#collectionPanel\").css({ display: \"none\" });\n                        // angular.element(\"#cohortMenu\").css({ display: \"none\" });\n                        // angular.element(\"#geneMenu\").css({ display: \"none\" });\n                        osApi.onNavChange.dispatch(\"TOOLS\");\n                    });\n\n                });\n            });\n        };\n\n\n        var prevDatasource = \"\";\n        var resolveTool = function(osApi, $stateParams) {\n            return new Promise(function(resolve) {\n                resolveTools(osApi, $stateParams).then(function() {\n                    if (osApi.getCohort() === null || $stateParams.datasource !== prevDatasource) {\n                        osApi.setDataSource($stateParams.datasource).then(function() {\n                            resolve();\n                            angular.element(\"#collectionPanel\").css({ display: \"block\" });\n                            // angular.element(\"#cohortMenu\").css({ display: \"block\" });\n                            // angular.element(\"#geneMenu\").css({ display: \"block\" });\n                            osApi.onNavChange.dispatch(\"TOOL\");\n                        });\n\n                    } else {\n                        angular.element(\"#collectionPanel\").css({ display: \"block\" });\n                        // angular.element(\"#cohortMenu\").css({ display: \"block\" });\n                        // angular.element(\"#geneMenu\").css({ display: \"block\" });\n                        osApi.onNavChange.dispatch(\"TOOL\");\n                        resolve();\n                    }\n                    prevDatasource = $stateParams.datasource;\n\n                });\n            });\n\n        };\n\n        var resolveLanding = function(osApi, $timeout) {\n            $timeout(function() {\n                angular.element(\"#main\").addClass(\"container-main-full\");\n                angular.element(\"#header\").css({ display: \"none\" });\n                angular.element(\"#collectionPanel\").css({ display: \"none\" });\n                // angular.element(\"#cohortMenu\").css({ display: \"none\" });\n                // angular.element(\"#geneMenu\").css({ display: \"none\" });\n                osApi.onNavChange.dispatch(\"\");\n            }, 200);\n        };\n\n\n        // States\n        $stateProvider\n            .state('landing', {\n                url: '/',\n                template: '<os-landing>',\n                datasource: false,\n                help: \"/\",\n                resolve: {\n                    resolveLanding: resolveLanding\n                }\n            })\n            .state('userdatasource', {\n                url: '/userdatasource',\n                template: '<os-userdatasource>',\n                datasource: false,\n                help: \"/\",\n                resolve: {\n                    resolveDatasource: resolveDatasource\n                }\n            })\n            .state('datasource', {\n                url: '/datasource',\n                template: '<os-datasource>',\n                datasource: false,\n                help: \"/\",\n                resolve: {\n                    resolveDatasource: resolveDatasource\n                }\n            })\n            .state('tools', {\n                url: '/tools/{datasource}',\n                template: '<os-tools>',\n                datasource: true,\n                help: \"/\",\n                resolve: {\n                    resolveTools: resolveTools\n                }\n            })\n            .state('scatter', {\n                url: '/scatter/{datasource}',\n                template: '<os-scatter>',\n                datasource: false,\n                help: \"/\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('spreadsheet', {\n                url: '/spreadsheet/{datasource}',\n                template: '<os-spreadsheet>',\n                datasource: true,\n                help: \"/spreadsheet.html\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('plsr', {\n                url: '/plsr/{datasource}',\n                template: '<os-plsr>',\n                datasource: true,\n                help: \"/\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('pca', {\n                url: '/pca/{datasource}',\n                template: '<os-pca>',\n                datasource: true,\n                help: \"/pca.html\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('comparecluster', {\n                url: '/cc/{datasource}',\n                template: '<os-compare-cluster>',\n                datasource: true,\n                help: \"/\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('markers', {\n                url: '/markers/{datasource}',\n                template: '<os-markers>',\n                datasource: true,\n                help: \"/markerspatients.html\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            // .state('ms', {\n            //     url: '/ms/{datasource}',\n            //     template: '<os-ms>',\n            //     datasource: true,\n            //     resolve: {\n            //         resolveTool: resolveTool\n            //     }\n            // })\n            .state('pathways', {\n                url: '/pathways/{datasource}',\n                template: '<os-pathways>',\n                datasource: true,\n                help: \"/pathways.html\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('timelines', {\n                url: '/timelines/{datasource}',\n                template: '<os-timelines>',\n                datasource: true,\n                help: \"/timelines.html\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('survival', {\n                url: '/survival/{datasource}',\n                template: '<os-survival>',\n                datasource: true,\n                help: \"/survival.html\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('sunburst', {\n                url: '/sunburst/{datasource}',\n                template: '<os-sunburst>',\n                datasource: true,\n                help: \"/\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('heatmap', {\n                url: '/heatmap/{datasource}',\n                template: '<os-heatmap>',\n                datasource: false,\n                help: \"/\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            })\n            .state('login', {\n                url: '/login/',\n                template: '<os-login>',\n                datasource: false,\n                help: \"/\",\n                resolve: {}\n            })\n            .state('genedashboard', {\n                url: '/genedashboard/{datasource}',\n                template: '<os-genedashboard>',\n                datasource: false,\n                help: \"/\",\n                resolve: { resolveTool : resolveTool}\n            })\n            .state('barcharts', {\n                url: '/barchart/{datasource}',\n                template: '<os-barchart>',\n                datasource: true,\n                help: \"/\",\n                resolve: {\n                    resolveTool: resolveTool\n                }\n            });\n\n        $urlRouterProvider.otherwise('/');\n    }\n\n})();\n/* global hello:false, jStat:false, vega:false,TWEEN:false, d3:false, $:false, signals:false, cytoscape:false, document:false, moment:false, _:false, localStorage:false, saveAs:false, TextEncoder:false */\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .constant('jStat', jStat)\n        .constant('TWEEN', TWEEN)\n        .constant('moment', moment)\n        .constant('d3', d3)\n     //   .constant('vega', vega)\n        .constant('cytoscape', cytoscape)\n        .constant('signals', signals)\n        .constant('$', $)\n        .constant('auth', hello)\n        .constant('localStorage', localStorage)\n        .constant('saveAs', saveAs)\n        .constant('TextEncoder', TextEncoder)\n        .constant('hello', hello)\n        .constant('_', _)\n        .constant('ML',ML);\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('oncoscape')\n        .config(config);\n\n    /** @ngInject */\n    function config($logProvider) {\n        $logProvider.debugEnabled(false);\n    }\n\n})();\nangular.module(\"oncoscape\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/components/barchart/barchart.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\"><br><label></label></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Heatmap</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div id=\\\"barchart-chart\\\"></div></div></section>\");\n$templateCache.put(\"app/components/cohortmenu/cohortmenu.html\",\"<div id=\\\"cohortMenu\\\" style=\\\"display:block\\\"><div class=\\\"cohort-menu\\\"><section><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item cohortmenu-hr\\\"><label>Selected Cohort</label><div class=\\\"input-group\\\"><input ng-readonly=\\\"vm.cohort.type==\\'ALL\\'\\\" style=\\\"background:#FFF;border-left-width:10px;border-left-color:{{vm.cohort.color}};\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"vm.cohort.name\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" tooltip=\\\"{{vm.cohort.type == \\'UNSAVED\\' ? \\'Save Cohort\\' : \\'Delete Cohort\\'}}\\\" tooltip-placement=\\\"left\\\" ng-if=\\\"vm.cohort.type!=\\'ALL\\'\\\" ng-click=\\\"vm.updateCohort()\\\"><span class=\\\"fa {{vm.cohort.type == \\'UNSAVED\\' ? \\'fa-plus\\' : \\'fa-times\\'}}\\\" aria-hidden=\\\"true\\\"></span></button> <button type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\" tooltip=\\\"Change Cohort\\\" tooltip-placement=\\\"left\\\"><span class=\\\"caret\\\"></span> <span class=\\\"sr-only\\\">Toggle Dropdown</span></button><ul class=\\\"dropdown-menu dropdown-menu-right\\\" style=\\\"width:260px;padding:0px;\\\"><li class=\\\"legend-bar markers-command hvr-sweep-to-right\\\" style=\\\"height:25px;border-color:{{item.color}};width:100%;padding-left:10px;\\\" ng-repeat=\\\"item in vm.cohorts\\\" ng-click=\\\"vm.setCohort(item)\\\">{{item.name}}</li></ul></div></div></div><div class=\\\"col-xs-12 form-item cohortmenu-hr\\\"><label class=\\\"cohortmenu-toggle-btn\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#cohortmenu-histogram\\\" tooltip=\\\"Show / Hide\\\" tooltip-placement=\\\"right\\\">Clinical Histogram <i class=\\\"fa fa-angle-down\\\" aria-hidden=\\\"true\\\"></i></label><div id=\\\"cohortmenu-histogram\\\" class=\\\"collapse in\\\" style=\\\"background:#FFF;border:1px solid #EAEAEA;\\\"><div id=\\\"cohortmenu-chart\\\" style=\\\"width:100%;height:150px;\\\"><div id=\\\"cohortmenu-single-value\\\" class=\\\"cohortmenu-single-value\\\"></div></div><div class=\\\"dropdown\\\" style=\\\"width:100%\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\" style=\\\"width:100%;border:0px solid #eaeaea;border-top-width:1px;\\\">{{vm.cohortFeature.label}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" style=\\\"width:260px;padding:0px;\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.cohortFeatures\\\" ng-click=\\\"vm.cohortFeature=item\\\">{{item.label}}</li></ul></div></div></div><div class=\\\"col-xs-12 form-item cohortmenu-hr\\\"><label class=\\\"cohortmenu-toggle-btn\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#cohortmenu-survival-box\\\" tooltip=\\\"Show / Hide\\\" tooltip-placement=\\\"right\\\">Survival Curve <i class=\\\"fa fa-angle-down\\\" aria-hidden=\\\"true\\\"></i></label><div id=\\\"cohortmenu-survival-box\\\" class=\\\"collapse in\\\" style=\\\"background:#FFF;border:1px solid #EAEAEA;padding:5px;\\\"><div id=\\\"cohortmenu-survival\\\"></div><label>Cohorts</label><div ng-repeat=\\\"item in vm.cohorts\\\" class=\\\"legend-bar markers-command hvr-sweep-to-right\\\" style=\\\"border-color:{{item.color}};padding-left:10px;\\\" ng-click=\\\"vm.setCohort(item)\\\">{{item.name}}</div><label>Selected Cohort</label><div class=\\\"legend-bar markers-command hvr-sweep-to-right\\\" style=\\\"height:25px;border-color:{{vm.cohort.color}};padding-left:10px;\\\">{{vm.cohort.name}} ({{vm.cohort.type}})</div></div></div><div class=\\\"col-xs-12 form-item\\\"><label class=\\\"cohortmenu-toggle-btn\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#cohortmenu-summary-box\\\" tooltip=\\\"Show / Hide\\\" tooltip-placement=\\\"right\\\">Cohort Summary <i class=\\\"fa fa-angle-down\\\" aria-hidden=\\\"true\\\"></i></label><div id=\\\"cohortmenu-summary-box\\\" class=\\\"collapse in\\\" style=\\\"background:#FFF;border:1px solid #EAEAEA;padding:5px;\\\" ng-bind-html=\\\"vm.cohortSummary\\\"></div></div><div id=\\\"cohortmenu-legand\\\"></div></div></section></div></div>\");\n$templateCache.put(\"app/components/collectionpanel/collectionpanel.html\",\"<div id=\\\"collectionPanel\\\" style=\\\"display:none\\\"><label class=\\\"tray-label tray-label-left\\\"><i class=\\\"fa fa-chevron-right\\\" aria-hidden=\\\"true\\\"></i></label><div class=\\\"collection-panel tray tray-left\\\"><section><ul class=\\\"nav nav-tabs\\\"><li class=\\\"active\\\"><a data-target=\\\"#cohorttab\\\" data-toggle=\\\"tab\\\">Cohorts</a></li><li><a data-target=\\\"#genesettab\\\" data-toggle=\\\"tab\\\">Genesets</a></li></ul><i id=\\\"collectionpanel-lock\\\" class=\\\"fa fa-lock tray-sticky-icon\\\" ng-click=\\\"vm.toggle()\\\" locked=\\\"true\\\" tooltip=\\\"Show / Hide\\\" tooltip-placement=\\\"left\\\"></i><div class=\\\"tab-content\\\"><div class=\\\"tab-pane active cont\\\" id=\\\"cohorttab\\\"><os-cohort-menu></os-cohort-menu></div><div class=\\\"tab-pane cont\\\" id=\\\"genesettab\\\"><os-gene-menu></os-gene-menu></div></div></section></div></div>\");\n$templateCache.put(\"app/components/colorpanel/colorpanel.html\",\"<div class=\\\"panel panel-default mdi\\\" style=\\\"padding-bottom:30px;\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\">Patient Color Options</h3><span class=\\\"pull-right clickable\\\" data-effect=\\\"fadeOut\\\" ng-click=\\\"vm.close()\\\" role=\\\"button\\\" tabindex=\\\"0\\\"><i class=\\\"fa fa-times\\\"></i></span></div><div class=\\\"panel-body\\\"><div class=\\\"row\\\" ng-if=\\\"vm.colorOptions.length>0\\\"><div class=\\\"col-xs-12 col-sm-9\\\"><h3>Enter Hugo Gene(s) Seperated By + And - Operators. (eg BRCA1 + BRCA2 - p53)</h3><div class=\\\"input-group\\\"><div class=\\\"input-group-btn\\\"><button style=\\\"width:150px;\\\" type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">{{vm.colorOption.name}}&nbsp;<span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\"><li ng-click=\\\"vm.colorOption=item;\\\" ng-repeat=\\\"item in vm.colorOptions\\\">{{item.name}}</li></ul></div><div class=\\\"input-group-btn\\\"><button style=\\\"width:100px;\\\" type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">{{vm.colorScale.name}}&nbsp;<span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\"><li ng-click=\\\"vm.colorScale=item;\\\" ng-repeat=\\\"item in vm.colorScales\\\">{{item.name}}</li></ul></div><div class=\\\"input-group-btn\\\"><button style=\\\"width:100px;border-radius:0px;\\\" type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">{{vm.colorBin.name}}&nbsp;<span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\"><li ng-click=\\\"vm.colorBin=item;\\\" ng-repeat=\\\"item in vm.colorBins\\\">{{item.name}}</li></ul></div><input ng-model=\\\"vm.geneColor\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Hugo Gene Symbol\\\" style=\\\"border-right-width: 0px; border-left-width: 0px; height:33px;\\\"> <span class=\\\"input-group-btn\\\"><button class=\\\"btn btn-default\\\" type=\\\"button\\\" ng-click=\\\"vm.setGeneColor()\\\">Submit</button></span></div></div></div><div class=\\\"row\\\"><div class=\\\"col-xs-12\\\"><button class=\\\"btn btn-default\\\" ng-click=\\\"vm.resetColor()\\\">Reset Color Options</button></div></div><div ng-repeat=\\\"item in vm.optPatientColors\\\"><br><div class=\\\"row\\\"><div class=\\\"col-xs-12\\\">{{item.name}}</div></div><div class=\\\"row\\\"><div class=\\\"col-xs-4\\\" ng-repeat=\\\"color in item.values\\\"><a class=\\\"hvr-sweep-to-right markers-command\\\" ng-click=\\\"vm.setColor(color)\\\">{{color.name}}</a></div></div></div></div></div>\");\n$templateCache.put(\"app/components/compareclusters/compareclusters.html\",\"<os-tray caption=\\\"Patients\\\" content=\\\"tray-content-block\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><br><br><div ng-if=\\\"vm.legendCaption.length>0\\\" class=\\\"col-xs-12 form-item\\\"><label>Patient {{vm.legendCaption}}</label><div ng-repeat=\\\"item in vm.legendNodes\\\" class=\\\"legend-bar\\\" style=\\\"border-color:{{item.color}};position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">{{item.name}}</div></div><div class=\\\"col-xs-12 form-item\\\"><label>Patient</label> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"width:100%;font-weight: 300;\\\" ng-click=\\\"vm.showPanelColor = true\\\">Color Options</button></div><div class=\\\"col-xs-12 form-item\\\"><label>Grid</label> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"width:100%;font-weight: 300;\\\" ng-click=\\\"vm.showPanelColor = true\\\">Layout Options</button></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Compare Clusters</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><br><div id=\\\"compareclusterChart\\\" class=\\\"pca\\\"></div></div></section>\");\n$templateCache.put(\"app/components/datasource/datasource.html\",\"<section class=\\\"datasource\\\"><div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-sm-12 col-md-12\\\"><br><p style=\\\"float:right;padding-top:22px;\\\"><a href=\\\"https://cancergenome.nih.gov/publications/publicationguidelines\\\" target=\\\"_blank\\\">Publication Guidelines</a></p><h1>Disease Datasets</h1></div></div><div class=\\\"row\\\"><ul><li ng-repeat=\\\"dataset in vm.datasets\\\" class=\\\"col-xs-12 col-sm-6 col-md-4 col-lg-3\\\" ng-click=\\\"vm.explore(\\'tools\\',dataset)\\\"><div class=\\\"datasource-btn\\\"><img class=\\\"datasource-img\\\" ng-src=\\\"/assets/images/img{{dataset.img}}\\\"><p class=\\\"datasource-h1\\\">{{dataset.name}}</p><p class=\\\"datasource-h2\\\">{{dataset.source}} | 11-17-2016</p></div></li></ul></div></div></section>\");\n$templateCache.put(\"app/components/genedashboard/genedashboard.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\"><br><label></label></div><div class=\\\"col-xs-12 form-item\\\"><label>Data Type</label><div class=\\\"input-group\\\"><div class=\\\"dropdown bs-dropdown\\\"><button style=\\\"width:260px;\\\" class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.dataType}}<span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:260px;\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.dataTypes\\\" ng-click=\\\"vm.dataType=item\\\">{{item}}</li></ul></div></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Selected Gene</label><div class=\\\"input-group\\\"><input style=\\\"background:#FFF;\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"vm.gene\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.updateGene()\\\"><span class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></span></button></div></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Basepair Window</label><br><label>Upstream</label><div class=\\\"input-group\\\"><input style=\\\"background:#FFF;\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"vm.range.up\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.updateGene()\\\"><span class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></span></button></div></div><label>Downstream</label><div class=\\\"input-group\\\"><input style=\\\"background:#FFF;\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"vm.range.down\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.updateGene()\\\"><span class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></span></button></div></div></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div class=\\\"tool-container\\\"><h2 class=\\\"h2-tool\\\">Gene Dashboard</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div id=\\\"genedashboard-chart\\\" class=\\\"genedashboard\\\"></div></div></section><os-color-panel ng-if=\\\"vm.showPanelColor\\\" close=\\\"vm.showPanelColor=false\\\"></os-color-panel>\");\n$templateCache.put(\"app/components/genemenu/genemenu.html\",\"<div id=\\\"geneMenu\\\" style=\\\"display:block\\\"><div class=\\\"gene-menu\\\"><section><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item genemenu-hr\\\"><label>Selected Geneset</label><div class=\\\"input-group\\\"><input ng-readonly=\\\"vm.geneset.type==\\'ALLGENES\\'\\\" style=\\\"background:#FFF;\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"vm.geneset.name\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" tooltip=\\\"{{vm.geneset.type == \\'UNSAVED\\' ? \\'Save Geneset\\' : \\'Delete Geneset\\'}}\\\" tooltip-placement=\\\"left\\\" ng-if=\\\"vm.geneset.type!=\\'ALLGENES\\'\\\" ng-click=\\\"vm.updateGeneset()\\\"><span class=\\\"fa {{vm.geneset.type == \\'UNSAVED\\' ? \\'fa-plus\\' : \\'fa-times\\'}}\\\" aria-hidden=\\\"true\\\"></span></button> <button type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\" tooltip=\\\"Change Geneset\\\" tooltip-placement=\\\"left\\\"><span class=\\\"caret\\\"></span> <span class=\\\"sr-only\\\">Toggle Dropdown</span></button><ul class=\\\"dropdown-menu dropdown-menu-right\\\" style=\\\"width:260px;padding:0px;\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-class=\\\"item.disable ? \\'genemenu-strikethrough\\' : \\'null\\'\\\" style=\\\"height:25px;width:100%;padding-left:10px;\\\" ng-repeat=\\\"item in vm.genesets | filter:{ show:true}\\\" ng-click=\\\"vm.setGeneset(item)\\\">{{item.name}}</li><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-click=\\\"vm.import()\\\" style=\\\"color:darkgray\\\">Other...</li></ul></div></div></div><div class=\\\"col-xs-12 form-item\\\"><label class=\\\"genemenu-toggle-btn\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#genemenu-summary-box\\\" tooltip=\\\"Show / Hide\\\" tooltip-placement=\\\"right\\\">Geneset Summary <i class=\\\"fa fa-angle-down\\\" aria-hidden=\\\"true\\\"></i></label><div id=\\\"genemenu-summary-box\\\" class=\\\"collapse in\\\" style=\\\"background:#FFF;border:1px solid #EAEAEA;padding:5px;\\\" ng-bind-html=\\\"vm.genesetSummary\\\"></div></div><div id=\\\"genemenu-legand\\\"></div></div></section></div></div>\");\n$templateCache.put(\"app/components/header/header.html\",\"<div id=\\\"header\\\" class=\\\"header\\\" style=\\\"display:none\\\"><nav class=\\\"navbar navbar-inverse navbar-fixed-top\\\"><div class=\\\"container-fluid\\\"><div class=\\\"navbar-header\\\"><button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#header-navbar\\\" aria-expanded=\\\"false\\\"><span class=\\\"sr-only\\\">Toggle navigation</span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span></button> <a class=\\\"navbar-brand\\\" href=\\\"#\\\" style=\\\"position:relative;\\\"><img alt=\\\"Brand\\\" src=\\\"/assets/images/logo-white.png\\\" class=\\\"header-logo-img\\\"> <span class=\\\"header-logo-text\\\">Oncoscape</span></a></div><div class=\\\"collapse navbar-collapse\\\" id=\\\"header-navbar\\\"><ul class=\\\"nav navbar-nav navbar-right\\\"><li class=\\\"dropdown\\\" ng-show=\\\"vm.showTools\\\"><a href=\\\"\\\" class=\\\"dropdown-toggle header-link\\\" data-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\"><span class=\\\"glyphicon glyphicon-stats\\\"></span>Tools</a><ul class=\\\"dropdown-menu row\\\" style=\\\"max-height:80vh;overflow:scroll;\\\"><li ng-repeat=\\\"item in vm.tools\\\" class=\\\"col-xs-12 col-sm-6 col-lg-4\\\" ng-click=\\\"vm.loadTool(item.route)\\\"><div class=\\\"datasource-btn\\\" style=\\\"color:#000\\\"><img class=\\\"datasource-img\\\" ng-src=\\\"/assets/images/{{item.img}}\\\"><p class=\\\"datasource-h1\\\">{{item.name}}</p><p class=\\\"datasource-h2\\\">{{item.desc}}</p></div></li></ul></li><li class=\\\"dropdown\\\" ng-show=\\\"vm.showDatasets\\\"><a href=\\\"\\\" class=\\\"dropdown-toggle header-link\\\" data-toggle=\\\"dropdown\\\" ng-click=\\\"vm.showDatasources()\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\"><span class=\\\"glyphicon glyphicon-th\\\"></span>Datasets</a></li><li class=\\\"dropdown\\\" ng-show=\\\"vm.showDatasets\\\"><a href=\\\"\\\" class=\\\"dropdown-toggle header-link\\\" data-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\"><span class=\\\"fa fa-users\\\"></span>Cohorts</a><div class=\\\"dropdown-menu container-fluid\\\"><div class=\\\"row\\\"><div ng-if=\\\"!vm.showImport\\\" class=\\\"col-xs-12 col-sm-3\\\" style=\\\"border:0px solid #DDD; border-right-width:1px;\\\"><h2 style=\\\"margin-top:0px;\\\">Create A Cohort</h2>Oncoscape allows you to pass cohorts of patients from one tool to the next. To create a cohort out of your current selection click create cohort.<br><button class=\\\"btn btn-primary\\\" style=\\\"margin-top:15px;\\\" ng-click=\\\"vm.addPatientCohort(); $event.stopPropagation();\\\">Create Cohort</button> <button class=\\\"btn btn-primary\\\" style=\\\"margin-top:15px;\\\" ng-click=\\\"vm.showImport=true; $event.stopPropagation();\\\">Import Cohort</button></div><div ng-if=\\\"vm.showImport\\\" class=\\\"col-xs-12 col-sm-3\\\" style=\\\"border:0px solid #DDD; border-right-width:1px;\\\"><h2 style=\\\"margin-top:0px;\\\">Import A Cohort</h2>Enter a comma seperated list of patient or sample IDs below and click import<br><input ng-model=\\\"vm.importName\\\" type=\\\"text\\\" class=\\\"form-control\\\" style=\\\"margin-top:5px;\\\" placeholder=\\\"Enter Cohort Name\\\"> <input ng-model=\\\"vm.importIds\\\" type=\\\"text\\\" class=\\\"form-control\\\" style=\\\"margin-top:5px;\\\" placeholder=\\\"eg. TCGA-01-0110, TCGA-02-0220\\\"> <button class=\\\"btn btn-primary\\\" style=\\\"margin-top:15px;\\\" ng-click=\\\"vm.importCohort(); $event.stopPropagation();\\\">Save</button> <button class=\\\"btn btn-primary\\\" style=\\\"margin-top:15px;\\\" ng-click=\\\"vm.showImport=false; $event.stopPropagation();\\\">Cancel</button></div><div class=\\\"col-xs-12 col-sm-9\\\"><h2 style=\\\"margin-top:0px;\\\">Your Cohorts</h2><div class=\\\"markers-command hvr-sweep-to-right header-cohort-btn\\\" ng-repeat=\\\"item in vm.cohorts\\\" ng-click=\\\"vm.setPatientCohort(item)\\\"><p class=\\\"datasource-h1\\\">{{item.name}}</p><p class=\\\"datasource-h2\\\">{{item.numPatients}} patients<br>{{item.numSamples}} samples<br>{{item.numClinical}} clinical records</p></div></div></div></div></li><li><a href=\\\"\\\" ng-click=\\\"vm.showHelp()\\\" target=\\\"_blank\\\" class=\\\"header-link\\\"><span class=\\\"glyphicon glyphicon-question-sign\\\"></span>Help</a></li><li><a href=\\\"http://resources.sttrcancer.org/oncoscape-contact\\\" class=\\\"header-link\\\"><span class=\\\"fa fa-comments\\\"></span>Feedback</a></li><li><a ng-show=\\\"vm.user == null\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\" class=\\\"header-link\\\"><span class=\\\"fa fa-user-circle\\\"></span>Login</a> <a ng-show=\\\"vm.user != null\\\" href=\\\"\\\" ng-click=\\\"vm.logout()\\\" class=\\\"header-link\\\"><span class=\\\"fa fa-user-circle\\\"></span>Logout</a></li></ul></div></div></nav></div><os-import-panel ng-if=\\\"vm.showImport\\\" close=\\\"vm.showImport=false\\\"></os-import-panel>\");\n$templateCache.put(\"app/components/heatmap/heatmap.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\"><br><label></label></div><div class=\\\"col-xs-12 form-item\\\"><label>Display Options</label><div class=\\\"legend-bar\\\" style=\\\"border-color:#000;position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">Row Dendrograms <label class=\\\"switch {{item.class}}\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"vm.rowDendrogram\\\" ng-change=\\\"vm.draw()\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div><div class=\\\"legend-bar\\\" style=\\\"border-color:#000;position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">Row Labels <label class=\\\"switch {{item.class}}\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"vm.rowLabels\\\" ng-change=\\\"vm.draw()\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div><div class=\\\"legend-bar\\\" style=\\\"border-color:#000;position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">Column Dendrograms <label class=\\\"switch {{item.class}}\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"vm.colDendrogram\\\" ng-change=\\\"vm.draw()\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div><div class=\\\"legend-bar\\\" style=\\\"border-color:#000;position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">Column Labels <label class=\\\"switch {{item.class}}\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"vm.colLabels\\\" ng-change=\\\"vm.draw()\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div><div class=\\\"legend-bar\\\" style=\\\"border-color:#000;position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">Grid Lines <label class=\\\"switch {{item.class}}\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"vm.gridlines\\\" ng-change=\\\"vm.draw()\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Color Scheme</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.colorScheme.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li ng-repeat=\\\"item in vm.colorSchemes\\\" ng-click=\\\"vm.colorScheme=item;vm.draw()\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Scale</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.scale.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li ng-repeat=\\\"item in vm.scales\\\" ng-click=\\\"vm.scale=item;vm.loadHeatmap()\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Dendrogram Clusters</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.dendrogramCluster.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li ng-repeat=\\\"item in vm.dendrogramClusters\\\" ng-click=\\\"vm.dendrogramCluster=item;vm.loadHeatmap()\\\">{{item.name}}</li></ul></div></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Heatmap</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div id=\\\"heatmap-chart\\\" style=\\\"position:relative\\\"></div><div id=\\\"tooltip\\\" class=\\\"hidden\\\"><p><span id=\\\"value\\\"></span></p></div></div></section>\");\n$templateCache.put(\"app/components/help/help.html\",\"<div class=\\\"help\\\"><iframe src=\\\"http://resources.sttrcancer.org/pca?embed=true\\\"></iframe></div>\");\n$templateCache.put(\"app/components/importpanel/importpanel.html\",\"<div class=\\\"panel panel-default mdi\\\" style=\\\"padding-bottom:30px;\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\">Geneset Import</h3><span class=\\\"pull-right clickable\\\" data-effect=\\\"fadeOut\\\" ng-click=\\\"vm.close()\\\" role=\\\"button\\\" tabindex=\\\"0\\\"><i class=\\\"fa fa-times\\\"></i></span></div><div class=\\\"panel-body\\\"><div class=\\\"row\\\" ng-show=\\\"vm.showGeneImport\\\" style=\\\"max-height:80vh !important\\\"><div class=\\\"col-xs-12 col-sm-3\\\" style=\\\"border:0px solid #DDD; border-right-width:1px;\\\"><h2 style=\\\"margin-top:0px;\\\">Create A Geneset</h2>Enter a comma seperated list of HUGO gene IDs or a weighted signature below and click save<br><input ng-model=\\\"vm.importGenesetName\\\" type=\\\"text\\\" class=\\\"form-control\\\" style=\\\"margin-top:5px;\\\" placeholder=\\\"Enter Geneset Name\\\"> <input ng-model=\\\"vm.importGeneIds\\\" type=\\\"text\\\" class=\\\"form-control\\\" style=\\\"margin-top:5px;\\\" placeholder=\\\"eg MLX,MAX or 0.9*MYC+1.5*MNT\\\"> <button class=\\\"btn btn-primary\\\" style=\\\"margin-top:15px;\\\" ng-click=\\\"vm.importGeneset(); $event.stopPropagation();\\\">Save</button> <button class=\\\"btn btn-primary\\\" style=\\\"margin-top:15px;\\\" ng-click=\\\"vm.close(); $event.stopPropagation();\\\">Cancel</button></div><div class=\\\"col-xs-12 col-sm-9\\\" style=\\\"max-height:inherit !important; overflow-y:scroll\\\"><h2 style=\\\"margin-top:0px;\\\">Your Genesets</h2><div class=\\\"markers-command hvr-sweep-to-right header-geneset-btn\\\" ng-repeat=\\\"item in vm.genesets\\\" ng-click=\\\"vm.setGenesetList(item); vm.close()\\\"><p class=\\\"datasource-h1\\\">{{item.name}}</p><p class=\\\"datasource-h2\\\">{{item.geneIds.length}} Genes<br>{{item.hugoIds.length}} HUGO symbols</p></div></div></div></div></div>\");\n$templateCache.put(\"app/components/landing/landing.html\",\"<div class=\\\"landing\\\"><header class=\\\"landing container\\\"><div class=\\\"row marquee marquee-bg\\\"><div class=\\\"col-sm-12\\\"><div class=\\\"marquee-x\\\"></div><div class=\\\"header-content\\\" style=\\\"text-align:center;z-index: 999;pointer-events:none;\\\"><h1 class=\\\"landing-h1\\\">Oncoscape</h1><p class=\\\"landing-h2\\\">Cancer Explorer</p><span class=\\\"landing-buttons\\\" style=\\\"pointer-events:all;\\\"><a class=\\\"btn btn-outline btn-xl page-scroll\\\" ng-click=\\\"vm.getStarted()\\\">Explore</a> <a class=\\\"btn btn-outline btn-xl page-scroll\\\" href=\\\"/documentation/\\\" target=\\\"_blank\\\">Learn More</a></span></div></div></div></header><div class=\\\"container-fluid\\\" style=\\\"background-color:#000; color:#FFF;padding-top:150px;padding-bottom:150px;\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 col-sm-7\\\"><h1 style=\\\"font-size:50px;pointer-events:none;\\\">Our Mission</h1><p style=\\\"font-size:30px;line-height:50px;\\\">Empower researchers to discover novel patterns and relationships between clinical and molecular factors.</p><a class=\\\"btn btn-outline btn-xl page-scroll\\\" href=\\\"http://cancergenome.nih.gov/publications/publicationguidelines\\\">Publishing Guidelines</a></div><div class=\\\"hidden-xs col-sm-5\\\" style=\\\"text-align:center\\\"><img src=\\\"assets/images/thumb.png\\\" class=\\\"img-responsive\\\" alt=\\\"\\\" style=\\\"display:inline-block;height:100%;\\\"></div></div></div></div>\");\n$templateCache.put(\"app/components/layoutpanel/layoutpanel.html\",\"<div class=\\\"panel panel-default mdi\\\" style=\\\"padding-bottom:30px;\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\">Patient Color Options</h3><span class=\\\"pull-right clickable\\\" data-effect=\\\"fadeOut\\\" ng-click=\\\"vm.close()\\\" role=\\\"button\\\" tabindex=\\\"0\\\"><i class=\\\"fa fa-times\\\"></i></span></div><div class=\\\"panel-body\\\"><div class=\\\"row\\\" ng-if=\\\"vm.colorOptions.length>0\\\"><div class=\\\"col-xs-12 col-sm-9\\\"><h3>Enter Hugo Gene(s) Seperated By + And - Operators. (eg BRCA1 + BRCA2 - p53)</h3><div class=\\\"input-group\\\"><div class=\\\"input-group-btn\\\"><button style=\\\"width:150px;\\\" type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">{{vm.colorOption.name}}&nbsp;<span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\"><li ng-click=\\\"vm.colorOption=item;\\\" ng-repeat=\\\"item in vm.colorOptions\\\">{{item.name}}</li></ul></div><div class=\\\"input-group-btn\\\"><button style=\\\"width:100px;\\\" type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">{{vm.colorScale.name}}&nbsp;<span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\"><li ng-click=\\\"vm.colorScale=item;\\\" ng-repeat=\\\"item in vm.colorScales\\\">{{item.name}}</li></ul></div><div class=\\\"input-group-btn\\\"><button style=\\\"width:100px;border-radius:0px;\\\" type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">{{vm.colorBin.name}}&nbsp;<span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\"><li ng-click=\\\"vm.colorBin=item;\\\" ng-repeat=\\\"item in vm.colorBins\\\">{{item.name}}</li></ul></div><input ng-model=\\\"vm.geneColor\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Hugo Gene Symbol\\\" style=\\\"border-right-width: 0px; border-left-width: 0px; height:33px;\\\"> <span class=\\\"input-group-btn\\\"><button class=\\\"btn btn-default\\\" type=\\\"button\\\" ng-click=\\\"vm.setGeneColor()\\\">Submit</button></span></div></div></div><div class=\\\"row\\\"><h3 class=\\\"col-sm-3\\\" ng-repeat=\\\"item in vm.optPatientColors\\\">{{item.name}}<br><div ng-repeat=\\\"color in item.values\\\"><a href=\\\"\\\" style=\\\"font-size:12px;\\\" class=\\\"hvr-sweep-to-right markers-command\\\" ng-click=\\\"vm.setColor(color)\\\">{{color.name}}</a></div></h3></div></div><div style=\\\"position:absolute;bottom:0px;width:100%;padding:10px;font-size:10px;text-align:center;\\\">Percentages Indicate Data Availibility</div></div>\");\n$templateCache.put(\"app/components/loader/loader.html\",\"<div class=\\\"loader-modal\\\"><div class=\\\"loader\\\"><div class=\\\"loader__bar\\\"></div><div class=\\\"loader__bar\\\"></div><div class=\\\"loader__bar\\\"></div><div class=\\\"loader__bar\\\"></div><div class=\\\"loader__bar\\\"></div><div class=\\\"loader__ball\\\"></div></div></div>\");\n$templateCache.put(\"app/components/login/login.html\",\"<section class=\\\"datasource\\\"><div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-sm-12 col-md-12\\\"><br><h1>Login</h1><button ng-click=\\\"vm.login(vm.networks[1]);\\\">Grant Permission</button></div></div></div></section>\");\n$templateCache.put(\"app/components/markers/markers.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize()\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\"><label>Edge Visibility</label><div class=\\\"legend-bar-container\\\"><div ng-repeat=\\\"item in vm.optEdgeColors\\\" class=\\\"legend-bar\\\" style=\\\"border-color:{{item.color}};position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">{{item.name}} {{item.count}} <label class=\\\"switch\\\" style=\\\"float:right\\\" tooltip=\\\"Toggle Visibility\\\" tooltip-placement=\\\"left\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"item.show\\\" ng-change=\\\"vm.edgeToggle(item)\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div></div></div><div ng-if=\\\"vm.legendNodes.length>0\\\" class=\\\"col-xs-12 form-item\\\"><label>Patient {{vm.legendCaption}}</label><div class=\\\"legend-bar-container\\\"><div ng-repeat=\\\"item in vm.legendNodes\\\" class=\\\"legend-bar legend-bar-button\\\" style=\\\"border-color:{{item.color}};\\\">{{item.name}}<span id=\\\"{{item.id}}\\\" class=\\\"legend-count\\\"></span> <label style=\\\"float:right;padding-top:5px;\\\" class=\\\"btn-group\\\"><button tooltip=\\\"Deselect\\\" tooltip-placement=\\\"left\\\" ng-click=\\\"vm.deselectColor(item)\\\" class=\\\"btn btn-xs btn-default\\\" style=\\\"background-color:#039BE5;color:#FFF;text-shadow: 0 1px rgba(0, 0, 0, 0.2);width:24px;margin-right:1px;\\\"><i class=\\\"fa fa-circle-o\\\"></i></button> <button tooltip=\\\"Select\\\" tooltip-placement=\\\"left\\\" ng-click=\\\"vm.selectColor(item)\\\" class=\\\"btn btn-xs btn-default\\\" style=\\\"background-color:#039BE5;color:#FFF;text-shadow: 0 1px rgba(0, 0, 0, 0.2);width:24px;margin-left:1px;\\\"><i class=\\\"fa fa-dot-circle-o\\\"></i></button></label></div></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Patient Options</label><div class=\\\"btn-group\\\" role=\\\"group\\\" style=\\\"display: block\\\"><button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"width:50%; font-weight: 300;\\\" title=\\\"Zoom Reset\\\" ng-click=\\\"vm.showPanelLayout = true\\\">Layouts</button> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"width:50%; font-weight: 300;\\\" title=\\\"Zoom Selection\\\" ng-click=\\\"vm.showPanelColor = true\\\">Colors</button></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Gene Set</label><div class=\\\"input-group\\\"><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\" style=\\\"padding-right:30px;\\\">{{vm.optGeneSet.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:100%\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.optGeneSets\\\" ng-click=\\\"vm.optGeneSet=item\\\">{{item.name}}</li></ul></div><div class=\\\"input-group-addon btn-help-icon\\\"><a href=\\\"http://resources.sttrcancer.org/api/#gene-sets\\\" target=\\\"_blank\\\"><i style=\\\"color:#000\\\" class=\\\"glyphicon glyphicon-question-sign\\\"></i></a></div></div></div><div class=\\\"col-xs-6 form-item\\\" style=\\\"padding-right:5px\\\"><label>Command Mode</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\" style=\\\"padding-right:30px;\\\">{{vm.optCommandMode.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:100%\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.optCommandModes\\\" ng-click=\\\"vm.optCommandMode=item\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-6 form-item\\\" style=\\\"padding-left:5px\\\"><label>Search {{vm.searchCount}}</label><div class=\\\"input-group\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.search\\\" ng-enter=\\\"vm.exeSearch()\\\" placeholder=\\\"\\\"><div class=\\\"input-group-addon btn-help-icon\\\" ng-click=\\\"vm.exeSearch()\\\">Go</div></div></div><div class=\\\"col-xs-12 form-item\\\" ng-if=\\\"vm.optCommandMode.name==\\'Sequential\\'\\\"><label>Commands</label><br><a ng-click=\\\"vm.cmd(\\'ShowSelectedEdges\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Show Edges of Selected</a> <a ng-click=\\\"vm.cmd(\\'HideSelectedEdges\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Hide Edges of Selected</a> <a ng-click=\\\"vm.cmd(\\'HideUnselectedEdges\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Hide Edges of Unselected</a> <a ng-click=\\\"vm.cmd(\\'HideAllEdges\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Hide All Edges</a> <a ng-click=\\\"vm.cmd(\\'SelectInverse\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Invert Node Selection</a> <a ng-click=\\\"vm.cmd(\\'SelectConnected\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Select Connected Nodes</a> <a ng-click=\\\"vm.cmd(\\'HideUnselectedNodes\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Hide Unselected Nodes</a> <a ng-click=\\\"vm.cmd(\\'ShowAllNodes\\')\\\" class=\\\"markers-command hvr-sweep-to-right\\\">Show All Nodes</a></div><div class=\\\"col-xs-12 form-item\\\"><label>Lock Selections</label><div class=\\\"btn-group\\\" role=\\\"group\\\" style=\\\"display: block\\\"><button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" ng-click=\\\"vm.lock(\\'patient\\')\\\" style=\\\"width:50%; font-weight: 300;\\\" title=\\\"Patient Selection Lock\\\"><i class=\\\"fa fa-unlock\\\" ng-show=\\\"!vm.lockPatients\\\"></i> <i class=\\\"fa fa-lock\\\" ng-show=\\\"vm.lockPatients\\\"></i> Patients</button> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" ng-click=\\\"vm.lock(\\'gene\\')\\\" style=\\\"width:50%; font-weight: 300;\\\" title=\\\"Gene Selection Lock\\\"><i class=\\\"fa fa-unlock\\\" ng-show=\\\"!vm.lockGenes\\\"></i> <i class=\\\"fa fa-lock\\\" ng-show=\\\"vm.lockGenes\\\"></i> Genes</button></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Zoom</label><div class=\\\"btn-group\\\" role=\\\"group\\\" style=\\\"display: block\\\"><button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" ng-click=\\\"vm.zoom.reset()\\\" style=\\\"width:50%; font-weight: 300;\\\" title=\\\"Zoom Reset\\\">Fit</button> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" ng-click=\\\"vm.zoom.fit()\\\" style=\\\"width:50%; font-weight: 300;\\\" title=\\\"Zoom Selection\\\">Selected</button></div></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div id=\\\"markers-chart\\\" class=\\\"markers-chart\\\"></div><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Markers + Patients</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span> &mdash; <span class=\\\"h3-tool\\\">{{vm.optPatientLayout.name}}</span></div></section><div id=\\\"modalEdge\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"><div class=\\\"modal-dialog\\\" role=\\\"document\\\"><div class=\\\"modal-content\\\"><div class=\\\"modal-body\\\"><h2 style=\\\"margin-top:0px;\\\">Your request would add {{vm.edgeCounts.total}} edges to the graph.</h2><p>To improve performance + readability you may want to disable some of the edges.</p><div class=\\\"legend\\\" ng-repeat=\\\"item in vm.optEdgeColors | filter:{show:true}\\\"><label class=\\\"switch\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"item.show\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label> <span style=\\\"padding-left:20px;\\\">{{item.name}} ({{vm.edgeCounts[item.abv]}})</span></div></div><div style=\\\"position:absolute;right:10px;bottom:10px;\\\"><button class=\\\"btn btn-default\\\" ng-click=\\\"vm.hideModal()\\\">Cancel</button> <button class=\\\"btn btn-primary\\\" ng-click=\\\"vm.filterModelEdge()\\\">Continue</button></div></div></div></div><os-color-panel ng-if=\\\"vm.showPanelColor\\\" close=\\\"vm.showPanelColor=false\\\"></os-color-panel><div class=\\\"panel panel-default mdi\\\" ng-if=\\\"vm.showPanelLayout\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\">Patient Layout</h3><span class=\\\"pull-right clickable\\\" data-effect=\\\"fadeOut\\\" ng-click=\\\"vm.showPanelLayout=false\\\"><i class=\\\"fa fa-times\\\"></i></span></div><div class=\\\"panel-body\\\"><div class=\\\"row\\\"><table class=\\\"tbl\\\"><thead><tr><th>Method</th><th>Gene Set</th><th>Input Data</th><th>Data Source</th></tr></thead><tbody><tr ng-repeat=\\\"item in vm.optPatientLayouts\\\" ng-click=\\\"vm.optPatientLayout=item;vm.showPanelLayout=false;\\\"><td>{{item.dataType}}</td><td>{{item.geneset}}</td><td>{{item.input}}</td><td>{{item.source}}</td></tr></tbody></table></div></div></div>\");\n$templateCache.put(\"app/components/parallelcoord/parallelcoord.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\"><br><label></label></div><div class=\\\"col-xs-12 form-item\\\"><label>Selected Gene</label><div class=\\\"input-group\\\"><input style=\\\"background:#FFF;\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"vm.gene\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.updateGene()\\\"><span class=\\\"fa fa-plus\\\" aria-hidden=\\\"true\\\"></span></button></div></div></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div class=\\\"tool-container\\\"><h2 class=\\\"h2-tool\\\">Parallel Coordinates</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div id=\\\"parallelcoord-chart\\\" class=\\\"parallelcoord\\\"></div></div></section><os-color-panel ng-if=\\\"vm.showPanelColor\\\" close=\\\"vm.showPanelColor=false\\\"></os-color-panel>\");\n$templateCache.put(\"app/components/pathways/pathways.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><br><br><div class=\\\"col-xs-12 form-item\\\"><label>Search</label> <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.search\\\"></div><div class=\\\"col-xs-12 form-label\\\"><h2>Legend</h2><span class=\\\"legend-bar\\\" style=\\\"border-color: green\\\">Activation</span> <span class=\\\"legend-bar\\\" style=\\\"border-color: red\\\">Inhibition</span> <span class=\\\"legend-bar\\\" style=\\\"border-color: #38347B\\\">Modification</span> <span class=\\\"legend-bar\\\" style=\\\"border-color: #056ce1\\\">Genes</span></div></div></section></os-tray><section class=\\\"tray-content-block\\\" style=\\\"padding-right:0px;\\\"><div id=\\\"pathways-chart\\\" class=\\\"pathways-chart\\\"></div><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Pathways</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span></div></section><div class=\\\"modal fade pathways\\\" id=\\\"gbm-webpage\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"><div class=\\\"modal-dialog\\\" role=\\\"document\\\"><div class=\\\"modal-content\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button><h4 class=\\\"modal-title\\\" id=\\\"myModalLabel\\\">{{vm.tip}}</h4></div><iframe class=\\\"modal-iframe\\\" ng-src=\\\"{{vm.frame}}\\\"></iframe></div></div></div>\");\n$templateCache.put(\"app/components/pca/pca.html\",\"<os-tray content=\\\"tray-content-block\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\"><div class=\\\"kanban-column\\\"><label>History</label><div class=\\\"portlet legend-bar-container\\\"><div class=\\\"portlet-content\\\"><div class=\\\"input-group\\\"><input style=\\\"background:#FFF;\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"vm.base.title\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" tooltip=\\\"{{vm.base.edit ? \\'Close Editor\\' : \\'Edit Calculation\\'}}\\\" tooltip-placement=\\\"left\\\" ng-click=\\\"vm.copyBase()\\\"><span class=\\\"fa {{vm.base.edit ? \\'fa-close\\' : \\'fa-pencil\\'}}\\\" aria-hidden=\\\"true\\\" style=\\\"border-color:#FFF\\\"></span></button> <button type=\\\"button\\\" class=\\\"btn btn-default\\\" aria-hidden=\\\"true\\\" tooltip=\\\"{{vm.base.edit ? \\'Run Calculation\\' : \\'Toggle Visibility\\'}}\\\" tooltip-placement=\\\"left\\\" style=\\\"{{vm.base.edit ? \\'background-color:#47a8d8\\' : \\'\\'}}\\\" ng-click=\\\"vm.updateBaseview()\\\"><span class=\\\"fa {{vm.base.edit ? \\'fa-refresh\\' : \\'fa-eye\\'}}\\\" style=\\\"{{vm.base.edit ? \\'color:#FFF\\' : (vm.base.visibility == \\'visible\\' ? \\'color:#039BE5\\' : \\'color:grey\\')}}\\\"></span></button></div></div><div class=\\\"input-group\\\" ng-if=\\\"vm.base.edit\\\" style=\\\"width:100%\\\"><div class=\\\"dropdown bs-dropdown\\\" style=\\\"max-width:230px\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.temp.data.selected.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.temp.data.types\\\" ng-click=\\\"vm.temp.data.selected.name=item.name\\\">{{item.name}}</li></ul></div><div ng-repeat=\\\"item in vm.temp.params.bool\\\" style=\\\"position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">{{item.name}} <label class=\\\"switch\\\" style=\\\"float:right\\\" tooltip=\\\"Subset input data\\\" tooltip-placement=\\\"left\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"item.use\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div></div><div ng-if=\\\"!vm.base.edit\\\">Data: {{vm.base.data.selected.name}}<br>Geneset: {{vm.base.params.bool.geneset.use ? vm.base.params.bool.geneset.name : \\'All Genes\\'}}<br>Cohort: {{vm.base.params.bool.cohort.use ? vm.base.params.bool.cohort.name : \\\"All Patients + Samples\\\"}}</div></div><div class=\\\"portlet-content\\\" ng-repeat=\\\"item in vm.overlay\\\"><div class=\\\"input-group\\\"><input style=\\\"background:#FFF;\\\" class=\\\"form-control\\\" aria-label=\\\"Text input with segmented button dropdown\\\" ng-model=\\\"item.title\\\" onfocus=\\\"this.select();\\\"><div class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" tooltip=\\\"{{item.edit ? \\'Close Editor\\' : \\'Edit Calculation\\'}}\\\" tooltip-placement=\\\"left\\\" ng-click=\\\"vm.copyItem(item)\\\"><span class=\\\"fa {{item.edit ? \\'fa-close\\' : \\'fa-pencil\\'}}\\\" aria-hidden=\\\"true\\\" style=\\\"border-color:#FFF\\\"></span></button> <button type=\\\"button\\\" class=\\\"btn btn-default\\\" aria-hidden=\\\"true\\\" tooltip=\\\"{{item.edit ? \\'Run Calculation\\' : \\'Toggle Visibility\\'}}\\\" tooltip-placement=\\\"left\\\" style=\\\"{{item.edit ? \\'background-color:#47a8d8\\' : \\'\\'}}\\\" ng-model=\\\"item\\\" ng-click=\\\"vm.updateItemview(item)\\\"><span class=\\\"fa {{item.edit ? \\'fa-refresh\\' : \\'fa-eye\\'}}\\\" style=\\\"{{item.edit ? \\'color:#FFF\\' : (item.visibility == \\'visible\\' ? \\'color:#039BE5\\' : \\'color:grey\\')}}\\\"></span></button></div></div><div class=\\\"input-group\\\" ng-if=\\\"item.edit\\\" style=\\\"width:100%\\\"><div class=\\\"dropdown bs-dropdown\\\" style=\\\"max-width:230px\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{item.data.selected.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"subitem in item.data.types\\\" ng-click=\\\"item.data.selected.name=subitem.name\\\">{{subitem.name}}</li></ul></div></div><div ng-if=\\\"!item.edit\\\">Data: {{item.data.selected.name}}<br></div></div><button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"width:100%;font-weight: 300;border:white; text-align:left;color:#039BE5\\\" ng-click=\\\"vm.copyItem();\\\"><span class=\\\"fa fa-plus\\\" style=\\\"color:#039BE5; padding-right:7px\\\"></span>Layer</button></div></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Legend</label><div class=\\\"legend-bar-container\\\"><label style=\\\"margin:10px\\\"><b>{{vm.legendCaption}}</b></label> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"float:right; border:white\\\" ng-click=\\\"vm.showPanelColor = true\\\"><span class=\\\"fa fa-pencil\\\"></span></button><div ng-repeat=\\\"item in vm.legendNodes\\\" class=\\\"legend-bar legend-bar-button\\\" style=\\\"border-color:{{item.color}}\\\">{{item.name}}<span id=\\\"{{item.id}}\\\" class=\\\"legend-count\\\"></span> <label style=\\\"float:right;padding-top:5px;\\\" class=\\\"btn-group\\\"><button tooltip=\\\"Deselect\\\" tooltip-placement=\\\"left\\\" ng-click=\\\"vm.deselectColor(item)\\\" class=\\\"btn btn-xs btn-default\\\" style=\\\"background-color:#47a8d8;color:#FFF;text-shadow: 0 1px rgba(0, 0, 0, 0.2);width:24px;margin-right:1px;\\\"><i class=\\\"fa fa-circle-o\\\"></i></button> <button tooltip=\\\"Select\\\" tooltip-placement=\\\"left\\\" ng-click=\\\"vm.selectColor(item)\\\" class=\\\"btn btn-xs btn-default\\\" style=\\\"background-color:#47a8d8;color:#FFF;text-shadow: 0 1px rgba(0, 0, 0, 0.2);width:24px;margin-left:1px;\\\"><i class=\\\"fa fa-dot-circle-o\\\"></i></button></label></div></div></div></div></section></os-tray><div id=\\\"modalRun\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"><div class=\\\"modal-dialog\\\" role=\\\"document\\\"><div class=\\\"modal-content\\\"><div class=\\\"modal-body\\\"><h2 style=\\\"margin-top:0px;\\\">Estimated runtime is approximately {{vm.runTime}}.</h2></div><div style=\\\"position:absolute;right:10px;bottom:10px;\\\"><button class=\\\"btn btn-default\\\" ng-click=\\\"vm.hideModal()\\\">Cancel</button> <button class=\\\"btn btn-primary\\\" ng-click=\\\"vm.callBaseMethod()\\\">Continue</button></div></div></div></div><div id=\\\"modal_intersection\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"><div class=\\\"modal-dialog\\\" role=\\\"document\\\"><div class=\\\"modal-content\\\"><div class=\\\"modal-body\\\"><div style=\\\"margin-top:0px;margin-bottom:20px\\\">Sorry, the datasets chosen have no intersecting markers. Correlation calculation is impossible using {{vm.geneSet.name}}.</div><div style=\\\"position:absolute;right:10px;bottom:10px;\\\"><button class=\\\"btn btn-default\\\" ng-click=\\\"vm.hideModal()\\\">Return</button></div></div></div></div></div><div id=\\\"modal_NArun\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"><div class=\\\"modal-dialog\\\" role=\\\"document\\\"><div class=\\\"modal-content\\\"><div class=\\\"modal-body\\\"><span style=\\\"margin-top:0px;\\\"><h3>Sorry, PCA could not be calculated.</h3><br>Geneset: {{vm.geneSet.name}}<br>Reason: {{vm.error}}</span></div><div style=\\\"position:absolute;right:10px;bottom:10px;\\\"><button class=\\\"btn btn-default\\\" ng-click=\\\"vm.hideModal()\\\">Return</button></div></div></div></div><section class=\\\"tray-content-block\\\"><div class=\\\"tool-container\\\"><h2 class=\\\"h2-tool\\\">Principal Component Analysis</h2><span class=\\\"h3-tool\\\">{{vm.base.source.source}} {{vm.base.source.name}}</span><div id=\\\"pca-chart\\\" class=\\\"pca\\\"></div></div></section><os-color-panel ng-if=\\\"vm.showPanelColor\\\" close=\\\"vm.showPanelColor=false\\\"></os-color-panel>\");\n$templateCache.put(\"app/components/plsr/plsr.html\",\"<os-tool-menu datasource=\\\"{{vm.datasource}}\\\" change=\\\"vm.addCohortGene()\\\"></os-tool-menu><os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-label\\\"><h2>Filters</h2></div><div class=\\\"col-xs-12 form-item\\\"><label>Gene Set</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.geneset.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li ng-repeat=\\\"item in vm.genesets\\\" ng-click=\\\"vm.geneset=item\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Data Source</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.collection.source}} - {{vm.collection.type}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li ng-repeat=\\\"item in vm.datasource.molecular\\\" ng-click=\\\"vm.collection=item\\\">{{item.source}} - {{item.type}}</li></ul></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Age At Diagnosis (Years)</label><div range-slider=\\\"\\\" min=\\\"vm.dx.bound.min\\\" model-min=\\\"vm.dx.value.min\\\" max=\\\"vm.dx.bound.max\\\" model-max=\\\"vm.dx.value.max\\\" prevent-equal-min-max=\\\"true\\\" show-values=\\\"true\\\" attach-handle-values=\\\"true\\\" on-handle-up=\\\"vm.filterChange()\\\"></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Survival (Days)</label><div range-slider=\\\"\\\" min=\\\"vm.dd.bound.min\\\" model-min=\\\"vm.dd.value.min\\\" max=\\\"vm.dd.bound.max\\\" model-max=\\\"vm.dd.value.max\\\" prevent-equal-min-max=\\\"\\\" show-values=\\\"true\\\" attach-handle-values=\\\"true\\\" on-handle-up=\\\"vm.filterChange()\\\"></div></div><div class=\\\"col-xs-12 form-label\\\"><h2>Legend</h2><span class=\\\"legend-bar\\\" style=\\\"border-color: #FF9800\\\">Age At Diagnosis</span> <span class=\\\"legend-bar\\\" style=\\\"border-color: #38347b\\\">Survial</span> <span class=\\\"legend\\\"><span class=\\\"legend-dot\\\" style=\\\"background-color:#039BE5\\\"></span>Genes</span></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div class=\\\"tool-container\\\"><h2 class=\\\"h2-tool\\\">Partial Least Squares Regression</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div id=\\\"plsr-chart\\\" class=\\\"pca\\\"></div></div></section>\");\n$templateCache.put(\"app/components/spreadsheet/spreadsheet.html\",\"<os-tray caption=\\\"Patients\\\" content=\\\"tray-content-block\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\"><label>Clinical Collections</label><div class=\\\"input-group\\\"><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.collection.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:260px;\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.collections\\\" ng-click=\\\"vm.collection=item\\\">{{item.name}}</li></ul></div><div class=\\\"input-group-addon btn-help-icon\\\"><a style=\\\"color:#000;\\\" href=\\\"http://resources.sttrcancer.org/api/#clinical-data\\\" target=\\\"_blank\\\"><i class=\\\"glyphicon glyphicon-question-sign\\\"></i></a></div></div></div><div class=\\\"col-xs-12 form-item\\\"><label>CSV Export</label><div class=\\\"btn-group\\\" role=\\\"group\\\" style=\\\"display: block\\\"><button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"width:50%; font-weight: 300;\\\" ng-click=\\\"vm.exportCsv(\\'selected\\')\\\">Selected</button> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" style=\\\"width:50%; font-weight: 300;\\\" ng-click=\\\"vm.exportCsv(\\'all\\')\\\">All</button></div></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div class=\\\"tool-container\\\"><h2 class=\\\"h2-tool\\\">Spreadsheet</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span> <button ng-click=\\\"vm.sortSelected()\\\" class=\\\"btn btn-default\\\" style=\\\"position:absolute; left: 310px;top: 30px;\\\" tooltip=\\\"Move Selected Rows To The Top Of The Grid\\\" tooltip-placement=\\\"right\\\">Selected On Top</button> <button ng-click=\\\"vm.showPanelColumns=true\\\" class=\\\"btn btn-default\\\" style=\\\"position:absolute; right: 310px;top: 30px;\\\" tooltip=\\\"Toggle Columns On + Off\\\" tooltip-placement=\\\"right\\\">Select Columns</button><div class=\\\"grid\\\" id=\\\"spreadsheet-grid\\\" ui-grid=\\\"vm.options\\\" ui-grid-selection=\\\"\\\" ui-grid-resize-columns=\\\"\\\" ui-grid-move-columns=\\\"\\\" ui-grid-pinning=\\\"\\\" ui-grid-autoresize=\\\"\\\" ui-grid-grouping=\\\"\\\"></div></div></section><div class=\\\"panel panel-default mdi\\\" ng-if=\\\"vm.showPanelColumns\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\">Visible Columns</h3><span class=\\\"pull-right clickable\\\" data-effect=\\\"fadeOut\\\" ng-click=\\\"vm.closePanelColumns()\\\"><i class=\\\"fa fa-times\\\"></i></span></div><div class=\\\"panel-body\\\" style=\\\"padding-top:0px;\\\"><div class=\\\"row\\\"><br><div class=\\\"col-xs-12\\\"><button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" ng-click=\\\"vm.showColumns()\\\">Select All</button> <button class=\\\"btn btn-default btn-no-focus\\\" type=\\\"button\\\" ng-click=\\\"vm.hideColumns()\\\">Deselect All</button></div></div><div class=\\\"row\\\"><div class=\\\"col-md-4\\\" ng-repeat=\\\"col in vm.options.columnDefs | orderBy:\\'name\\'\\\" style=\\\"text-transform:capitalize;\\\"><div class=\\\"checkbox\\\" style=\\\"margin-bottom:0px\\\"><label><input type=\\\"checkbox\\\" ng-model=\\\"col.visible\\\">{{col.name}}</label></div></div></div></div></div>\");\n$templateCache.put(\"app/components/sunburst/sunburst.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><br><br><div class=\\\"col-xs-12 form-item\\\"><label>Patient</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.patient.patient_ID}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\"><li ng-repeat=\\\"item in vm.patients\\\">{{item.patient_ID}}</li></ul></div></div><div class=\\\"col-xs-12 form-item\\\" ng-repeat=\\\"chart in vm.charts\\\"><label>{{chart.name}}</label><div ng-repeat=\\\"group in chart.groups\\\" class=\\\"legend-bar\\\" style=\\\"border-color:#FFF;position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\"><label class=\\\"switch\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"group.show\\\" ng-change=\\\"vm.draw()\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label> {{group.name}}<div ng-repeat=\\\"tag in group.tags\\\" class=\\\"legend-bar\\\" style=\\\"border-color:{{tag.color}}; position: relative; padding: 2px 10px; line-height: 25px; background-color: rgb(255, 255, 255);\\\">{{tag.name}}</div></div></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Sunburst</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div id=\\\"sunburst-chart\\\"></div></div></section>\");\n$templateCache.put(\"app/components/survival/survival.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-12 form-item\\\" ng-if=\\\"vm.cohortsLegend.length>0\\\"><label>Cohorts</label><div ng-repeat=\\\"cohort in vm.cohortsLegend track by $index\\\" class=\\\"legend-bar\\\" style=\\\"border-color:{{cohort.color}};position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\"><span>{{cohort.name}}</span> <label class=\\\"switch {{item.class}}\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"cohort.show\\\" ng-change=\\\"vm.toggle(cohort)\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Selected Cohort</label><div class=\\\"legend-bar\\\" style=\\\"border-color:{{vm.cohort.color}};position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\"><span>{{vm.cohort.name}} (selected)</span></div><br><label>P-Values for Selected Cohort</label><div class=\\\"tray-chart\\\"><div ng-repeat=\\\"p in vm.pValues track by $index\\\" style=\\\"height:25px;line-height:25px;margin-bottom:1px;\\\">&nbsp; {{p.p}}<div ng-repeat=\\\"c in p.c track by $index\\\" style=\\\"background-color:{{c}};width:10px;height:25px;margin-right:1px;display:inline-block;float:left;\\\"></div></div></div></div></div></section></os-tray><section class=\\\"tray-content-block survival\\\"><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Survival Curves</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div id=\\\"survival-chart\\\"></div></div></section>\");\n$templateCache.put(\"app/components/timelines/timelines.html\",\"<os-tray content=\\\"tray-content-block\\\" change=\\\"vm.resize($event)\\\"><section class=\\\"tray-content\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-6 form-item\\\" style=\\\"padding-right:5px\\\"><label>Align By</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.align.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:100%\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.events track by $index\\\" ng-click=\\\"vm.align=item; vm.update();\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-6 form-item\\\" style=\\\"padding-left:5px\\\"><label>Order By</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.sort.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu dropdown-menu-right\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:100%\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.events track by $index\\\" ng-click=\\\"vm.sort=item; vm.update();\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-6 form-item\\\" style=\\\"padding-right:5px\\\"><label>Patient Status</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.filter.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:100%\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.filters\\\" ng-click=\\\"vm.filter=item;vm.update();\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-6 form-item\\\" style=\\\"padding-left:5px\\\"><label>Timescale</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.timescale.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu dropdown-menu-right\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:100%\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.timescales\\\" ng-click=\\\"vm.timescale=item;vm.update();\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Display Filter</label><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" id=\\\"dropdownMenu1\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"true\\\">{{vm.displayMode.name}} <span class=\\\"caret\\\"></span></button><ul class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownMenu1\\\" style=\\\"width:100%\\\"><li class=\\\"markers-command hvr-sweep-to-right\\\" ng-repeat=\\\"item in vm.displayModes\\\" ng-click=\\\"vm.displayMode=item;vm.update();\\\">{{item.name}}</li></ul></div></div><div class=\\\"col-xs-12 form-item\\\"><div class=\\\"dropdown bs-dropdown\\\"><button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" ng-click=\\\"vm.resetZoom()\\\" style=\\\"text-align:center;\\\">Clear Selection + Reset Zoom</button></div></div><div class=\\\"col-xs-12 form-item\\\"><label>Events</label><div ng-repeat=\\\"item in vm.events track by $index\\\" class=\\\"legend-bar\\\" style=\\\"border-color:{{item.color}};position:relative;background-color:#FFF;padding:2px 10px;line-height:25px;\\\">{{item.name}} <label class=\\\"switch {{item.class}}\\\" style=\\\"float:right\\\"><input type=\\\"checkbox\\\" class=\\\"switch-input\\\" ng-model=\\\"item.selected\\\" ng-change=\\\"vm.update();\\\"> <span class=\\\"switch-label\\\" data-on=\\\"On\\\" data-off=\\\"Off\\\"></span> <span class=\\\"switch-handle\\\"></span></label></div></div></div></section></os-tray><section class=\\\"tray-content-block\\\"><div style=\\\"position:absolute;top:10px;text-align:center;width:100%;\\\"><h2 class=\\\"h2-tool\\\">Timelines</h2><span class=\\\"h3-tool\\\">{{vm.datasource.source}} {{vm.datasource.name}}</span><div class=\\\"timelines-content\\\" style=\\\"margin-top:20px;\\\"></div></div></section>\");\n$templateCache.put(\"app/components/tools/tools.html\",\"<section class=\\\"datasource\\\"><div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-sm-12 col-md-8\\\"><br><h1>Analysis Tools</h1></div></div><div class=\\\"row\\\"><ul><li ng-repeat=\\\"tool in vm.tools\\\" class=\\\"col-xs-12 col-sm-6 col-md-4\\\" ng-click=\\\"vm.explore(tool.route)\\\"><div class=\\\"datasource-btn\\\"><img class=\\\"datasource-img\\\" ng-src=\\\"/assets/images/{{tool.img}}\\\"><p class=\\\"datasource-h1\\\" style=\\\"padding-top:10px;\\\">{{tool.name}}</p><p class=\\\"datasource-h2\\\">{{tool.desc}}</p></div></li></ul></div></div></section>\");\n$templateCache.put(\"app/components/tray/tray.html\",\"<div><label class=\\\"tray-label tray-label-right\\\"><i class=\\\"fa fa-chevron-left\\\" aria-hidden=\\\"true\\\"></i></label><div class=\\\"tray {{vm.trayClass}} tray-right\\\" locked=\\\"true\\\"><ng-transclude></ng-transclude><i class=\\\"fa fa-lock tray-sticky-icon {{vm.iconClass}}\\\" ng-click=\\\"vm.toggle()\\\" tooltip=\\\"Show / Hide\\\" tooltip-placement=\\\"left\\\"></i></div></div>\");\n$templateCache.put(\"app/components/userdatasource/userdatasource.html\",\"<section class=\\\"userdatasource\\\"><div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-sm-12 col-md-12\\\"><br><h1>My Datasets</h1></div></div><div class=\\\"well\\\"><div ng-show=\\\"vm.user == null\\\"><h3>Choose from import options below or <a ng-click=\\\"vm.login();\\\">Login</a> to access your personal datasets.</h3></div><div ng-show=\\\"vm.user != null\\\"><div ng-show=\\\"vm.projects.length ==0\\\">Please upload a project from below</div><div class=\\\"row\\\"><ul><li ng-repeat=\\\"dataset in vm.projects\\\" class=\\\"col-xs-12 col-sm-6 col-md-4 col-lg-3\\\" ng-click=\\\"vm.explore(\\'tools\\',dataset)\\\"><div class=\\\"datasource-btn\\\"><img class=\\\"datasource-img\\\" ng-src=\\\"/assets/images/img{{dataset.img}}\\\"><p class=\\\"datasource-h1\\\">{{dataset.name}}</p><p class=\\\"datasource-h2\\\">{{dataset.source}}</p></div></li></ul></div></div></div><h1>Import</h1><div><a class=\\\"btn btn-outline btn-xl\\\" href=\\\"http://localhost:4200/\\\" target=\\\"_blank\\\">User File</a> <a class=\\\"btn btn-outline btn-xl\\\" ng-click=\\\"vm.showDatasourceOption(\\'TCGA\\')\\\">TCGA</a></div></div></section>\");}]);"],"file":"scripts/app-b6c603ad5a.js","sourceRoot":"/source/"}