var fs = require('fs');
var Step = require('step');
var Path = require('path');
var connect = require('connect');
var utils = require('connect/lib/utils');
var Buffer = require('buffer').Buffer;
var parseUrl = require('url').parse;
var queryString = require('querystring');

/**
 *
 * Options:
 *
 *   - `root`     Root path from which to serve static files.
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

var httpd = module.exports = function httpdSetup(options){
    var root;

    // Support options object and root string
    if (typeof options == 'string') {
        root = options;
    } else {
        options = options || {};
        root = options.root || process.cwd();
    }

    return function httpd(req, res, next) {
        if (req.method != 'GET' && req.method != 'HEAD') return next();

        var head = req.method == 'HEAD';
        var url = parseUrl(req.url);

        // Potentially malicious path
        if (~url.pathname.indexOf('..')) {
            return forbidden(res);
        }

        var relPath = queryString.unescape(url.pathname);

        // Absolute path
        var path = Path.join(root, relPath);

        var indexPath = Path.join(root, relPath, 'index.html');

        Step(
            function checkIndex(){
                fs.stat(indexPath, this);
            }
            , function(err, indexStat){
                var self = this;
                if(err
                   && err.errno !== process.ENOENT
                   && err.errno !== process.ENOTDIR) {
                    throw err;
                }

                if(indexStat && indexStat.isFile()) {
                    this(null, {path: indexPath
                                , size: indexStat.size
                                , directory: false});
                } else {
                    fs.stat(path, function(err, stat){
                        if(err) { self(err); return; }

                        self(null, {path: path
                                    , size: stat.size
                                    , directory: stat.isDirectory()});
                    });
                }
            }

            , function(err, stat){
                if(err) {
                    if(err.errno === process.ENOENT) {
                        return notFound(res);
                    } else {
                        next(err);
                    }
                } else if(stat.directory) {
                    // List files
                    return listFiles(res, path, relPath);
                }

                if(!stat.directory) {
                    // Serve the file directly using buffers
                    function onRead(err, data) {
                        if (err) return next(err);

                        // Response headers
                        var headers = {
                            "Content-Type": utils.mime.type(stat.path),
                            "Content-Length": stat.size,
                            "Cache-Control": 'no-cache'
                        };

                        res.writeHead(200, headers);
                        res.end(head ? undefined : data);
                    }

                    fs.readFile(stat.path, onRead);
                } else {
                    forbidden(res);
                }
            });
    }
};

function forbidden(res){
    var body = 'Forbidden';
    res.writeHead(403, {
        'Content-Type': 'text/plain',
        'Content-Length': body.length
    });

    res.end(body);
}

function notFound(res){
    var body = 'Not Found';
    res.writeHead(404, {
        'Content-Type': 'text/plain',
        'Content-Length': body.length
    });

    res.end(body);
}

function listFiles(res, path, relPath){
    fs.readdir(path, function(err, files){
        if(err) next(err);

        files = files.map(function(file){
            return '<a href=' + Path.join(relPath, file) + '>' + file + '</a>';
        }).join('\n');

        files = ['<html>'
                 , '<head><title>Index of '+ relPath +'</title></head>'
                 , '<body>'
                 , '<h1>Index of '+ relPath +'</h1><hr><pre><a href="../">../</a>'
                 , files
                 , '</pre><hr></body>'
                 , '</html>'].join('\n');

        var headers = {
            "Content-Type": 'text/html',
            "Content-Length": files.length,
            "Cache-Control": 'no-cache'
        };

        res.writeHead(200, headers);
        res.end(files);
    });
}
